<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-01-22T17:41:07+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tomorrow’s Blog</title><entry><title type="html">引用</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/07/Reference/" rel="alternate" type="text/html" title="引用" /><published>2025-01-07T00:00:00+08:00</published><updated>2025-01-07T00:00:00+08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/07/Reference</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/07/Reference/"><![CDATA[<h1 id="引用"><span style="color: rgb(255,127,80);"><strong>引用</strong></span></h1>

<p>在 C++ 中，<strong>引用</strong>是一种为变量提供别名的机制。引用不仅可以用来传递参数，还可以作为返回值。引用通常比指针更容易理解和使用，它使得代码更加简洁，并减少了指针的复杂性。本文将详细介绍 C++ 中引用的基本概念、作为函数参数和返回值的应用以及使用引用时的注意事项。</p>

<h4 id="c-中的引用基本概念"><span style="color: rgb(0,191,255);"><strong>C++ 中的引用基本概念</strong></span></h4>

<p>引用是某个变量的别名。引用在初始化时与某个变量绑定，并且从此之后，它就成为这个变量的别名。可以使用引用来访问和修改原始变量的值。</p>

<h5 id="1-创建引用"><span style="color: rgb(32,178,170);"><strong>1. 创建引用</strong></span></h5>

<p>在 C++ 中，引用的声明方式是在类型名后加上 <code class="language-plaintext highlighter-rouge">&amp;</code> 符号。举个例子：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">17</span><span class="p">;</span>
<span class="kt">int</span><span class="o">&amp;</span> <span class="n">r</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>  <span class="c1">// r 是 i 的引用</span>
</code></pre></div></div>

<p>此时，<code class="language-plaintext highlighter-rouge">r</code> 和 <code class="language-plaintext highlighter-rouge">i</code> 指向同一个内存位置，修改 <code class="language-plaintext highlighter-rouge">r</code> 或 <code class="language-plaintext highlighter-rouge">i</code> 都会影响到对方。</p>

<h4 id="2-引用与指针的区别"><span style="color: rgb(32,178,170);"><strong>2. 引用与指针的区别</strong></span></h4>

<p>引用与指针在 C++ 中有几个明显的不同之处：</p>

<ul>
  <li><strong>引用不能为 null</strong>：一旦引用被初始化，它就必须绑定到一个合法的内存位置，而指针可以指向 <code class="language-plaintext highlighter-rouge">nullptr</code>。</li>
  <li><strong>引用不能更改指向对象</strong>：引用一旦绑定到某个变量，它就不能再指向其他变量，而指针可以随时指向不同的对象。</li>
  <li><strong>引用必须在创建时初始化</strong>：创建引用时必须提供一个变量来初始化它，而指针则可以在任何时候被初始化。</li>
</ul>

<p>这些特点使得引用在某些情况下比指针更加安全和简洁。</p>

<h4 id="引用作为函数参数"><span style="color: rgb(0,191,255);"><strong>引用作为函数参数</strong></span></h4>

<p>C++ 中，引用经常用于函数参数传递。这种方式称为<strong>引用传递</strong>。引用传递的一个主要优点是，函数能够直接修改传入的变量，而无需返回任何值或通过指针修改。相比传值传递，引用传递避免了复制变量的开销。</p>

<h5 id="示例交换两个整数的值"><span style="color: rgb(32,178,170);"><strong>示例：交换两个整数的值</strong></span></h5>

<p>以下是一个简单的例子，演示如何通过引用传递来交换两个整数的值：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="c1">// 函数声明</span>
<span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">y</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"交换前，a 的值："</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"交换前，b 的值："</span> <span class="o">&lt;&lt;</span> <span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="c1">// 调用函数交换值</span>
    <span class="n">swap</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"交换后，a 的值："</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"交换后，b 的值："</span> <span class="o">&lt;&lt;</span> <span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// 函数定义：通过引用交换两个整数的值</span>
<span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span><span class="o">&amp;</span> <span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="c1">// 保存 x 的值</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>        <span class="c1">// 将 y 的值赋给 x</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>     <span class="c1">// 将 x 的值赋给 y</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">交换前，a 的值：100</span>
<span class="s">交换前，b 的值：200</span>
<span class="s">交换后，a 的值：200</span>
<span class="s">交换后，b 的值：100</span>
</code></pre></div></div>

<p>在上面的例子中，<code class="language-plaintext highlighter-rouge">swap</code> 函数通过引用传递，直接修改了 <code class="language-plaintext highlighter-rouge">a</code> 和 <code class="language-plaintext highlighter-rouge">b</code> 的值，而不需要使用指针或者返回值。</p>

<h4 id="引用作为函数返回值"><span style="color: rgb(0,191,255);"><strong>引用作为函数返回值</strong></span></h4>

<p>除了作为函数参数，引用也可以作为函数的返回值。在 C++ 中，返回一个引用可以让你直接修改函数返回的对象，而不需要通过指针来进行操作。</p>

<h5 id="示例返回数组元素的引用"><span style="color: rgb(32,178,170);"><strong>示例：返回数组元素的引用</strong></span></h5>

<p>以下是一个示例，演示如何通过返回引用来修改数组中的元素：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">double</span> <span class="n">vals</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mf">10.1</span><span class="p">,</span> <span class="mf">12.6</span><span class="p">,</span> <span class="mf">33.1</span><span class="p">,</span> <span class="mf">24.1</span><span class="p">,</span> <span class="mf">50.0</span><span class="p">};</span>
<span class="c1">// 函数返回数组元素的引用</span>
<span class="kt">double</span><span class="o">&amp;</span> <span class="n">setValues</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
<span class="p">{</span>  
    <span class="kt">double</span><span class="o">&amp;</span> <span class="n">ref</span> <span class="o">=</span> <span class="n">vals</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>  <span class="c1">// 创建对数组元素的引用</span>
    <span class="k">return</span> <span class="n">ref</span><span class="p">;</span>  <span class="c1">// 返回该引用</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"改变前的值"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"vals["</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">"] = "</span> <span class="o">&lt;&lt;</span> <span class="n">vals</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// 调用函数修改数组中的元素</span>
    <span class="n">setValues</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="mf">20.23</span><span class="p">;</span>  <span class="c1">// 改变第 2 个元素</span>
    <span class="n">setValues</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">=</span> <span class="mf">70.8</span><span class="p">;</span>   <span class="c1">// 改变第 4 个元素</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"改变后的值"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"vals["</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">"] = "</span> <span class="o">&lt;&lt;</span> <span class="n">vals</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">改变前的值</span>
<span class="s">vals[0] = </span><span class="m">10.1</span>
<span class="s">vals[1] = </span><span class="m">12.6</span>
<span class="s">vals[2] = </span><span class="m">33.1</span>
<span class="s">vals[3] = </span><span class="m">24.1</span>
<span class="s">vals[4] = </span><span class="m">50</span>
<span class="s">改变后的值</span>
<span class="s">vals[0] = </span><span class="m">10.1</span>
<span class="s">vals[1] = </span><span class="m">20.23</span>
<span class="s">vals[2] = </span><span class="m">33.1</span>
<span class="s">vals[3] = </span><span class="m">70.8</span>
<span class="s">vals[4] = </span><span class="m">50</span>
</code></pre></div></div>

<p>在这个示例中，<code class="language-plaintext highlighter-rouge">setValues</code> 函数返回了 <code class="language-plaintext highlighter-rouge">vals[i]</code> 的引用，从而允许我们直接修改数组中的元素。</p>

<h5 id="注意事项不要返回局部变量的引用"><span style="color: rgb(0,191,255);"><strong>注意事项：不要返回局部变量的引用</strong></span></h5>

<p>需要特别注意的是，不能返回一个局部变量的引用，因为局部变量在函数结束时会被销毁，返回该变量的引用将导致未定义行为。相反，如果函数返回静态变量的引用，静态变量在程序的生命周期内保持有效。</p>

<h5 id="示例返回静态变量的引用"><span style="color: rgb(32,178,170);"><strong>示例：返回静态变量的引用</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span><span class="o">&amp;</span> <span class="n">getStaticRef</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>  <span class="c1">// 静态变量</span>
    <span class="k">return</span> <span class="n">num</span><span class="p">;</span>  <span class="c1">// 返回静态变量的引用</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span><span class="o">&amp;</span> <span class="n">ref</span> <span class="o">=</span> <span class="n">getStaticRef</span><span class="p">();</span>  <span class="c1">// 获取对静态变量的引用</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"初始值："</span> <span class="o">&lt;&lt;</span> <span class="n">ref</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">ref</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>  <span class="c1">// 修改静态变量的值</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"修改后的值："</span> <span class="o">&lt;&lt;</span> <span class="n">ref</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"再次调用函数后的值："</span> <span class="o">&lt;&lt;</span> <span class="n">getStaticRef</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">初始值：5</span>
<span class="s">修改后的值：10</span>
<span class="s">再次调用函数后的值：10</span>
</code></pre></div></div>

<h3 id="总结"><span style="color: rgb(0,191,255);"><strong>总结</strong></span></h3>

<ul>
  <li><strong>引用的基本概念</strong>：引用是变量的别名，通过引用可以修改原始变量的值，避免了指针的复杂性。</li>
  <li><strong>引用作为参数</strong>：引用传递允许函数直接修改传入的变量，并且避免了值传递的复制开销。</li>
  <li><strong>引用作为返回值</strong>：函数返回引用可以让我们直接修改返回值对应的对象。需要注意，不能返回局部变量的引用，但可以返回静态变量的引用。</li>
</ul>

<p>通过灵活使用引用，C++ 编程可以变得更加简洁、高效，同时提高代码的可读性和可维护性。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[引用]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">日期与时间</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/07/Date-and-Time/" rel="alternate" type="text/html" title="日期与时间" /><published>2025-01-07T00:00:00+08:00</published><updated>2025-01-07T00:00:00+08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/07/Date%20and%20Time</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/07/Date-and-Time/"><![CDATA[<h1 id="日期与时间"><span style="color: rgb(255,127,80);"><strong>日期与时间</strong></span></h1>

<p>在 C++ 中，没有直接的日期类型，标准库主要依赖于 C 语言中的日期和时间处理方式。因此，为了操作日期和时间，你需要在程序中引入 <code class="language-plaintext highlighter-rouge">&lt;ctime&gt;</code> 头文件。</p>

<p>C++ 提供了四种与时间相关的类型：<code class="language-plaintext highlighter-rouge">clock_t</code>、<code class="language-plaintext highlighter-rouge">time_t</code>、<code class="language-plaintext highlighter-rouge">size_t</code> 和 <code class="language-plaintext highlighter-rouge">tm</code>。其中，<code class="language-plaintext highlighter-rouge">clock_t</code>、<code class="language-plaintext highlighter-rouge">size_t</code> 和 <code class="language-plaintext highlighter-rouge">time_t</code> 用整数来表示系统时间和日期，而 <code class="language-plaintext highlighter-rouge">tm</code> 结构则以更为直观的方式存储日期和时间的各个组成部分。</p>

<h3 id="tm-结构"><span style="color: rgb(0,191,255);"><strong><code class="language-plaintext highlighter-rouge">tm</code> 结构</strong></span></h3>

<p><code class="language-plaintext highlighter-rouge">tm</code> 结构是 C/C++ 中用于存储日期和时间的结构体，其定义如下：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">tm</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">tm_sec</span><span class="p">;</span>   <span class="c1">// 秒，范围 0 到 59（但有时允许到 61）</span>
  <span class="kt">int</span> <span class="n">tm_min</span><span class="p">;</span>   <span class="c1">// 分钟，范围 0 到 59</span>
  <span class="kt">int</span> <span class="n">tm_hour</span><span class="p">;</span>  <span class="c1">// 小时，范围 0 到 23</span>
  <span class="kt">int</span> <span class="n">tm_mday</span><span class="p">;</span>  <span class="c1">// 日，范围 1 到 31</span>
  <span class="kt">int</span> <span class="n">tm_mon</span><span class="p">;</span>   <span class="c1">// 月，范围 0 到 11（0 代表 1 月，11 代表 12 月）</span>
  <span class="kt">int</span> <span class="n">tm_year</span><span class="p">;</span>  <span class="c1">// 年，从 1900 年起算</span>
  <span class="kt">int</span> <span class="n">tm_wday</span><span class="p">;</span>  <span class="c1">// 星期几，范围 0 到 6（0 代表星期天）</span>
  <span class="kt">int</span> <span class="n">tm_yday</span><span class="p">;</span>  <span class="c1">// 一年中的第几天，范围 0 到 365</span>
  <span class="kt">int</span> <span class="n">tm_isdst</span><span class="p">;</span> <span class="c1">// 夏令时标识（非零表示启用夏令时）</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="常用的时间函数"><span style="color: rgb(0,191,255);"><strong>常用的时间函数</strong></span></h3>

<p>C++ 标准库提供了一些与时间相关的函数，使用时可以参考下表：</p>

<table>
  <thead>
    <tr>
      <th>函数</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">time_t time(time_t *time);</code></td>
      <td>返回当前日历时间，自 1970 年 1 月 1 日以来的秒数。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">char* ctime(const time_t *time);</code></td>
      <td>将 <code class="language-plaintext highlighter-rouge">time_t</code> 类型的时间转换为字符串表示，格式为：<code class="language-plaintext highlighter-rouge">day month date hours:minutes:seconds year\n\0</code>。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">struct tm* localtime(const time_t *time);</code></td>
      <td>返回本地时间的 <code class="language-plaintext highlighter-rouge">tm</code> 结构指针。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">clock_t clock(void);</code></td>
      <td>返回程序运行时的处理器时间。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">char* asctime(const struct tm *time);</code></td>
      <td>将 <code class="language-plaintext highlighter-rouge">tm</code> 结构转换为字符串，格式为：<code class="language-plaintext highlighter-rouge">day month date hours:minutes:seconds year\n\0</code>。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">struct tm* gmtime(const time_t *time);</code></td>
      <td>返回与 UTC（格林尼治标准时间）相关的 <code class="language-plaintext highlighter-rouge">tm</code> 结构指针。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">time_t mktime(struct tm *time);</code></td>
      <td>将 <code class="language-plaintext highlighter-rouge">tm</code> 结构转换为 <code class="language-plaintext highlighter-rouge">time_t</code> 类型的日历时间。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">double difftime(time_t time2, time_t time1);</code></td>
      <td>返回两个时间点之间的秒数差。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">size_t strftime();</code></td>
      <td>用指定格式输出日期和时间。</td>
    </tr>
  </tbody>
</table>

<h3 id="获取当前日期和时间"><span style="color: rgb(0,191,255);"><strong>获取当前日期和时间</strong></span></h3>

<p>以下是一个示例程序，展示如何获取当前日期和时间，包括本地时间和协调世界时（UTC）。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;ctime&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// 获取当前时间（自1970年1月1日以来的秒数）</span>
    <span class="kt">time_t</span> <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="c1">// 将当前时间转换为字符串形式</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">dt</span> <span class="o">=</span> <span class="n">ctime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">now</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"本地日期和时间："</span> <span class="o">&lt;&lt;</span> <span class="n">dt</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="c1">// 获取UTC时间</span>
    <span class="n">tm</span><span class="o">*</span> <span class="n">gmtm</span> <span class="o">=</span> <span class="n">gmtime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">now</span><span class="p">);</span>
    <span class="n">dt</span> <span class="o">=</span> <span class="n">asctime</span><span class="p">(</span><span class="n">gmtm</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"UTC 日期和时间："</span> <span class="o">&lt;&lt;</span> <span class="n">dt</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出示例</strong>：</span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">本地日期和时间：Sat Jan  8 20:07:41 </span><span class="m">2011</span>
<span class="s">UTC 日期和时间：Sun Jan  9 03:07:41 </span><span class="m">2011</span>
</code></pre></div></div>

<h3 id="使用-tm-结构格式化时间"><span style="color: rgb(0,191,255);"><strong>使用 <code class="language-plaintext highlighter-rouge">tm</code> 结构格式化时间</strong></span></h3>

<p><code class="language-plaintext highlighter-rouge">tm</code> 结构在 C/C++ 中处理日期和时间时非常有用。你可以访问结构中的各个成员来获取时间的详细信息。下面是一个使用 <code class="language-plaintext highlighter-rouge">tm</code> 结构的示例：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;ctime&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// 获取当前时间</span>
    <span class="kt">time_t</span> <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"1970 到目前经过的秒数: "</span> <span class="o">&lt;&lt;</span> <span class="n">now</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="c1">// 将时间转换为本地时间（tm结构）</span>
    <span class="n">tm</span><span class="o">*</span> <span class="n">ltm</span> <span class="o">=</span> <span class="n">localtime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">now</span><span class="p">);</span>
    <span class="c1">// 输出 tm 结构的各个组成部分</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"年: "</span> <span class="o">&lt;&lt;</span> <span class="mi">1900</span> <span class="o">+</span> <span class="n">ltm</span><span class="o">-&gt;</span><span class="n">tm_year</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"月: "</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">ltm</span><span class="o">-&gt;</span><span class="n">tm_mon</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"日: "</span> <span class="o">&lt;&lt;</span> <span class="n">ltm</span><span class="o">-&gt;</span><span class="n">tm_mday</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"时间: "</span> <span class="o">&lt;&lt;</span> <span class="n">ltm</span><span class="o">-&gt;</span><span class="n">tm_hour</span> <span class="o">&lt;&lt;</span> <span class="s">":"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ltm</span><span class="o">-&gt;</span><span class="n">tm_min</span> <span class="o">&lt;&lt;</span> <span class="s">":"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ltm</span><span class="o">-&gt;</span><span class="n">tm_sec</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>**输出示例</strong>：**</span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">1970 到目前经过的秒数</span><span class="pi">:</span> <span class="m">1503564157</span>
<span class="na">年</span><span class="pi">:</span> <span class="m">2017</span>
<span class="na">月</span><span class="pi">:</span> <span class="m">8</span>
<span class="na">日</span><span class="pi">:</span> <span class="m">24</span>
<span class="na">时间</span><span class="pi">:</span> <span class="s">16:42:37</span>
</code></pre></div></div>

<p>在上面的代码中，我们用 <code class="language-plaintext highlighter-rouge">1900 + ltm-&gt;tm_year</code> 来获取实际的年份，因为 <code class="language-plaintext highlighter-rouge">tm_year</code> 存储的是从 1900 年起的年份偏移量。同样地，用 <code class="language-plaintext highlighter-rouge">1 + ltm-&gt;tm_mon</code> 来计算实际月份，因为 <code class="language-plaintext highlighter-rouge">tm_mon</code> 的范围是从 0 到 11，表示从 1 月到 12 月。</p>

<h3 id="总结"><span style="color: rgb(0,191,255);"><strong>总结</strong></span></h3>

<p>在 C++ 中，处理日期和时间主要依赖于 <code class="language-plaintext highlighter-rouge">&lt;ctime&gt;</code> 头文件，使用 <code class="language-plaintext highlighter-rouge">time_t</code> 和 <code class="language-plaintext highlighter-rouge">tm</code> 等类型进行时间的表示和操作。通过相关函数，你可以轻松获取和格式化当前时间，以及进行日期与时间的计算。这些基础操作对于开发中需要时间功能的程序是非常常见的。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[日期与时间]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">指针</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/07/Pointers/" rel="alternate" type="text/html" title="指针" /><published>2025-01-07T00:00:00+08:00</published><updated>2025-01-07T00:00:00+08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/07/Pointers</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/07/Pointers/"><![CDATA[<h1 id="指针教程"><span style="color: rgb(255,127,80);"><strong>指针教程</strong></span></h1>

<p>学习 C++ 中的指针既简单又有趣。通过指针，可以简化一些编程任务，例如动态内存分配，而这些任务没有指针是无法完成的。因此，掌握指针是成为优秀 C++ 程序员的重要一步。</p>

<p>每个变量都有一个内存地址，可以使用地址运算符 <code class="language-plaintext highlighter-rouge">&amp;</code> 来获取这个地址。下面是一个简单的例子，展示了如何打印变量的内存地址：</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">var1</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">var2</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"var1 变量的地址： "</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">var1</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"var2 变量的地址： "</span> <span class="o">&lt;&lt;</span> <span class="o">&amp;</span><span class="n">var2</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>当上面的代码编译并执行时，可能会输出类似以下内容：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">var1 变量的地址： 0xbfebd5c0</span>
<span class="s">var2 变量的地址： 0xbfebd5b6</span>
</code></pre></div></div>

<p>通过这个例子，你可以看到 <code class="language-plaintext highlighter-rouge">var1</code> 和 <code class="language-plaintext highlighter-rouge">var2</code> 的内存地址是不同的。接下来，我们将介绍什么是指针。</p>

<h3 id="什么是指针"><span style="color: rgb(0,191,255);"><strong>什么是指针？</strong></span></h3>

<p>指针是一个变量，它存储另一个变量的内存地址。你可以通过指针间接地访问内存中的数据。指针变量需要在使用前声明，声明的语法如下：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">type</span> <span class="o">*</span><span class="n">pointerName</span><span class="p">;</span>
</code></pre></div></div>

<p>其中：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">type</code> 是指针所指向数据的类型。</li>
  <li><code class="language-plaintext highlighter-rouge">pointerName</code> 是指针变量的名称。</li>
</ul>

<p>星号 <code class="language-plaintext highlighter-rouge">*</code> 用于声明一个指针，它不同于乘法中的 <code class="language-plaintext highlighter-rouge">*</code> 运算符，在这里它的作用是指示一个变量是指针类型。以下是一些有效的指针声明示例：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span>    <span class="o">*</span><span class="n">ip</span><span class="p">;</span>    <span class="c1">// 整型指针</span>
<span class="kt">double</span> <span class="o">*</span><span class="n">dp</span><span class="p">;</span>    <span class="c1">// 双精度浮点型指针</span>
<span class="kt">float</span>  <span class="o">*</span><span class="n">fp</span><span class="p">;</span>    <span class="c1">// 浮点型指针</span>
<span class="kt">char</span>   <span class="o">*</span><span class="n">ch</span><span class="p">;</span>    <span class="c1">// 字符型指针</span>
</code></pre></div></div>

<p>虽然指针的类型可以不同（整型、浮点型等），但它们存储的值始终是一个内存地址，通常以十六进制表示。</p>

<h3 id="如何使用指针"><span style="color: rgb(0,191,255);"><strong>如何使用指针</strong></span></h3>

<p>指针的常见操作包括：</p>
<ol>
  <li><strong>定义指针变量</strong></li>
  <li><strong>将变量的地址赋给指针</strong></li>
  <li><strong>通过指针访问变量的值</strong></li>
</ol>

<p>你可以使用 <code class="language-plaintext highlighter-rouge">*</code> 运算符来访问指针指向的内存位置中的值。下面是一个具体示例：</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">var</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>   <span class="c1">// 声明一个整数变量</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">ip</span><span class="p">;</span>        <span class="c1">// 声明一个指向整数的指针</span>
    <span class="n">ip</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">var</span><span class="p">;</span>      <span class="c1">// 将 var 的地址赋给指针 ip</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"var 变量的值： "</span> <span class="o">&lt;&lt;</span> <span class="n">var</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"ip 指针存储的地址： "</span> <span class="o">&lt;&lt;</span> <span class="n">ip</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"*ip 指针指向的值： "</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">ip</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>运行结果：</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">var 变量的值： </span><span class="m">20</span>
<span class="s">ip 指针存储的地址： 0xbfc601ac</span>
<span class="nv">*ip</span> <span class="s">指针指向的值： </span><span class="m">20</span>
</code></pre></div></div>

<p>在这个例子中：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">&amp;var</code> 获取变量 <code class="language-plaintext highlighter-rouge">var</code> 的地址，并将其赋值给指针 <code class="language-plaintext highlighter-rouge">ip</code>。</li>
  <li>使用 <code class="language-plaintext highlighter-rouge">*ip</code> 来访问指针 <code class="language-plaintext highlighter-rouge">ip</code> 指向的内存位置的值，即 <code class="language-plaintext highlighter-rouge">var</code> 的值。</li>
</ul>

<h3 id="c-指针的常见概念"><span style="color: rgb(0,191,255);"><strong>C++ 指针的常见概念</strong></span></h3>

<p>在 C++ 中，指针有许多重要的概念，下面是一些基本概念：</p>

<table>
  <thead>
    <tr>
      <th><strong>概念</strong></th>
      <th><strong>描述</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>空指针（NULL 指针）</strong></td>
      <td><code class="language-plaintext highlighter-rouge">NULL</code> 是一个值为零的常量，用于表示指针不指向任何有效的内存地址。</td>
    </tr>
    <tr>
      <td><strong>指针运算</strong></td>
      <td>可以对指针进行算术运算：<code class="language-plaintext highlighter-rouge">++</code>（指向下一个内存单元）、<code class="language-plaintext highlighter-rouge">--</code>（指向前一个内存单元）、<code class="language-plaintext highlighter-rouge">+</code>（增加偏移量）、<code class="language-plaintext highlighter-rouge">-</code>（减少偏移量）。</td>
    </tr>
    <tr>
      <td><strong>指针与数组</strong></td>
      <td>数组名本身就是一个指向数组首元素的指针，因此，指针和数组之间有密切关系。</td>
    </tr>
    <tr>
      <td><strong>指针数组</strong></td>
      <td>可以定义一个数组，该数组存储多个指针。</td>
    </tr>
    <tr>
      <td><strong>指向指针的指针</strong></td>
      <td>C++ 允许定义指向指针的指针（即指针的指针），这种结构有时用于多维数组。</td>
    </tr>
    <tr>
      <td><strong>传递指针给函数</strong></td>
      <td>通过传递指针，可以使得函数内修改传递给它的变量。</td>
    </tr>
    <tr>
      <td><strong>函数返回指针</strong></td>
      <td>函数可以返回指向局部变量、静态变量或动态分配内存的指针。</td>
    </tr>
  </tbody>
</table>

<h3 id="1c-null-指针"><span style="color: rgb(0,191,255);"><strong>1.C++ Null 指针</strong></span></h3>

<p>在 C++ 中，如果指针在声明时没有明确的地址可以赋值，给指针变量赋值为 <code class="language-plaintext highlighter-rouge">NULL</code> 是一种良好的编程习惯。一个赋值为 <code class="language-plaintext highlighter-rouge">NULL</code> 的指针被称为空指针。</p>

<h4 id="什么是-null-指针"><span style="color: rgb(32,178,170);"><strong>什么是 NULL 指针？</strong></span></h4>

<p><code class="language-plaintext highlighter-rouge">NULL</code> 指针是一个常量，它的值为零，表示指针不指向任何有效的内存地址。使用空指针有助于避免程序中出现未初始化的指针，从而减少错误和调试难度。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>   <span class="c1">// 将指针初始化为 NULL</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"ptr 的值是 "</span> <span class="o">&lt;&lt;</span> <span class="n">ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>当代码编译并运行时，输出将是：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ptr 的值是 0
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">ptr</code> 是一个空指针，它的值是 <code class="language-plaintext highlighter-rouge">NULL</code>，即零。大多数操作系统都不允许访问地址为 0 的内存，因为该内存地址通常是操作系统保留的。因此，指向 <code class="language-plaintext highlighter-rouge">0</code> 的指针被认为是一个无效指针，通常不指向任何合法的内存位置。</p>

<h3 id="如何检查空指针"><span style="color: rgb(32,178,170);"><strong>如何检查空指针</strong></span></h3>

<p>在程序中，你可能需要检查一个指针是否为空。你可以使用 <code class="language-plaintext highlighter-rouge">if</code> 语句来检查指针是否为 <code class="language-plaintext highlighter-rouge">NULL</code>，例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">ptr</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="c1">// 如果 ptr 非空，则执行此代码块</span>
<span class="p">}</span> 
<span class="k">else</span> 
<span class="p">{</span>
    <span class="c1">// 如果 ptr 为空，则执行此代码块</span>
<span class="p">}</span>
</code></pre></div></div>

<p>或者：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ptr</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="c1">// 如果 ptr 为空，则执行此代码块</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="空指针的好处"><span style="color: rgb(32,178,170);"><strong>空指针的好处</strong></span></h3>

<ul>
  <li>
    <p><strong>避免误用未初始化的指针</strong>：指针在声明后，如果没有赋初值，它可能包含一些垃圾值，这可能会导致程序错误或崩溃。通过将未使用的指针初始化为 <code class="language-plaintext highlighter-rouge">NULL</code>，可以确保它不指向任何非法的内存地址，从而减少因误用未初始化指针而引发的问题。</p>
  </li>
  <li>
    <p><strong>提高代码的可读性和可维护性</strong>：给指针赋 <code class="language-plaintext highlighter-rouge">NULL</code> 值是一种良好的编码规范，帮助其他开发者了解该指针尚未指向有效的数据，避免出现不必要的错误。</p>
  </li>
</ul>

<h3 id="总结"><span style="color: rgb(32,178,170);"><strong>总结</strong></span></h3>

<p>空指针（<code class="language-plaintext highlighter-rouge">NULL</code>）是 C++ 中的一种指针，它指向一个无效的内存位置（地址为 0）。使用空指针可以有效防止程序中使用未初始化的指针，减少错误的发生，并提高代码的稳定性和可维护性。通过 <code class="language-plaintext highlighter-rouge">if</code> 语句可以方便地检查指针是否为空，帮助你做出正确的逻辑判断。</p>

<h3 id="2c-指针的算术运算"><span style="color: rgb(0,191,255);"><strong>2.C++ 指针的算术运算</strong></span></h3>

<p>指针是一个存储内存地址的变量，因此你可以对指针进行算术运算。C++ 允许对指针执行四种基本的算术运算：<code class="language-plaintext highlighter-rouge">++</code>（递增）、<code class="language-plaintext highlighter-rouge">--</code>（递减）、<code class="language-plaintext highlighter-rouge">+</code>（加法）、<code class="language-plaintext highlighter-rouge">-</code>（减法）。这些运算根据指针的类型和大小来决定移动的距离。</p>

<h4 id="i-递增指针"><span style="color: rgb(32,178,170);"><strong>I. 递增指针（<code class="language-plaintext highlighter-rouge">++</code>）</strong></span></h4>

<p>指针递增时，会使指针指向下一个内存位置，通常是下一个数组元素。递增的偏移量取决于指针所指向的数据类型大小。例如，如果指针是 <code class="language-plaintext highlighter-rouge">int*</code> 类型，那么每次递增将跳过一个 <code class="language-plaintext highlighter-rouge">int</code> 的大小（通常是 4 个字节）。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">};</span>
    <span class="kt">int</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">arr</span><span class="p">;</span>  <span class="c1">// 指向数组的第一个元素</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"指针当前指向的元素: "</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">ptr</span><span class="o">++</span><span class="p">;</span>  <span class="c1">// 递增指针，指向下一个元素</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"递增指针后指向的元素: "</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">指针当前指向的元素</span><span class="pi">:</span> <span class="m">10</span>
<span class="na">递增指针后指向的元素</span><span class="pi">:</span> <span class="m">20</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">ptr++</code> 使得指针指向数组中的下一个元素。由于 <code class="language-plaintext highlighter-rouge">ptr</code> 是 <code class="language-plaintext highlighter-rouge">int*</code> 类型，递增后指针值会增加 4 个字节（假设 <code class="language-plaintext highlighter-rouge">int</code> 类型占 4 个字节）。</p>

<h4 id="ii-递减指针--"><span style="color: rgb(32,178,170);"><strong>II. 递减指针（<code class="language-plaintext highlighter-rouge">--</code>）</strong></span></h4>

<p>指针递减时，会使指针指向上一个内存位置，通常是前一个数组元素。递减的偏移量同样取决于指针的数据类型。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">};</span>
    <span class="kt">int</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>  <span class="c1">// 指向数组的第二个元素</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"指针当前指向的元素: "</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">ptr</span><span class="o">--</span><span class="p">;</span>  <span class="c1">// 递减指针，指向前一个元素</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"递减指针后指向的元素: "</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">指针当前指向的元素</span><span class="pi">:</span> <span class="m">20</span>
<span class="na">递减指针后指向的元素</span><span class="pi">:</span> <span class="m">10</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">ptr--</code> 使得指针指向前一个元素。由于 <code class="language-plaintext highlighter-rouge">ptr</code> 是 <code class="language-plaintext highlighter-rouge">int*</code> 类型，递减后指针值会减少 4 个字节。</p>

<h4 id="iii-指针加法"><span style="color: rgb(32,178,170);"><strong>III. 指针加法（<code class="language-plaintext highlighter-rouge">+</code>）</strong></span></h4>

<p>你可以对指针进行加法运算。当指针 <code class="language-plaintext highlighter-rouge">p</code> 加上一个整数 <code class="language-plaintext highlighter-rouge">n</code> 时，指针会向前移动 <code class="language-plaintext highlighter-rouge">n</code> 个元素的大小。例如，如果 <code class="language-plaintext highlighter-rouge">p</code> 是一个 <code class="language-plaintext highlighter-rouge">int*</code> 类型，每个 <code class="language-plaintext highlighter-rouge">int</code> 占 4 个字节，那么 <code class="language-plaintext highlighter-rouge">p + 1</code> 将指向下一个 <code class="language-plaintext highlighter-rouge">int</code> 元素。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">};</span>
    <span class="kt">int</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">arr</span><span class="p">;</span>  <span class="c1">// 指向数组的第一个元素</span>
    <span class="c1">// 输出 ptr + 2 指向的元素（向前移动 2 个元素）</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"ptr + 2 指向的元素: "</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="p">(</span><span class="n">ptr</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">ptr + 2 指向的元素</span><span class="pi">:</span> <span class="m">30</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">ptr + 2</code> 会使指针向前移动 2 个 <code class="language-plaintext highlighter-rouge">int</code> 元素的位置，相当于将 <code class="language-plaintext highlighter-rouge">ptr</code> 指向 <code class="language-plaintext highlighter-rouge">arr[2]</code>。</p>

<h4 id="iv-指针减法-"><span style="color: rgb(32,178,170);"><strong>IV. 指针减法（<code class="language-plaintext highlighter-rouge">-</code>）</strong></span></h4>

<p>你也可以对指针进行减法运算。当指针 <code class="language-plaintext highlighter-rouge">p</code> 减去一个整数 <code class="language-plaintext highlighter-rouge">n</code> 时，指针会向后移动 <code class="language-plaintext highlighter-rouge">n</code> 个元素的大小。与加法运算类似，指针减法的偏移量同样取决于指针的数据类型。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">};</span>
    <span class="kt">int</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>  <span class="c1">// 指向数组的最后一个元素</span>
    <span class="c1">// 输出 ptr - 2 指向的元素（向后移动 2 个元素）</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"ptr - 2 指向的元素: "</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="p">(</span><span class="n">ptr</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">ptr - 2 指向的元素</span><span class="pi">:</span> <span class="m">30</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">ptr - 2</code> 会使指针向后移动 2 个 <code class="language-plaintext highlighter-rouge">int</code> 元素的位置，相当于将 <code class="language-plaintext highlighter-rouge">ptr</code> 指向 <code class="language-plaintext highlighter-rouge">arr[2]</code>。</p>

<h4 id="v-指针与指针之间的减法"><span style="color: rgb(32,178,170);">*V. 指针与指针之间的减法**</span></h4>

<p>你还可以对两个指针进行减法运算，计算它们之间的距离。减法结果是两个指针之间的元素个数。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">};</span>
    <span class="kt">int</span><span class="o">*</span> <span class="n">ptr1</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>  <span class="c1">// 指向数组的第二个元素</span>
    <span class="kt">int</span><span class="o">*</span> <span class="n">ptr2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>  <span class="c1">// 指向数组的第五个元素</span>
    <span class="c1">// 输出 ptr2 - ptr1 的结果，表示它们之间的元素个数</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"ptr2 - ptr1 之间的元素个数: "</span> <span class="o">&lt;&lt;</span> <span class="n">ptr2</span> <span class="o">-</span> <span class="n">ptr1</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">ptr2 - ptr1 之间的元素个数</span><span class="pi">:</span> <span class="m">3</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">ptr2 - ptr1</code> 计算的是两个指针之间的元素个数。由于 <code class="language-plaintext highlighter-rouge">ptr1</code> 和 <code class="language-plaintext highlighter-rouge">ptr2</code> 分别指向 <code class="language-plaintext highlighter-rouge">arr[1]</code> 和 <code class="language-plaintext highlighter-rouge">arr[4]</code>，它们之间有 3 个 <code class="language-plaintext highlighter-rouge">int</code> 元素。</p>

<h4 id="vi-指针比较"><span style="color: rgb(32,178,170);"><strong>VI. 指针比较</strong></span></h4>

<p>C++ 中还可以比较两个指针的相对位置。指针的比较包括相等性比较和关系比较：</p>

<ul>
  <li><strong>相等性比较</strong>：<code class="language-plaintext highlighter-rouge">==</code> 和 <code class="language-plaintext highlighter-rouge">!=</code></li>
  <li><strong>关系比较</strong>：<code class="language-plaintext highlighter-rouge">&lt;</code>, <code class="language-plaintext highlighter-rouge">&lt;=</code>, <code class="language-plaintext highlighter-rouge">&gt;</code>, <code class="language-plaintext highlighter-rouge">&gt;=</code></li>
</ul>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">};</span>
    <span class="kt">int</span><span class="o">*</span> <span class="n">ptr1</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>  <span class="c1">// 指向数组的第二个元素</span>
    <span class="kt">int</span><span class="o">*</span> <span class="n">ptr2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>  <span class="c1">// 指向数组的第四个元素</span>
    <span class="c1">// 相等性比较</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ptr1</span> <span class="o">==</span> <span class="n">ptr2</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"ptr1 和 ptr2 指向相同的位置"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"ptr1 和 ptr2 指向不同的位置"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// 关系比较</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ptr1</span> <span class="o">&lt;</span> <span class="n">ptr2</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"ptr1 指向的元素在 ptr2 指向的元素之前"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">ptr1 和 ptr2 指向不同的位置</span>
<span class="s">ptr1 指向的元素在 ptr2 指向的元素之前</span>
</code></pre></div></div>

<p>在这个例子中，我们比较了两个指针 <code class="language-plaintext highlighter-rouge">ptr1</code> 和 <code class="language-plaintext highlighter-rouge">ptr2</code>，检查它们是否指向同一位置，以及它们的相对位置。</p>

<h3 id="注意事项"><span style="color: rgb(32,178,170);"><strong>注意事项</strong></span></h3>
<ol>
  <li><strong>指针操作的有效性</strong>：指针算术运算需要确保指针仍指向有效的内存位置，尤其是在操作数组时，避免指针超出数组的有效范围。</li>
  <li><strong>指针类型与大小</strong>：指针算术运算是基于指针所指向的数据类型大小进行的。例如，<code class="language-plaintext highlighter-rouge">int*</code> 指针每次递增会增加 4 个字节（假设 <code class="language-plaintext highlighter-rouge">int</code> 是 4 字节）。</li>
  <li><strong>空指针比较</strong>：在进行指针比较之前，确保指针不是空指针（<code class="language-plaintext highlighter-rouge">nullptr</code>），否则可能会导致未定义行为。</li>
</ol>

<p>通过这些算术运算和比较，你可以更加灵活和高效地操作指针，尤其是在处理数组和动态内存时。</p>

<h3 id="3c-指针-vs-数组"><span style="color: rgb(0,191,255);"><strong>3.C++ 指针 vs 数组</strong></span></h3>

<p>指针和数组在 C++ 中密切相关，甚至可以说它们在很多情况下是可以互换的。数组名实际上是一个常量指针，指向数组的首元素。你可以通过指针的算术运算或数组索引来访问数组元素。尽管如此，指针和数组在使用上仍然有一些区别，需要理解它们之间的关系和限制。</p>

<h4 id="i-指针和数组的相似性"><span style="color: rgb(32,178,170);"><strong>I. 指针和数组的相似性</strong></span></h4>

<p>指针和数组在某些场景下非常相似，特别是在访问数组元素时。数组名本质上是一个指针常量，指向数组的第一个元素。因此，指针可以用来遍历数组。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">MAX</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">var</span><span class="p">[</span><span class="n">MAX</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">};</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
    <span class="c1">// 指针指向数组的第一个元素</span>
    <span class="n">ptr</span> <span class="o">=</span> <span class="n">var</span><span class="p">;</span>  
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"var["</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">"]的内存地址为 "</span> <span class="o">&lt;&lt;</span> <span class="n">ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"var["</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">"] 的值为 "</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="c1">// 使用指针递增来访问下一个数组元素</span>
        <span class="n">ptr</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">var[0]的内存地址为 0x7fff59707adc</span>
<span class="s">var[0] 的值为 </span><span class="m">10</span>
<span class="s">var[1]的内存地址为 0x7fff59707ae0</span>
<span class="s">var[1] 的值为 </span><span class="m">100</span>
<span class="s">var[2]的内存地址为 0x7fff59707ae4</span>
<span class="s">var[2] 的值为 </span><span class="m">200</span>
</code></pre></div></div>

<p>在这个示例中，<code class="language-plaintext highlighter-rouge">ptr</code> 是一个指针，它首先指向数组 <code class="language-plaintext highlighter-rouge">var</code> 的首元素。通过指针递增 <code class="language-plaintext highlighter-rouge">ptr++</code>，指针依次指向数组的下一个元素。你可以看到，数组和指针之间的关系非常密切，指针就像是数组名的别名，可以通过指针访问数组元素。</p>

<h4 id="ii数组名和指针常量"><span style="color: rgb(32,178,170);"><strong>II.数组名和指针常量</strong></span></h4>

<p>虽然数组名在表达式中表现得像一个指针，但它本质上是一个指向数组首元素的常量指针。这意味着你不能修改数组名本身（即使数组是静态分配的），只能通过修改数组元素的值来修改数组内容。</p>

<p><span style="color: rgb(238,130,238);"><strong>错误示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">MAX</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">var</span><span class="p">[</span><span class="n">MAX</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">};</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="o">*</span><span class="n">var</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>    <span class="c1">// 正确：修改 var[0] 的值</span>
        <span class="n">var</span><span class="o">++</span><span class="p">;</span>       <span class="c1">// 错误：试图修改数组名 var，它是一个常量指针</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在上面的代码中，<code class="language-plaintext highlighter-rouge">*var = i;</code> 是合法的，它会将 <code class="language-plaintext highlighter-rouge">var[0]</code> 的值设置为 <code class="language-plaintext highlighter-rouge">i</code>。但是，<code class="language-plaintext highlighter-rouge">var++</code> 是不合法的，因为 <code class="language-plaintext highlighter-rouge">var</code> 是一个指向数组首元素的常量指针，不能修改 <code class="language-plaintext highlighter-rouge">var</code> 的值。数组名本质上是一个常量指针，指向数组的第一个元素，因此你无法更改它的值。</p>

<h4 id="iii-使用指针语法访问数组元素"><span style="color: rgb(32,178,170);"><strong>III. 使用指针语法访问数组元素</strong></span></h4>

<p>虽然数组名本身不能作为左值（即不能直接修改数组名），但你可以使用指针语法来修改数组的元素。例如，下面的代码演示了如何通过指针运算来访问和修改数组元素。</p>

<p><span style="color: rgb(238,130,238);"><strong>有效示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">MAX</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">var</span><span class="p">[</span><span class="n">MAX</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">};</span>
    <span class="c1">// 使用指针运算修改 var[2] 的值</span>
    <span class="o">*</span><span class="p">(</span><span class="n">var</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
    <span class="c1">// 输出修改后的数组元素</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"var["</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">"] = "</span> <span class="o">&lt;&lt;</span> <span class="n">var</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">var[0] = </span><span class="m">10</span>
<span class="s">var[1] = </span><span class="m">100</span>
<span class="s">var[2] = </span><span class="m">500</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">*(var + 2) = 500;</code> 是合法的，因为 <code class="language-plaintext highlighter-rouge">var + 2</code> 计算的是数组中第 3 个元素的地址（即 <code class="language-plaintext highlighter-rouge">var[2]</code>）。通过指针语法，可以修改数组中的元素，而不需要直接修改数组名。</p>

<h4 id="iv-数组与指针的区别"><span style="color: rgb(32,178,170);"><strong>IV. 数组与指针的区别</strong></span></h4>

<p>尽管指针和数组在很多情况下可以互换，但它们仍然有一些本质的区别：</p>

<ol>
  <li>
    <p><strong>数组名是常量</strong>：数组名是指向数组首元素的常量指针，不能改变。例如，<code class="language-plaintext highlighter-rouge">var++</code> 是非法的，因为 <code class="language-plaintext highlighter-rouge">var</code> 是常量指针。</p>
  </li>
  <li>
    <p><strong>指针可以修改</strong>：指针本身是变量，可以改变其指向的内存位置。例如，你可以通过 <code class="language-plaintext highlighter-rouge">ptr++</code> 来改变指针指向数组中的下一个元素。</p>
  </li>
  <li>
    <p><strong>数组大小固定</strong>：数组在定义时大小固定，不可改变。例如，<code class="language-plaintext highlighter-rouge">int var[3]</code> 定义了一个大小为 3 的数组。</p>
  </li>
  <li>
    <p><strong>指针可以指向动态分配的内存</strong>：指针可以动态地指向通过 <code class="language-plaintext highlighter-rouge">new</code> 或 <code class="language-plaintext highlighter-rouge">malloc</code> 分配的内存区域，这使得它们比数组更灵活。</p>
  </li>
</ol>

<h3 id="总结-1"><span style="color: rgb(32,178,170);"><strong>总结</strong></span></h3>

<ul>
  <li>数组名和指针紧密相关，但数组名是常量指针，不能修改。</li>
  <li>可以通过指针语法来访问和修改数组元素，但不能修改数组名本身。</li>
  <li>指针比数组更加灵活，因为指针可以指向动态分配的内存，并且可以通过算术运算调整指向的内存位置。</li>
</ul>

<p>了解指针和数组之间的关系，以及它们各自的特性，有助于编写更高效、更灵活的 C++ 程序。</p>

<h3 id="4c-指针数组"><span style="color: rgb(0,191,255);"><strong>4.C++ 指针数组</strong></span></h3>

<p>在 C++ 中，指针数组是一个存储指针的数组。指针数组的每个元素都是一个指向某种数据类型的指针。与普通的数组不同，指针数组的元素不是直接存储数据，而是存储数据的地址。</p>

<p>让我们先通过一些简单的实例来理解指针数组的概念。</p>

<h4 id="i-普通数组的例子"><span style="color: rgb(32,178,170);"><strong>I. 普通数组的例子</strong></span></h4>

<p>首先，来看一个普通的整型数组的例子。我们有一个包含 3 个整型元素的数组 <code class="language-plaintext highlighter-rouge">var</code>：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">MAX</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">var</span><span class="p">[</span><span class="n">MAX</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">};</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Value of var["</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">"] = "</span> <span class="o">&lt;&lt;</span> <span class="n">var</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">Value of var[0] = </span><span class="m">10</span>
<span class="s">Value of var[1] = </span><span class="m">100</span>
<span class="s">Value of var[2] = </span><span class="m">200</span>
</code></pre></div></div>

<p>这个例子演示了如何声明一个数组，并使用数组的索引来访问每个元素。</p>

<h4 id="ii-指针数组的定义"><span style="color: rgb(32,178,170);"><strong>II. 指针数组的定义</strong></span></h4>

<p>接下来，假设我们希望创建一个数组，该数组的每个元素都是一个指向整数的指针。那么，我们就可以使用指针数组。下面是一个包含 3 个整型指针的数组 <code class="language-plaintext highlighter-rouge">ptr</code> 的例子：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">MAX</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">var</span><span class="p">[</span><span class="n">MAX</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">};</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">ptr</span><span class="p">[</span><span class="n">MAX</span><span class="p">];</span>  <span class="c1">// 定义一个指向整型的指针数组</span>
    <span class="c1">// 将 ptr 中的每个元素指向 var 数组中的元素</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">ptr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">var</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="c1">// 将指针指向 var[i] 的地址</span>
    <span class="p">}</span>
    <span class="c1">// 输出 ptr 数组指向的值</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Value of var["</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">"] = "</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">ptr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">Value of var[0] = </span><span class="m">10</span>
<span class="s">Value of var[1] = </span><span class="m">100</span>
<span class="s">Value of var[2] = </span><span class="m">200</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">ptr</code> 是一个指向整型的指针数组。我们将 <code class="language-plaintext highlighter-rouge">ptr[i]</code> 赋值为 <code class="language-plaintext highlighter-rouge">&amp;var[i]</code>，即将 <code class="language-plaintext highlighter-rouge">ptr[i]</code> 指向 <code class="language-plaintext highlighter-rouge">var[i]</code> 的地址。然后，通过解引用 <code class="language-plaintext highlighter-rouge">*ptr[i]</code> 来输出存储在 <code class="language-plaintext highlighter-rouge">var[i]</code> 中的值。</p>

<h4 id="iii-使用指针数组存储字符串"><span style="color: rgb(32,178,170);"><strong>III. 使用指针数组存储字符串</strong></span></h4>

<p>指针数组不仅可以存储整数的地址，还可以存储字符串的地址。比如，下面是一个指向字符的指针数组，它存储了多个字符串的地址：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">MAX</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">names</span><span class="p">[</span><span class="n">MAX</span><span class="p">]</span> <span class="o">=</span><span class="p">{</span>
        <span class="s">"Zara Ali"</span><span class="p">,</span>
        <span class="s">"Hina Ali"</span><span class="p">,</span>
        <span class="s">"Nuha Ali"</span><span class="p">,</span>
        <span class="s">"Sara Ali"</span>
    <span class="p">};</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Value of names["</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">"] = "</span> <span class="o">&lt;&lt;</span> <span class="n">names</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">Value of names[0] = Zara Ali</span>
<span class="s">Value of names[1] = Hina Ali</span>
<span class="s">Value of names[2] = Nuha Ali</span>
<span class="s">Value of names[3] = Sara Ali</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">names</code> 是一个指向常量字符的指针数组，每个元素指向一个字符串常量。通过遍历数组并输出每个指针所指向的字符串，我们可以显示出这些字符串的值。</p>

<h4 id="总结-2"><span style="color: rgb(32,178,170);"><strong>总结</strong></span></h4>

<p>指针数组允许你存储多个指向不同数据类型的指针，这样可以方便地访问和操作多个数据。指针数组的主要特点是：</p>

<ul>
  <li><strong>指针数组的每个元素都是一个指针</strong>：这些指针可以指向相同或不同的数据类型。</li>
  <li><strong>指针数组和普通数组的区别</strong>：普通数组存储数据的值，而指针数组存储数据的地址。</li>
  <li><strong>用途</strong>：指针数组可以用来存储一组动态数据、字符串列表，甚至可以存储指向结构体或其他复杂类型的指针。</li>
</ul>

<p>通过指针数组，我们可以灵活地操作一组指向不同数据的指针，使得 C++ 中的内存操作更加高效和灵活。</p>

<h3 id="5c-指向指针的指针多级间接寻址"><span style="color: rgb(0,191,255);"><strong>5.C++ 指向指针的指针（多级间接寻址）</strong></span></h3>

<p>在 C++ 中，<strong>指向指针的指针</strong>（也叫做多级间接寻址）是指一个指针变量存储另一个指针的地址，进而可以通过该指针访问实际存储的数据。这种方式的指针链可以更深层次地访问内存内容。</p>

<h4 id="i-定义指向指针的指针"><span style="color: rgb(32,178,170);"><strong>I. 定义指向指针的指针</strong></span></h4>

<p>指向指针的指针是通过在指针声明中使用两个星号 <code class="language-plaintext highlighter-rouge">**</code> 来实现的。例如，<code class="language-plaintext highlighter-rouge">int **ptr</code> 声明了一个指向整型指针的指针。</p>

<h3 id="ii-指向指针的指针的操作"><span style="color: rgb(32,178,170);"><strong>II. 指向指针的指针的操作</strong></span></h3>

<p>假设我们有一个变量 <code class="language-plaintext highlighter-rouge">var</code>，它存储了某个值。然后，我们有一个指向 <code class="language-plaintext highlighter-rouge">var</code> 的指针 <code class="language-plaintext highlighter-rouge">ptr</code>，接着，再声明一个指向 <code class="language-plaintext highlighter-rouge">ptr</code> 的指针 <code class="language-plaintext highlighter-rouge">pptr</code>。这就是一个指向指针的指针的例子。</p>

<p>在这个层次结构中：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">pptr</code> 是指向 <code class="language-plaintext highlighter-rouge">ptr</code> 的指针。</li>
  <li><code class="language-plaintext highlighter-rouge">ptr</code> 是指向 <code class="language-plaintext highlighter-rouge">var</code> 的指针。</li>
  <li><code class="language-plaintext highlighter-rouge">var</code> 存储了实际的数据。</li>
</ul>

<p>访问 <code class="language-plaintext highlighter-rouge">var</code> 需要通过两次解引用操作：第一次通过 <code class="language-plaintext highlighter-rouge">*ptr</code> 来获取 <code class="language-plaintext highlighter-rouge">var</code> 的地址，第二次通过 <code class="language-plaintext highlighter-rouge">**pptr</code> 来访问 <code class="language-plaintext highlighter-rouge">var</code> 的值。</p>

<h3 id="iii-实例指向指针的指针"><span style="color: rgb(32,178,170);"><strong>III. 实例：指向指针的指针</strong></span></h3>

<p>下面是一个简单的例子，展示了指向指针的指针的用法：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">var</span><span class="p">;</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
    <span class="kt">int</span> <span class="o">**</span><span class="n">pptr</span><span class="p">;</span>
    <span class="n">var</span> <span class="o">=</span> <span class="mi">3000</span><span class="p">;</span>
    <span class="c1">// 获取 var 的地址</span>
    <span class="n">ptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">var</span><span class="p">;</span>
    <span class="c1">// 获取 ptr 的地址</span>
    <span class="n">pptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ptr</span><span class="p">;</span>
    <span class="c1">// 输出值</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"var 值为 : "</span> <span class="o">&lt;&lt;</span> <span class="n">var</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"*ptr 值为: "</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"**pptr 值为: "</span> <span class="o">&lt;&lt;</span> <span class="o">**</span><span class="n">pptr</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">var 值为 </span><span class="pi">:</span> <span class="m">3000</span>
<span class="nv">*ptr</span> <span class="na">值为</span><span class="pi">:</span> <span class="m">3000</span>
<span class="na">**pptr 值为</span><span class="pi">:</span> <span class="m">3000</span>
</code></pre></div></div>

<h3 id="解释"><span style="color: rgb(238,130,238);"><strong>解释：</strong></span></h3>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">var</code></strong> 存储了值 <code class="language-plaintext highlighter-rouge">3000</code>。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">ptr</code></strong> 是一个指针，它存储了 <code class="language-plaintext highlighter-rouge">var</code> 的地址，即 <code class="language-plaintext highlighter-rouge">ptr = &amp;var</code>。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">pptr</code></strong> 是一个指针，它存储了 <code class="language-plaintext highlighter-rouge">ptr</code> 的地址，即 <code class="language-plaintext highlighter-rouge">pptr = &amp;ptr</code>。</li>
</ol>

<p>在输出时：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">var</code> 存储的是 <code class="language-plaintext highlighter-rouge">3000</code>，直接输出 <code class="language-plaintext highlighter-rouge">var</code> 就得到了 <code class="language-plaintext highlighter-rouge">3000</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">*ptr</code> 解引用 <code class="language-plaintext highlighter-rouge">ptr</code>，得到 <code class="language-plaintext highlighter-rouge">var</code> 的值，即 <code class="language-plaintext highlighter-rouge">3000</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">**pptr</code> 解引用 <code class="language-plaintext highlighter-rouge">pptr</code> 两次：第一次通过 <code class="language-plaintext highlighter-rouge">*pptr</code> 得到 <code class="language-plaintext highlighter-rouge">ptr</code>，第二次通过 <code class="language-plaintext highlighter-rouge">*ptr</code> 获取 <code class="language-plaintext highlighter-rouge">var</code> 的值 <code class="language-plaintext highlighter-rouge">3000</code>。</li>
</ul>

<h3 id="总结-3"><span style="color: rgb(32,178,170);"><strong>总结</strong></span></h3>

<p>指向指针的指针的主要特点是通过多级间接寻址，可以实现更加复杂的内存访问。这种机制通常用于需要操作指针本身的情况，例如在函数中修改指针的值或处理二维数组时非常有用。通过多级指针，我们能够间接地访问更深层次的内存数据，提供了更大的灵活性和控制。</p>

<h3 id="6c-传递指针给函数"><span style="color: rgb(0,191,255);"><strong>6.C++ 传递指针给函数</strong></span></h3>

<p>在 C++ 中，您可以将指针传递给函数。这种方式允许函数直接操作传递给它的变量或数组，特别是当需要修改传入的值时非常有用。与传值调用相比，传递指针可以节省内存和时间，特别是在处理大型数据结构时。</p>

<h4 id="i-传递指针给函数"><span style="color: rgb(32,178,170);"><strong>I. 传递指针给函数</strong></span></h4>

<p>要传递指针给函数，只需将函数参数声明为指针类型。在函数内部，您可以通过解引用（<code class="language-plaintext highlighter-rouge">*</code>）指针来访问或修改指向的值。</p>

<h3 id="ii-示例-1传递指针给函数"><span style="color: rgb(32,178,170);"><strong>II. 示例 1：传递指针给函数</strong></span></h3>

<p>在下面的例子中，我们传递一个 <code class="language-plaintext highlighter-rouge">unsigned long</code> 型的指针给函数，并在函数内修改这个值。函数 <code class="language-plaintext highlighter-rouge">getSeconds</code> 会通过指针修改传入的 <code class="language-plaintext highlighter-rouge">sec</code> 变量，记录当前的时间戳。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;ctime&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="c1">// 函数声明</span>
<span class="kt">void</span> <span class="nf">getSeconds</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">*</span><span class="n">par</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">sec</span><span class="p">;</span>
    <span class="c1">// 传递 sec 的地址（即指针）</span>
    <span class="n">getSeconds</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sec</span><span class="p">);</span>
    <span class="c1">// 输出实际值</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Number of seconds: "</span> <span class="o">&lt;&lt;</span> <span class="n">sec</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// 函数定义</span>
<span class="kt">void</span> <span class="nf">getSeconds</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">*</span><span class="n">par</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// 使用 *par 来修改传入的变量</span>
    <span class="o">*</span><span class="n">par</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Number of seconds</span><span class="pi">:</span> <span class="m">1294450468</span>
</code></pre></div></div>

<p>在这个示例中：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">getSeconds</code> 函数接受一个 <code class="language-plaintext highlighter-rouge">unsigned long*</code> 类型的参数，并通过 <code class="language-plaintext highlighter-rouge">*par</code> 访问和修改实际的 <code class="language-plaintext highlighter-rouge">sec</code> 变量。</li>
  <li>在 <code class="language-plaintext highlighter-rouge">main</code> 函数中，我们通过 <code class="language-plaintext highlighter-rouge">&amp;sec</code> 将 <code class="language-plaintext highlighter-rouge">sec</code> 变量的地址传递给 <code class="language-plaintext highlighter-rouge">getSeconds</code>，从而使得该函数能够修改 <code class="language-plaintext highlighter-rouge">sec</code> 的值。</li>
</ul>

<h3 id="iii-示例-2传递指针给数组"><span style="color: rgb(32,178,170);"><strong>III. 示例 2：传递指针给数组</strong></span></h3>

<p>C++ 中，数组的名称本质上就是指向数组第一个元素的指针。因此，您也可以传递一个数组给函数，函数会收到该数组的地址。通过数组指针，函数可以访问和操作数组的元素。</p>

<p>下面的例子展示了如何将数组传递给函数，并计算数组的平均值：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="c1">// 函数声明</span>
<span class="kt">double</span> <span class="nf">getAverage</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">arr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// 定义一个包含 5 个元素的数组</span>
    <span class="kt">int</span> <span class="n">balance</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">50</span><span class="p">};</span>
    <span class="kt">double</span> <span class="n">avg</span><span class="p">;</span>
    <span class="c1">// 传递指向数组的指针</span>
    <span class="n">avg</span> <span class="o">=</span> <span class="n">getAverage</span><span class="p">(</span><span class="n">balance</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="c1">// 输出返回的平均值</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Average value is: "</span> <span class="o">&lt;&lt;</span> <span class="n">avg</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// 函数定义</span>
<span class="kt">double</span> <span class="nf">getAverage</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">arr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="c1">// 遍历数组，计算和</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="c1">// 计算并返回平均值</span>
    <span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">sum</span><span class="p">)</span> <span class="o">/</span> <span class="n">size</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Average value is</span><span class="pi">:</span> <span class="m">214.4</span>
</code></pre></div></div>

<p>在这个示例中：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">getAverage</code> 函数接受一个指向整数数组的指针和数组的大小 <code class="language-plaintext highlighter-rouge">size</code>，并通过该指针访问数组元素，计算数组的和。</li>
  <li>数组名 <code class="language-plaintext highlighter-rouge">balance</code> 自动转换为指向其第一个元素的指针，因此可以直接传递给函数。</li>
  <li>使用 <code class="language-plaintext highlighter-rouge">arr[i]</code> 访问数组元素，通过指针进行间接访问。</li>
</ul>

<h3 id="总结-4"><span style="color: rgb(32,178,170);"><strong>总结</strong></span></h3>

<ul>
  <li><strong>指针传递</strong>可以让函数修改传入的值，因为函数接收到的是指针，允许它直接访问内存中的数据。</li>
  <li><strong>数组作为指针</strong>：C++ 中，数组名本质上是指向数组首元素的指针，因此，传递数组时实际上就是传递一个指向数组首元素的指针。</li>
  <li><strong>优点</strong>：传递指针比传递整个数组或结构体更高效，特别是当数组或结构体很大时。</li>
</ul>

<p>这种方式不仅有助于函数修改外部变量，还能显著提高效率。</p>

<h3 id="7-从函数返回指针"><span style="color: rgb(0,191,255);"><strong>7.+ 从函数返回指针</strong></span></h3>

<p>C++ 允许从函数返回指针，但需要注意一些细节。最关键的是，返回局部变量的指针是不安全的，因为局部变量在函数返回后会被销毁。不过，如果返回的指针指向的是静态变量或动态分配的内存，则是安全的。</p>

<h3 id="从函数返回指针的基本语法"><span style="color: rgb(32,178,170);"><strong>从函数返回指针的基本语法</strong></span></h3>

<p>为了从函数返回一个指针，您需要声明函数的返回类型为指针类型。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">*</span> <span class="nf">myFunction</span><span class="p">();</span>
</code></pre></div></div>

<p>这表示 <code class="language-plaintext highlighter-rouge">myFunction</code> 是一个返回 <code class="language-plaintext highlighter-rouge">int*</code>（即指向整数的指针）的函数。</p>

<h3 id="注意事项-1"><span style="color: rgb(32,178,170);"><strong>注意事项</strong></span></h3>

<p>C++ 不允许直接返回指向局部变量的指针，因为局部变量在函数结束时会被销毁，返回的指针就变成了悬空指针。这种情况下，使用 <code class="language-plaintext highlighter-rouge">static</code> 关键字定义局部变量可以解决这个问题。使用 <code class="language-plaintext highlighter-rouge">static</code> 关键字声明的变量在函数退出后不会被销毁，它会一直存在直到程序结束。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例：从函数返回指针</strong></span></p>

<p>下面是一个从函数返回指向数组的指针的示例。此函数生成 10 个随机数，并返回一个指向这些随机数的数组的指针。我们使用 <code class="language-plaintext highlighter-rouge">static</code> 关键字来确保返回的指针指向的数组在函数结束后仍然有效。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;ctime&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="c1">// 生成和返回随机数的函数</span>
<span class="kt">int</span><span class="o">*</span> <span class="nf">getRandom</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">r</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>  <span class="c1">// 静态数组</span>
    <span class="c1">// 设置随机种子</span>
    <span class="n">srand</span><span class="p">((</span><span class="kt">unsigned</span><span class="p">)</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
    <span class="c1">// 生成 10 个随机数</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">r</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">r</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>  <span class="c1">// 返回指向数组的指针</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// 指向整数的指针</span>
    <span class="kt">int</span><span class="o">*</span> <span class="n">p</span><span class="p">;</span>
    <span class="c1">// 调用函数并获取返回的指针</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">getRandom</span><span class="p">();</span>
    <span class="c1">// 通过指针访问数组元素</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"*(p + "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">") : "</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="p">(</span><span class="n">p</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="代码解析"><span style="color: rgb(32,178,170);"><strong>代码解析</strong></span></h3>

<ul>
  <li>
    <p><strong>静态数组</strong>：在 <code class="language-plaintext highlighter-rouge">getRandom</code> 函数中，我们声明了一个静态数组 <code class="language-plaintext highlighter-rouge">r[10]</code>。因为它是静态的，它会在函数调用结束后仍然存在，不会被销毁。</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">srand</code> 和 <code class="language-plaintext highlighter-rouge">rand</code></strong>：我们使用 <code class="language-plaintext highlighter-rouge">srand</code> 函数设置随机数生成的种子，<code class="language-plaintext highlighter-rouge">rand</code> 函数生成一个随机数并存储到数组 <code class="language-plaintext highlighter-rouge">r</code> 中。</p>
  </li>
  <li>
    <p><strong>返回指针</strong>：函数返回一个指向数组的指针 <code class="language-plaintext highlighter-rouge">r</code>，在 <code class="language-plaintext highlighter-rouge">main</code> 函数中，我们接收这个指针，并通过指针访问数组的元素。</p>
  </li>
</ul>

<p><span style="color: rgb(238,130,238);"><strong>运行结果</strong></span></p>

<p>当代码被编译并执行时，程序会生成并输出 10 个随机数，并通过指针遍历并显示这些随机数：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>624723190
1468735695
807113585
976495677
613357504
1377296355
1530315259
1778906708
1820354158
667126415
*(p + 0) : 624723190
*(p + 1) : 1468735695
*(p + 2) : 807113585
*(p + 3) : 976495677
*(p + 4) : 613357504
*(p + 5) : 1377296355
*(p + 6) : 1530315259
*(p + 7) : 1778906708
*(p + 8) : 1820354158
*(p + 9) : 667126415
</code></pre></div></div>

<h3 id="总结-5"><span style="color: rgb(32,178,170);"><strong>总结</strong></span></h3>

<ul>
  <li><strong>静态局部变量</strong>：如果要从函数返回指向数组或变量的指针，必须确保该变量在函数退出后依然存在。可以使用 <code class="language-plaintext highlighter-rouge">static</code> 关键字来声明静态局部变量，这样它们的生命周期会持续到程序结束。</li>
  <li><strong>返回动态内存</strong>：另一种常见的做法是动态分配内存（使用 <code class="language-plaintext highlighter-rouge">new</code> 或 <code class="language-plaintext highlighter-rouge">malloc</code>），并返回指向动态分配内存的指针。</li>
  <li><strong>避免返回局部变量的指针</strong>：不要返回指向局部非静态变量的指针，因为这些变量会在函数返回后被销毁，导致悬空指针问题。</li>
</ul>

<p>这种方式在需要从函数中返回多个值或者处理动态生成的数据时非常有用。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[指针教程]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">基本的输入输出</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/07/Input&Output/" rel="alternate" type="text/html" title="基本的输入输出" /><published>2025-01-07T00:00:00+08:00</published><updated>2025-01-07T00:00:00+08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/07/Input&amp;Output</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/07/Input&amp;Output/"><![CDATA[<h1 id="基本的输入输出"><span style="color: rgb(255,127,80);"><strong>基本的输入输出</strong></span></h1>

<p>C++ 标准库提供了强大的输入/输出（I/O）功能，本章将介绍 C++ 中最基本和最常用的 I/O 操作。</p>

<p>在 C++ 中，所有的 I/O 操作都依赖于流（stream）。流可以看作是一系列字节的传输路径。根据字节流的方向，I/O 操作分为两种类型：</p>

<ul>
  <li><strong>输入操作</strong>：从外部设备（如键盘、磁盘、网络等）读取数据到程序中。</li>
  <li><strong>输出操作</strong>：将程序中的数据输出到外部设备（如显示屏、打印机、磁盘、网络等）。</li>
</ul>

<h3 id="io-库头文件"><span style="color: rgb(0,191,255);"><strong>I/O 库头文件</strong></span></h3>

<p>在 C++ 中，几个头文件提供了不同的 I/O 功能：</p>

<table>
  <thead>
    <tr>
      <th>头文件</th>
      <th>功能说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;iostream&gt;</code></td>
      <td>定义了 <code class="language-plaintext highlighter-rouge">cin</code>、<code class="language-plaintext highlighter-rouge">cout</code>、<code class="language-plaintext highlighter-rouge">cerr</code> 和 <code class="language-plaintext highlighter-rouge">clog</code> 对象，分别用于标准输入流、标准输出流、非缓冲标准错误流和缓冲标准错误流。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;iomanip&gt;</code></td>
      <td>提供流操纵器，如 <code class="language-plaintext highlighter-rouge">setw</code> 和 <code class="language-plaintext highlighter-rouge">setprecision</code>，用于控制输出格式。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;fstream&gt;</code></td>
      <td>提供文件输入输出流，用于处理文件 I/O 操作。</td>
    </tr>
  </tbody>
</table>

<h3 id="标准输出流cout"><span style="color: rgb(0,191,255);"><strong>标准输出流（<code class="language-plaintext highlighter-rouge">cout</code>）</strong></span></h3>

<p><code class="language-plaintext highlighter-rouge">cout</code> 是一个预定义的对象，它是 <code class="language-plaintext highlighter-rouge">iostream</code> 类的一个实例。<code class="language-plaintext highlighter-rouge">cout</code> 与标准输出设备（通常是显示屏）连接。<code class="language-plaintext highlighter-rouge">cout</code> 与流插入运算符 <code class="language-plaintext highlighter-rouge">&lt;&lt;</code> 配合使用，进行数据的输出。</p>

<h4 id="示例-1-输出字符串"><span style="color: rgb(32,178,170);"><strong>示例 1: 输出字符串</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">str</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"Hello C++"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Value of str is : "</span> <span class="o">&lt;&lt;</span> <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Value of str is </span><span class="pi">:</span> <span class="s">Hello C++</span>
</code></pre></div></div>

<p>在上面的代码中，<code class="language-plaintext highlighter-rouge">&lt;&lt;</code> 运算符用来将 <code class="language-plaintext highlighter-rouge">str</code> 输出到标准输出设备。<code class="language-plaintext highlighter-rouge">endl</code> 会在输出后添加一个换行符，并刷新输出缓冲区。</p>

<h4 id="示例-2-多次使用--运算符"><span style="color: rgb(32,178,170);"><strong>示例 2: 多次使用 <code class="language-plaintext highlighter-rouge">&lt;&lt;</code> 运算符</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Integer: "</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="s">", Float: "</span> <span class="o">&lt;&lt;</span> <span class="n">y</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Integer</span><span class="pi">:</span> <span class="s">10, Float</span><span class="err">:</span> <span class="m">3.14</span>
</code></pre></div></div>

<h3 id="标准输入流cin">标准输入流（<code class="language-plaintext highlighter-rouge">cin</code>）</h3>

<p><code class="language-plaintext highlighter-rouge">cin</code> 是另一个预定义对象，它同样是 <code class="language-plaintext highlighter-rouge">iostream</code> 类的实例。<code class="language-plaintext highlighter-rouge">cin</code> 与标准输入设备（通常是键盘）连接。<code class="language-plaintext highlighter-rouge">cin</code> 与流提取运算符 <code class="language-plaintext highlighter-rouge">&gt;&gt;</code> 配合使用，进行数据的输入。</p>

<h4 id="示例-3-输入字符串">示例 3: 输入字符串</h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">50</span><span class="p">];</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"请输入您的名称："</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">name</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"您的名称是： "</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>输出：</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>请输入您的名称： cplusplus
您的名称是： cplusplus
</code></pre></div></div>

<p>在此代码中，程序等待用户输入一个字符串。当用户输入完后按下回车键，输入的字符串会通过 <code class="language-plaintext highlighter-rouge">cin</code> 存储在 <code class="language-plaintext highlighter-rouge">name</code> 数组中，并输出到标准输出。</p>

<h4 id="示例-4-输入多个数据">示例 4: 输入多个数据</h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">50</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"请输入您的名称和年龄："</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">name</span> <span class="o">&gt;&gt;</span> <span class="n">age</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"您的名称是： "</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="s">", 年龄是： "</span> <span class="o">&lt;&lt;</span> <span class="n">age</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>输出：</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>请输入您的名称和年龄： Alice 20
您的名称是： Alice, 年龄是： 20
</code></pre></div></div>

<h3 id="标准错误流cerr">标准错误流（<code class="language-plaintext highlighter-rouge">cerr</code>）</h3>

<p><code class="language-plaintext highlighter-rouge">cerr</code> 是一个预定义的对象，它也是 <code class="language-plaintext highlighter-rouge">iostream</code> 类的实例。<code class="language-plaintext highlighter-rouge">cerr</code> 与标准输出设备（通常是显示屏）连接，但是它是<strong>非缓冲的</strong>，意味着每次输出都会立即显示。</p>

<h4 id="示例-5-输出错误信息">示例 5: 输出错误信息</h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">str</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"Unable to read file"</span><span class="p">;</span>
    <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Error message: "</span> <span class="o">&lt;&lt;</span> <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>输出：</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error message: Unable to read file
</code></pre></div></div>

<h3 id="标准日志流clog">标准日志流（<code class="language-plaintext highlighter-rouge">clog</code>）</h3>

<p><code class="language-plaintext highlighter-rouge">clog</code> 也是 <code class="language-plaintext highlighter-rouge">iostream</code> 类的实例。与 <code class="language-plaintext highlighter-rouge">cerr</code> 类似，它输出到标准输出设备，但与 <code class="language-plaintext highlighter-rouge">cerr</code> 不同的是，<code class="language-plaintext highlighter-rouge">clog</code> 是<strong>缓冲的</strong>，即输出内容会先存入缓冲区，直到缓冲区满或手动刷新才会显示。</p>

<h4 id="示例-6-输出日志信息">示例 6: 输出日志信息</h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">str</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"Processing started..."</span><span class="p">;</span>
    <span class="n">clog</span> <span class="o">&lt;&lt;</span> <span class="s">"Log message: "</span> <span class="o">&lt;&lt;</span> <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>输出：</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Log message: Processing started...
</code></pre></div></div>

<h3 id="coutcerr-和-clog-的区别"><code class="language-plaintext highlighter-rouge">cout</code>、<code class="language-plaintext highlighter-rouge">cerr</code> 和 <code class="language-plaintext highlighter-rouge">clog</code> 的区别</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">cout</code> 用于常规的输出操作，输出到标准屏幕。</li>
  <li><code class="language-plaintext highlighter-rouge">cerr</code> 用于错误信息的输出，并且是非缓冲的，每次输出都立即显示。</li>
  <li><code class="language-plaintext highlighter-rouge">clog</code> 用于日志信息的输出，并且是缓冲的，输出会先存储在缓冲区，直到缓冲区填满或者手动刷新时才显示。</li>
</ul>

<h3 id="小结">小结</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">cout</code> 用于正常输出，通常用于显示程序的结果。</li>
  <li><code class="language-plaintext highlighter-rouge">cerr</code> 用于输出错误信息，适合显示程序出错时的信息。</li>
  <li><code class="language-plaintext highlighter-rouge">clog</code> 用于输出日志信息，可以缓冲输出，适合记录程序执行过程中的一些事件。</li>
</ul>

<p>通过合理使用这些流，我们可以更清晰地组织和管理程序的输入输出操作，尤其是在大型程序中，区分正常输出、错误信息和日志信息是非常重要的。</p>

<hr />

<p>这个版本增加了详细的示例，解释了每个流的用途，并且通过多个代码实例帮助用户更好地理解各个流的不同特性。如果你有任何进一步的问题或需要更多的例子，可以告诉我！</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[基本的输入输出]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">常量</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/06/Constant/" rel="alternate" type="text/html" title="常量" /><published>2025-01-06T00:00:00+08:00</published><updated>2025-01-06T00:00:00+08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/06/Constant</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/06/Constant/"><![CDATA[<h1 id="常量"><span style="color: rgb(255,127,80);"><strong>常量</strong></span></h1>

<p>常量是指在程序执行期间固定不变的值。常量也称为字面量，其值在定义后不能修改。常量可以是任何基本数据类型，如整数、浮点数、字符、字符串和布尔值。常量与变量类似，只是其值在定义后不可改变。</p>

<p>在定义常量时，建议使用大写字母形式。这是一种良好的编程习惯，便于与普通变量区分开来。</p>

<hr />

<h3 id="1整数常量"><span style="color: rgb(0,191,255);"><strong>1.整数常量</strong></span></h3>

<p>整数常量有多种表示方式，可以是十进制、八进制或十六进制。基数通过前缀指定：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">0x</code> 或 <code class="language-plaintext highlighter-rouge">0X</code> 表示十六进制。</li>
  <li><code class="language-plaintext highlighter-rouge">0</code> 表示八进制。</li>
  <li>不带前缀表示十进制。</li>
</ul>

<p>整数常量还可以带有后缀，指定其类型：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">u</code> 或 <code class="language-plaintext highlighter-rouge">U</code> 表示无符号整数（unsigned）。</li>
  <li><code class="language-plaintext highlighter-rouge">l</code> 或 <code class="language-plaintext highlighter-rouge">L</code> 表示长整数（long）。</li>
</ul>

<p>后缀的顺序和大小写不敏感。</p>

<h4 id="合法示例"><span style="color: rgb(238,130,238);"><strong>合法示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">212</span>        <span class="c1">// 十进制</span>
<span class="mi">215u</span>       <span class="c1">// 无符号整数</span>
<span class="mh">0xFeeL</span>     <span class="c1">// 十六进制，长整数</span>
</code></pre></div></div>

<h4 id="非法示例"><span style="color: rgb(238,130,238);"><strong>非法示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mo">07</span><span class="mi">8</span>        <span class="c1">// 非法：8 不是八进制的数字</span>
<span class="mo">032UU</span>      <span class="c1">// 非法：不能重复后缀</span>
</code></pre></div></div>

<h4 id="各种类型的整数常量示例"><span style="color: rgb(238,130,238);"><strong>各种类型的整数常量示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">85</span>          <span class="c1">// 十进制</span>
<span class="mo">0213</span>        <span class="c1">// 八进制</span>
<span class="mh">0x4b</span>        <span class="c1">// 十六进制</span>
<span class="mi">30</span>          <span class="c1">// 整数</span>
<span class="mi">30u</span>         <span class="c1">// 无符号整数</span>
<span class="mi">30l</span>         <span class="c1">// 长整数</span>
<span class="mi">30ul</span>        <span class="c1">// 无符号长整数</span>
</code></pre></div></div>

<h3 id="2浮点常量"><span style="color: rgb(0,191,255);"><strong>2.浮点常量</strong></span></h3>

<p>浮点常量由整数部分、小数点、小数部分和指数部分组成。可以使用小数形式或指数形式表示。</p>

<ul>
  <li>小数形式：必须包含整数部分、小数部分或两者。</li>
  <li>指数形式：必须包含小数点和指数部分，或同时包含两者，指数使用 <code class="language-plaintext highlighter-rouge">e</code> 或 <code class="language-plaintext highlighter-rouge">E</code> 引入。</li>
</ul>

<h4 id="合法示例-1"><span style="color: rgb(238,130,238);"><strong>合法示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">3.14159</span>       <span class="c1">// 小数形式</span>
<span class="mf">314159E-5L</span>     <span class="c1">// 指数形式，长浮点数</span>
</code></pre></div></div>

<h4 id="非法示例-1"><span style="color: rgb(238,130,238);"><strong>非法示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">510</span><span class="n">E</span>          <span class="c1">// 非法：不完整的指数</span>
<span class="mi">210</span><span class="n">f</span>          <span class="c1">// 非法：缺少小数或指数</span>
<span class="p">.</span><span class="n">e55</span>          <span class="c1">// 非法：缺少整数或分数</span>
</code></pre></div></div>

<h3 id="3布尔常量"><span style="color: rgb(0,191,255);"><strong>3.布尔常量</strong></span></h3>

<p>布尔常量有两个值，分别是 <code class="language-plaintext highlighter-rouge">true</code> 和 <code class="language-plaintext highlighter-rouge">false</code>，它们表示真和假。在 C++ 中，不应将 <code class="language-plaintext highlighter-rouge">true</code> 视为 1，<code class="language-plaintext highlighter-rouge">false</code> 视为 0。</p>

<h3 id="4字符常量"><span style="color: rgb(0,191,255);"><strong>4.字符常量</strong></span></h3>

<p>字符常量用单引号 <code class="language-plaintext highlighter-rouge">'</code> 括起来。如果常量前有 <code class="language-plaintext highlighter-rouge">L</code>（仅当大写时），则表示宽字符常量（例如 <code class="language-plaintext highlighter-rouge">L'x'</code>）。否则，它是窄字符常量（例如 <code class="language-plaintext highlighter-rouge">'x'</code>）。</p>

<p>字符常量可以是普通字符、转义序列或通用字符。常见的转义序列如下：</p>

<table>
  <thead>
    <tr>
      <th>转义序列</th>
      <th>含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\\</code></td>
      <td>反斜杠字符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\'</code></td>
      <td>单引号字符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\"</code></td>
      <td>双引号字符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\?</code></td>
      <td>问号字符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\a</code></td>
      <td>警报铃声</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\b</code></td>
      <td>退格键</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\f</code></td>
      <td>换页符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\n</code></td>
      <td>换行符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\r</code></td>
      <td>回车</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\t</code></td>
      <td>水平制表符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\v</code></td>
      <td>垂直制表符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\ooo</code></td>
      <td>八进制数</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\xhh...</code></td>
      <td>十六进制数</td>
    </tr>
  </tbody>
</table>

<h4 id="示例"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello</span><span class="se">\t</span><span class="s">World</span><span class="se">\n\n</span><span class="s">"</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">Hello   World</span>
</code></pre></div></div>

<h3 id="5字符串常量"><span style="color: rgb(0,191,255);"><strong>5.字符串常量</strong></span></h3>

<p>字符串字面量由双引号 <code class="language-plaintext highlighter-rouge">""</code> 括起来，包含普通字符、转义序列和通用字符。可以使用 <code class="language-plaintext highlighter-rouge">\</code> 将长字符串拆分为多行。</p>

<h4 id="示例-1"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">greeting</span> <span class="o">=</span> <span class="s">"hello, runoob"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">greeting</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>  <span class="c1">// 换行符</span>
    <span class="n">string</span> <span class="n">greeting2</span> <span class="o">=</span> <span class="s">"hello, \
                        runoob"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">greeting2</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出-1"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">hello, runoob</span>
<span class="s">hello, runoob</span>
</code></pre></div></div>

<hr />

<h3 id="定义常量"><span style="color: rgb(32,178,170);"><strong>定义常量</strong></span></h3>

<p>在 C++ 中，有两种常见的定义常量的方式：</p>

<ol>
  <li><strong>使用 <code class="language-plaintext highlighter-rouge">#define</code> 预处理器</strong></li>
  <li><strong>使用 <code class="language-plaintext highlighter-rouge">const</code> 关键字</strong></li>
</ol>

<h4 id="1使用-define-预处理器"><span style="color: rgb(0,191,255);"><strong>1.使用 <code class="language-plaintext highlighter-rouge">#define</code> 预处理器：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define identifier value
</span></code></pre></div></div>

<h4 id="示例-2"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="cp">#define LENGTH 10
#define WIDTH 5
#define NEWLINE '\n'
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">area</span> <span class="o">=</span> <span class="n">LENGTH</span> <span class="o">*</span> <span class="n">WIDTH</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">area</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">NEWLINE</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出-2"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">50</span>
</code></pre></div></div>

<h4 id="2使用-const-关键字"><span style="color: rgb(0,191,255);"><strong>2.使用 <code class="language-plaintext highlighter-rouge">const</code> 关键字：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">type</span> <span class="n">variable</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="示例-3"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">LENGTH</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">WIDTH</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="n">NEWLINE</span> <span class="o">=</span> <span class="sc">'\n'</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">area</span> <span class="o">=</span> <span class="n">LENGTH</span> <span class="o">*</span> <span class="n">WIDTH</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">area</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">NEWLINE</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出-3"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">50</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[常量]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-10.png" /><media:content medium="image" url="http://localhost:4000/code-cover-10.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">数字类型</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Number-Type/" rel="alternate" type="text/html" title="数字类型" /><published>2025-01-05T00:00:00+08:00</published><updated>2025-01-05T00:00:00+08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Number%20Type</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Number-Type/"><![CDATA[<h1 id="数字类型"><span style="color: rgb(255,127,80);"><strong>数字类型</strong></span></h1>

<p>在 C++ 中，我们可以使用多种数据类型来表示数字。常见的数字类型包括 <code class="language-plaintext highlighter-rouge">int</code>、<code class="language-plaintext highlighter-rouge">short</code>、<code class="language-plaintext highlighter-rouge">long</code>、<code class="language-plaintext highlighter-rouge">float</code> 和 <code class="language-plaintext highlighter-rouge">double</code>。这些数据类型在存储数字时具有不同的精度和范围，具体信息可以参考 C++ 数据类型一章。</p>

<h3 id="数字的定义"><span style="color: rgb(0,191,255);"><strong>数字的定义</strong></span></h3>

<p>在 C++ 中，我们可以定义不同类型的数字变量，并赋予它们数值。以下是一个例子，展示了如何定义和初始化多种数字类型：</p>

<h4 id="示例-1数字定义和输出"><span style="color: rgb(32,178,170);"><strong>示例 1：数字定义和输出</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// 定义不同类型的数字</span>
    <span class="kt">short</span> <span class="n">s</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="kt">long</span> <span class="n">l</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">f</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">d</span><span class="p">;</span>
    <span class="c1">// 给数字赋值</span>
    <span class="n">s</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>      <span class="c1">// short 类型</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>    <span class="c1">// int 类型</span>
    <span class="n">l</span> <span class="o">=</span> <span class="mi">1000000</span><span class="p">;</span> <span class="c1">// long 类型</span>
    <span class="n">f</span> <span class="o">=</span> <span class="mf">230.47</span><span class="p">;</span>  <span class="c1">// float 类型</span>
    <span class="n">d</span> <span class="o">=</span> <span class="mf">30949.374</span><span class="p">;</span> <span class="c1">// double 类型</span>
    <span class="c1">// 输出数字值</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"short  s: "</span> <span class="o">&lt;&lt;</span> <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"int    i: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"long   l: "</span> <span class="o">&lt;&lt;</span> <span class="n">l</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"float  f: "</span> <span class="o">&lt;&lt;</span> <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"double d: "</span> <span class="o">&lt;&lt;</span> <span class="n">d</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="输出"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">short  s</span><span class="pi">:</span> <span class="m">10</span>
<span class="na">int    i</span><span class="pi">:</span> <span class="m">1000</span>
<span class="na">long   l</span><span class="pi">:</span> <span class="m">1000000</span>
<span class="na">float  f</span><span class="pi">:</span> <span class="m">230.47</span>
<span class="na">double d</span><span class="pi">:</span> <span class="m">30949.4</span>
</code></pre></div></div>

<p>解释：这段代码展示了如何定义不同类型的数字，并将它们输出。注意 <code class="language-plaintext highlighter-rouge">float</code> 和 <code class="language-plaintext highlighter-rouge">double</code> 类型的数字会有一定的精度损失，输出时显示为近似值。</p>

<hr />

<h3 id="c-数学运算"><span style="color: rgb(0,191,255);"><strong>C++ 数学运算</strong></span></h3>

<p>C++ 提供了许多内置的数学函数，可以帮助我们对数字进行计算。为了使用这些函数，我们需要包含 <code class="language-plaintext highlighter-rouge">cmath</code> 头文件。</p>

<h4 id="常用数学函数"><span style="color: rgb(32,178,170);"><strong>常用数学函数</strong></span></h4>

<table>
  <thead>
    <tr>
      <th>函数</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">cos(double)</code></td>
      <td>返回弧度角的余弦值</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sin(double)</code></td>
      <td>返回弧度角的正弦值</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">tan(double)</code></td>
      <td>返回弧度角的正切值</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">log(double)</code></td>
      <td>返回参数的自然对数</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">pow(x, y)</code></td>
      <td>返回 <code class="language-plaintext highlighter-rouge">x</code> 的 <code class="language-plaintext highlighter-rouge">y</code> 次方</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">hypot(x, y)</code></td>
      <td>返回直角三角形斜边的长度（平方和的平方根）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sqrt(double)</code></td>
      <td>返回参数的平方根</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">abs(int)</code></td>
      <td>返回整数的绝对值</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">fabs(double)</code></td>
      <td>返回浮点数的绝对值</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">floor(double)</code></td>
      <td>返回小于或等于参数的最大整数</td>
    </tr>
  </tbody>
</table>

<h4 id="示例-2数学运算"><span style="color: rgb(0,191,255);"><strong>示例 2：数学运算</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cmath&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// 定义不同类型的数字</span>
    <span class="kt">short</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1000</span><span class="p">;</span>
    <span class="kt">long</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">100000</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">230.47</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="mf">200.374</span><span class="p">;</span>
    <span class="c1">// 使用数学函数进行运算</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"sin(d): "</span> <span class="o">&lt;&lt;</span> <span class="n">sin</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>        <span class="c1">// 正弦函数</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"abs(i): "</span> <span class="o">&lt;&lt;</span> <span class="n">abs</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>        <span class="c1">// 整数的绝对值</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"floor(d): "</span> <span class="o">&lt;&lt;</span> <span class="n">floor</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>    <span class="c1">// 向下取整</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"sqrt(f): "</span> <span class="o">&lt;&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>      <span class="c1">// 平方根</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"pow(d, 2): "</span> <span class="o">&lt;&lt;</span> <span class="n">pow</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// d 的平方</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出-1"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">sin(d)</span><span class="pi">:</span> <span class="s">-0.634939</span>
<span class="na">abs(i)</span><span class="pi">:</span> <span class="m">1000</span>
<span class="na">floor(d)</span><span class="pi">:</span> <span class="m">200</span>
<span class="na">sqrt(f)</span><span class="pi">:</span> <span class="m">15.1812</span>
<span class="s">pow(d, 2)</span><span class="err">:</span> <span class="m">40149.7</span>
</code></pre></div></div>

<p>解释：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sin(d)</code> 计算了变量 <code class="language-plaintext highlighter-rouge">d</code>（200.374）的正弦值。</li>
  <li><code class="language-plaintext highlighter-rouge">abs(i)</code> 返回了变量 <code class="language-plaintext highlighter-rouge">i</code> 的绝对值。</li>
  <li><code class="language-plaintext highlighter-rouge">floor(d)</code> 返回了 <code class="language-plaintext highlighter-rouge">d</code> 的向下取整结果。</li>
  <li><code class="language-plaintext highlighter-rouge">sqrt(f)</code> 计算了变量 <code class="language-plaintext highlighter-rouge">f</code>（230.47）的平方根。</li>
  <li><code class="language-plaintext highlighter-rouge">pow(d, 2)</code> 计算了变量 <code class="language-plaintext highlighter-rouge">d</code> 的平方。</li>
</ul>

<hr />

<h3 id="c-随机数"><span style="color: rgb(0,191,255);"><strong>C++ 随机数</strong></span></h3>

<p>有时，我们需要在程序中生成随机数。C++ 提供了 <code class="language-plaintext highlighter-rouge">rand()</code> 函数来生成伪随机数，但需要先调用 <code class="language-plaintext highlighter-rouge">srand()</code> 来设置种子。通常，我们使用 <code class="language-plaintext highlighter-rouge">time()</code> 函数来获取系统当前时间作为种子。</p>

<h4 id="示例-3生成随机数"><span style="color: rgb(32,178,170);"><strong>示例 3：生成随机数</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;ctime&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    <span class="c1">// 设置随机数种子</span>
    <span class="n">srand</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)));</span>
    <span class="c1">// 生成并输出 10 个随机数</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">j</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"随机数: "</span> <span class="o">&lt;&lt;</span> <span class="n">j</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="输出示例"><span style="color: rgb(238,130,238);"><strong>输出（示例）：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">随机数</span><span class="pi">:</span> <span class="m">1748144778</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">630873888</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">2134540646</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">219404170</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">902129458</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">920445370</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">1319072661</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">257938873</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">1256201101</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">580322989</span>
</code></pre></div></div>

<p>解释：每次运行时，输出的随机数会有所不同。<code class="language-plaintext highlighter-rouge">srand()</code> 用当前时间作为种子，确保每次生成的随机数序列不同。</p>

<hr />

<h3 id="c-数学常数"><span style="color: rgb(0,191,255);"><strong>C++ 数学常数</strong></span></h3>

<p>从 C++20 开始，标准库中提供了几个常见的数学常数，如 π、e 和黄金比例等。它们定义在 <code class="language-plaintext highlighter-rouge">std::numbers</code> 命名空间下。</p>

<h4 id="示例-4数学常数"><span style="color: rgb(32,178,170);"><strong>示例 4：数学常数</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cmath&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;numbers&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// 输出数学常数</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">numbers</span><span class="o">::</span><span class="n">pi</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"e: "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">numbers</span><span class="o">::</span><span class="n">e</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"phi: "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">numbers</span><span class="o">::</span><span class="n">phi</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="输出-2"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pi</span><span class="pi">:</span> <span class="m">3.14159</span>
<span class="na">e</span><span class="pi">:</span> <span class="m">2.71828</span>
<span class="na">phi</span><span class="pi">:</span> <span class="m">1.61803</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[数字类型]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">运算符</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Operator/" rel="alternate" type="text/html" title="运算符" /><published>2025-01-05T00:00:00+08:00</published><updated>2025-01-05T00:00:00+08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Operator</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Operator/"><![CDATA[<h1 id="运算符"><span style="color: rgb(255,127,80);"><strong>运算符</strong></span></h1>

<p>运算符是告诉编译器执行特定数学或逻辑操作的符号。C++ 提供了以下类型的运算符：</p>

<ul>
  <li>算术运算符</li>
  <li>关系运算符</li>
  <li>逻辑运算符</li>
  <li>位运算符</li>
  <li>赋值运算符</li>
  <li>杂项运算符</li>
</ul>

<h3 id="算术运算符"><span style="color: rgb(32,178,170);"><strong>算术运算符</strong></span></h3>

<p>以下为 C++ 支持的算术运算符（假设 <code class="language-plaintext highlighter-rouge">A = 10</code>，<code class="language-plaintext highlighter-rouge">B = 20</code>）：</p>

<table>
  <thead>
    <tr>
      <th>运算符</th>
      <th>描述</th>
      <th>示例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">+</code></td>
      <td>把两个操作数相加</td>
      <td><code class="language-plaintext highlighter-rouge">A + B = 30</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-</code></td>
      <td>从第一个操作数中减去第二个操作数</td>
      <td><code class="language-plaintext highlighter-rouge">A - B = -10</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">*</code></td>
      <td>把两个操作数相乘</td>
      <td><code class="language-plaintext highlighter-rouge">A * B = 200</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">/</code></td>
      <td>分子除以分母</td>
      <td><code class="language-plaintext highlighter-rouge">B / A = 2</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%</code></td>
      <td>取模运算符，整除后的余数</td>
      <td><code class="language-plaintext highlighter-rouge">B % A = 0</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">++</code></td>
      <td>自增运算符，整数值增加 1</td>
      <td><code class="language-plaintext highlighter-rouge">A++ = 11</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">--</code></td>
      <td>自减运算符，整数值减少 1</td>
      <td><code class="language-plaintext highlighter-rouge">A-- = 9</code></td>
    </tr>
  </tbody>
</table>

<h4 id="示例代码"><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">21</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">/</span> <span class="n">b</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">d</span><span class="o">++</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">d</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> 
    <span class="n">c</span> <span class="o">=</span> <span class="n">d</span><span class="o">--</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出结果"><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">c = </span><span class="m">31</span>
<span class="s">c = </span><span class="m">11</span>
<span class="s">c = </span><span class="m">210</span>
<span class="s">c = </span><span class="m">2</span>
<span class="s">c = </span><span class="m">1</span>
<span class="s">c = </span><span class="m">10</span>
<span class="s">c = </span><span class="m">10</span>
</code></pre></div></div>

<h3 id="关系运算符"><span style="color: rgb(32,178,170);"><strong>关系运算符</strong></span></h3>

<p>以下为 C++ 支持的关系运算符（假设 <code class="language-plaintext highlighter-rouge">A = 10</code>，<code class="language-plaintext highlighter-rouge">B = 20</code>）：</p>

<table>
  <thead>
    <tr>
      <th>运算符</th>
      <th>描述</th>
      <th>示例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">==</code></td>
      <td>检查两个操作数是否相等，如果相等条件为真</td>
      <td><code class="language-plaintext highlighter-rouge">(A == B)</code> 假</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">!=</code></td>
      <td>检查两个操作数是否不相等，如果不相等条件为真</td>
      <td><code class="language-plaintext highlighter-rouge">(A != B)</code> 真</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&gt;</code></td>
      <td>检查左操作数是否大于右操作数，如果是条件为真</td>
      <td><code class="language-plaintext highlighter-rouge">(A &gt; B)</code> 假</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;</code></td>
      <td>检查左操作数是否小于右操作数，如果是条件为真</td>
      <td><code class="language-plaintext highlighter-rouge">(A &lt; B)</code> 真</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&gt;=</code></td>
      <td>检查左操作数是否大于或等于右操作数，如果是条件为真</td>
      <td><code class="language-plaintext highlighter-rouge">(A &gt;= B)</code> 假</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;=</code></td>
      <td>检查左操作数是否小于或等于右操作数，如果是条件为真</td>
      <td><code class="language-plaintext highlighter-rouge">(A &lt;= B)</code> 真</td>
    </tr>
  </tbody>
</table>

<h4 id="示例代码-1"><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">)</span> 
    	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a == b"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">else</span> 
    	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a != b"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">)</span> 
    	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a &lt; b"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">else</span> 
    	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a &gt;= b"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出结果-1"><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">a != b</span>
<span class="s">a &gt;= b</span>
</code></pre></div></div>

<h3 id="逻辑运算符"><span style="color: rgb(32,178,170);"><strong>逻辑运算符</strong></span></h3>

<p>以下为 C++ 支持的逻辑运算符（假设 <code class="language-plaintext highlighter-rouge">A = 1</code>，<code class="language-plaintext highlighter-rouge">B = 0</code>）：</p>

<table>
  <tbody>
    <tr>
      <td> </td>
      <td>称为逻辑或运算符。如果两个操作数中有任意一个 true，则条件为 true。	(A</td>
      <td> </td>
      <td>B) 为 true。</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>运算符</th>
      <th>描述</th>
      <th>示例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&amp;&amp;</code></td>
      <td>称为逻辑与运算符。如果两个操作数都为 <code class="language-plaintext highlighter-rouge">true</code>，则条件为 <code class="language-plaintext highlighter-rouge">true</code>。</td>
      <td><code class="language-plaintext highlighter-rouge">(A &amp;&amp; B)</code> 为 <code class="language-plaintext highlighter-rouge">false</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">||</code></td>
      <td>称为逻辑或运算符。如果两个操作数中有任意一个 true，则条件为 true。</td>
      <td><code class="language-plaintext highlighter-rouge">(A||B)</code> 为　<code class="language-plaintext highlighter-rouge">true</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">!</code></td>
      <td>称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为 <code class="language-plaintext highlighter-rouge">true</code>，则逻辑非运算符将使其为 <code class="language-plaintext highlighter-rouge">false</code>。</td>
      <td><code class="language-plaintext highlighter-rouge">!(A &amp;&amp; B)</code> 为 <code class="language-plaintext highlighter-rouge">true</code></td>
    </tr>
  </tbody>
</table>

<h4 id="示例代码-2"><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">&amp;&amp;</span> <span class="n">b</span><span class="p">)</span> 
      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"条件为真"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">||</span> <span class="n">b</span><span class="p">)</span> 
      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"条件为真"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">a</span> <span class="o">&amp;&amp;</span> <span class="n">b</span><span class="p">))</span> 
      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"条件为真"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出结果-2"><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">条件为真</span>
<span class="s">条件为真</span>
<span class="s">条件为真</span>
</code></pre></div></div>

<h3 id="位运算符"><span style="color: rgb(32,178,170);"><strong>位运算符</strong></span></h3>

<p>位运算符作用于位，并逐位执行操作。以下为 C++ 支持的位运算符（假设 <code class="language-plaintext highlighter-rouge">A = 60</code>，<code class="language-plaintext highlighter-rouge">B = 13</code>）：</p>

<table>
  <thead>
    <tr>
      <th>运算符</th>
      <th>描述</th>
      <th>示例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&amp;</code></td>
      <td>按位与操作，对应位都为 <code class="language-plaintext highlighter-rouge">1</code> 时结果为 <code class="language-plaintext highlighter-rouge">1</code>，否则为 <code class="language-plaintext highlighter-rouge">0</code></td>
      <td><code class="language-plaintext highlighter-rouge">A &amp; B = 12</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">|</code></td>
      <td>按位或操作，对应位只要有一个为 <code class="language-plaintext highlighter-rouge">1</code>，结果即为 <code class="language-plaintext highlighter-rouge">1</code></td>
      <td><code class="language-plaintext highlighter-rouge">A | B = 61</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">^</code></td>
      <td>按位异或操作，对应位相同为 <code class="language-plaintext highlighter-rouge">0</code>，不同为 <code class="language-plaintext highlighter-rouge">1</code></td>
      <td><code class="language-plaintext highlighter-rouge">A ^ B = 49</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">~</code></td>
      <td>按位取反操作，将每个位取反，即 <code class="language-plaintext highlighter-rouge">0</code> 变为 <code class="language-plaintext highlighter-rouge">1</code>，<code class="language-plaintext highlighter-rouge">1</code> 变为 <code class="language-plaintext highlighter-rouge">0</code></td>
      <td><code class="language-plaintext highlighter-rouge">~A = -61</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;&lt;</code></td>
      <td>左移操作符，将操作数的位左移指定的次数，右边用 <code class="language-plaintext highlighter-rouge">0</code> 填补</td>
      <td><code class="language-plaintext highlighter-rouge">A &lt;&lt; 2 = 240</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&gt;&gt;</code></td>
      <td>右移操作符，将操作数的位右移指定的次数，左边根据数值符号填补 <code class="language-plaintext highlighter-rouge">0</code> 或 <code class="language-plaintext highlighter-rouge">1</code></td>
      <td><code class="language-plaintext highlighter-rouge">A &gt;&gt; 2 = 15</code></td>
    </tr>
  </tbody>
</table>

<h4 id="示例代码-3"><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span>  <span class="c1">// 60 = 0011 1100  </span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>  <span class="c1">// 13 = 0000 1101</span>
    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span><span class="p">;</span>  <span class="c1">// 按位与</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a &amp; b = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">|</span> <span class="n">b</span><span class="p">;</span>  <span class="c1">// 按位或</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a | b = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="p">;</span>  <span class="c1">// 按位异或</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a ^ b = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="o">~</span><span class="n">a</span><span class="p">;</span>     <span class="c1">// 按位取反</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"~a = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 左移</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a &lt;&lt; 2 = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 右移</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a &gt;&gt; 2 = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出结果-3"><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">a &amp; b = </span><span class="m">12</span>
<span class="s">a | b = </span><span class="m">61</span>
<span class="s">a ^ b = </span><span class="m">49</span>
<span class="s">~a = -61</span>
<span class="s">a &lt;&lt; 2 = </span><span class="m">240</span>
<span class="s">a &gt;&gt; 2 = </span><span class="m">15</span>
</code></pre></div></div>

<h3 id="赋值运算符"><span style="color: rgb(32,178,170);"><strong>赋值运算符</strong></span></h3>

<p>赋值运算符用于将值赋给变量。以下为 C++ 支持的赋值运算符：</p>

<table>
  <thead>
    <tr>
      <th>运算符</th>
      <th>描述</th>
      <th>示例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">=</code></td>
      <td>简单赋值，将右操作数赋值给左操作数</td>
      <td><code class="language-plaintext highlighter-rouge">C = A + B</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">+=</code></td>
      <td>加且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C + A</code></td>
      <td><code class="language-plaintext highlighter-rouge">C += A</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-=</code></td>
      <td>减且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C - A</code></td>
      <td><code class="language-plaintext highlighter-rouge">C -= A</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">*=</code></td>
      <td>乘且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C * A</code></td>
      <td><code class="language-plaintext highlighter-rouge">C *= A</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">/=</code></td>
      <td>除且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C / A</code></td>
      <td><code class="language-plaintext highlighter-rouge">C /= A</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%=</code></td>
      <td>求模且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C % A</code></td>
      <td><code class="language-plaintext highlighter-rouge">C %= A</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;&lt;=</code></td>
      <td>左移且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C &lt;&lt; 2</code></td>
      <td><code class="language-plaintext highlighter-rouge">C &lt;&lt;= 2</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&gt;&gt;=</code></td>
      <td>右移且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C &gt;&gt; 2</code></td>
      <td><code class="language-plaintext highlighter-rouge">C &gt;&gt;= 2</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&amp;=</code></td>
      <td>按位与且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C &amp; 2</code></td>
      <td><code class="language-plaintext highlighter-rouge">C &amp;= 2</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">^=</code></td>
      <td>按位异或且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C ^ 2</code></td>
      <td><code class="language-plaintext highlighter-rouge">C ^= 2</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">|=</code></td>
      <td>按位或且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C | 2</code></td>
      <td><code class="language-plaintext highlighter-rouge">C |= 2</code></td>
    </tr>
  </tbody>
</table>

<h4 id="示例代码-4"><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">21</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">+=</span> <span class="n">a</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c += a -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">-=</span> <span class="n">a</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c -= a -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">*=</span> <span class="n">a</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c *= a -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">/=</span> <span class="n">a</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c /= a -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">%=</span> <span class="n">a</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c %= a -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">&lt;&lt;=</span> <span class="mi">2</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c &lt;&lt;= 2 -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">&gt;&gt;=</span> <span class="mi">2</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c &gt;&gt;= 2 -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">&amp;=</span> <span class="mi">2</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c &amp;= 2 -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">^=</span> <span class="mi">2</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c ^= 2 -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">|=</span> <span class="mi">2</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c |= 2 -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="输出结果-4"><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">c = </span><span class="m">21</span>
<span class="s">c += a -&gt; c = </span><span class="m">42</span>
<span class="s">c -= a -&gt; c = </span><span class="m">21</span>
<span class="s">c *= a -&gt; c = </span><span class="m">441</span>
<span class="s">c /= a -&gt; c = </span><span class="m">21</span>
<span class="s">c %= a -&gt; c = </span><span class="m">11</span>
<span class="s">c &lt;&lt;= 2 -&gt; c = </span><span class="m">44</span>
<span class="s">c &gt;&gt;= 2 -&gt; c = </span><span class="m">11</span>
<span class="s">c &amp;= 2 -&gt; c = </span><span class="m">2</span>
<span class="s">c ^= 2 -&gt; c = </span><span class="m">0</span>
<span class="s">c |= 2 -&gt; c = </span><span class="m">2</span>
</code></pre></div></div>

<h3 id="杂项运算符"><span style="color: rgb(32,178,170);"><strong>杂项运算符</strong></span></h3>

<p>以下为 C++ 支持的杂项运算符：</p>

<table>
  <thead>
    <tr>
      <th>运算符</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sizeof</code></td>
      <td>返回变量的大小，例如 <code class="language-plaintext highlighter-rouge">sizeof(a)</code> 返回变量 <code class="language-plaintext highlighter-rouge">a</code> 的字节数。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">?:</code></td>
      <td>条件运算符，<code class="language-plaintext highlighter-rouge">Condition ? X : Y</code> 如果条件为真返回 <code class="language-plaintext highlighter-rouge">X</code>，否则返回 <code class="language-plaintext highlighter-rouge">Y</code>。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">,</code></td>
      <td>逗号运算符，顺序执行多个操作，返回最后一个表达式的值。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">.</code> 和 <code class="language-plaintext highlighter-rouge">-&gt;</code></td>
      <td>成员运算符，用于访问类、结构或联合的成员。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">(type)</code></td>
      <td>强制类型转换运算符，将一种数据类型转换为另一种数据类型，例如 <code class="language-plaintext highlighter-rouge">(int)3.14</code>。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&amp;</code></td>
      <td>返回变量地址，例如 <code class="language-plaintext highlighter-rouge">&amp;a</code> 返回变量 <code class="language-plaintext highlighter-rouge">a</code> 的地址。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">*</code></td>
      <td>指针运算符，解引用指针，例如 <code class="language-plaintext highlighter-rouge">*p</code> 返回指针 <code class="language-plaintext highlighter-rouge">p</code> 指向的值。</td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="运算符优先级"><span style="color: rgb(0,191,255);"><strong>运算符优先级</strong></span></h3>

<p>运算符的优先级决定了表达式的计算顺序。以下为运算符的优先级表：</p>

<p>| 类别   | 运算符                                          | 结合性   |
| —— | ———————————————– | ——– |
| 后缀   | <code class="language-plaintext highlighter-rouge">()</code> <code class="language-plaintext highlighter-rouge">[]</code> <code class="language-plaintext highlighter-rouge">-&gt;</code> <code class="language-plaintext highlighter-rouge">.</code> <code class="language-plaintext highlighter-rouge">++</code> <code class="language-plaintext highlighter-rouge">--</code>                    | 从左到右 |
| 一元   | <code class="language-plaintext highlighter-rouge">+</code> <code class="language-plaintext highlighter-rouge">-</code> <code class="language-plaintext highlighter-rouge">!</code> <code class="language-plaintext highlighter-rouge">~</code> <code class="language-plaintext highlighter-rouge">++</code> <code class="language-plaintext highlighter-rouge">--</code> <code class="language-plaintext highlighter-rouge">(type)</code> <code class="language-plaintext highlighter-rouge">&amp;</code> <code class="language-plaintext highlighter-rouge">sizeof</code> | 从右到左 |
| 乘除   | <code class="language-plaintext highlighter-rouge">*</code> <code class="language-plaintext highlighter-rouge">/</code> <code class="language-plaintext highlighter-rouge">%</code>                                     | 从左到右 |
| 加减   | <code class="language-plaintext highlighter-rouge">+</code> <code class="language-plaintext highlighter-rouge">-</code>                                         | 从左到右 |
|  移位  | <code class="language-plaintext highlighter-rouge">&lt;&lt;</code> ` »<code class="language-plaintext highlighter-rouge">                                      | 从左到右 | 
| 关系   | </code>&lt;<code class="language-plaintext highlighter-rouge"> </code>&lt;=<code class="language-plaintext highlighter-rouge"> </code>&gt;<code class="language-plaintext highlighter-rouge"> </code>&gt;=<code class="language-plaintext highlighter-rouge">                               | 从左到右 |
| 相等   | </code>==<code class="language-plaintext highlighter-rouge"> </code>!=<code class="language-plaintext highlighter-rouge">                                       | 从左到右 |
| 位与 AND | 	</code>&amp;<code class="language-plaintext highlighter-rouge">                                          | 从左到右 |
|位异或 XOR| 	</code>^<code class="language-plaintext highlighter-rouge"> 	       																| 从左到右 |
|位或 OR |	</code>|<code class="language-plaintext highlighter-rouge"> 	                                         | 从左到右 | 
| 逻辑与 | </code>&amp;&amp;<code class="language-plaintext highlighter-rouge">                                            | 从左到右 |
| 逻辑或 | </code>||<code class="language-plaintext highlighter-rouge">                                            | 从左到右 |
| 条件   | </code>?:<code class="language-plaintext highlighter-rouge">                                            | 从右到左 |
| 赋值   | </code>=<code class="language-plaintext highlighter-rouge"> </code>+=<code class="language-plaintext highlighter-rouge"> </code>-=<code class="language-plaintext highlighter-rouge"> </code>*=<code class="language-plaintext highlighter-rouge"> </code>/=<code class="language-plaintext highlighter-rouge"> </code>%=<code class="language-plaintext highlighter-rouge"> </code>»=<code class="language-plaintext highlighter-rouge"> </code>«=<code class="language-plaintext highlighter-rouge"> </code>&amp;=<code class="language-plaintext highlighter-rouge"> </code>^=<code class="language-plaintext highlighter-rouge"> </code>|=<code class="language-plaintext highlighter-rouge">  | 从右到左 |
| 逗号   | </code>,`                                             | 从左到右 |</p>

<h4 id="示例代码-5"><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">15</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">e</span><span class="p">;</span>
    <span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">*</span> <span class="n">c</span> <span class="o">/</span> <span class="n">d</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Result: "</span> <span class="o">&lt;&lt;</span> <span class="n">e</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>
<h4 id="输出结果-5"><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Result</span><span class="pi">:</span> <span class="m">90</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[运算符]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">变量的作用域</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Scope-of-variables/" rel="alternate" type="text/html" title="变量的作用域" /><published>2025-01-05T00:00:00+08:00</published><updated>2025-01-05T00:00:00+08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Scope%20of%20variables</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Scope-of-variables/"><![CDATA[<h1 id="变量的作用域"><span style="color: rgb(255,127,80);"><strong>变量的作用域</strong></span></h1>
<p>在 C++ 中，变量的作用域指的是变量可以被访问的范围。通常来说，变量的作用域可以分为以下几种类型：</p>

<ul>
  <li><strong>局部作用域</strong>：变量仅在函数或代码块内部可访问。</li>
  <li><strong>全局作用域</strong>：变量在整个程序中都可访问。</li>
  <li><strong>块作用域</strong>：变量仅在某个特定代码块（如 if 语句、循环等）内可访问。</li>
  <li><strong>类作用域</strong>：变量仅在类内部可访问。</li>
</ul>

<hr />

<h4 id="1-变量声明位置"><span style="color: rgb(0,191,255);"><strong>1. 变量声明位置</strong></span></h4>

<p>变量可以在不同的地方声明，具体包括：</p>

<ul>
  <li><strong>局部变量</strong>：在函数或代码块内部声明的变量。</li>
  <li><strong>形式参数</strong>：在函数参数列表中声明的变量。</li>
  <li><strong>全局变量</strong>：在所有函数外部声明的变量。</li>
</ul>

<h4 id="2-作用域详细介绍"><span style="color: rgb(0,191,255);"><strong>2. 作用域详细介绍</strong></span></h4>

<h5 id="21-局部作用域"><span style="color: rgb(32,178,170);"><strong>2.1 局部作用域</strong></span></h5>

<p>局部变量是在函数或代码块内部声明的，它们只在当前函数或代码块中有效。当函数被调用时，局部变量会被创建，函数执行结束后，它们会被销毁。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="c1">// 局部变量声明</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>

    <span class="c1">// 实际初始化</span>
    <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">c</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个例子中，变量 <code class="language-plaintext highlighter-rouge">a</code>、<code class="language-plaintext highlighter-rouge">b</code> 和 <code class="language-plaintext highlighter-rouge">c</code> 是局部变量，只能在 <code class="language-plaintext highlighter-rouge">main</code> 函数内部访问。</p>

<h5 id="22-全局作用域"><span style="color: rgb(32,178,170);"><strong>2.2 全局作用域</strong></span></h5>

<p>全局变量是在所有函数外部定义的变量，它们在整个程序中都有效，并且可以被任何函数访问。全局变量的生命周期从程序开始到程序结束。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="c1">// 全局变量声明</span>
<span class="kt">int</span> <span class="n">g</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="c1">// 局部变量声明</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>

    <span class="c1">// 实际初始化</span>
    <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
    <span class="n">g</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">g</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">g</code> 是一个全局变量，可以在整个程序中访问。</p>

<h5 id="23-局部变量与全局变量同名"><span style="color: rgb(32,178,170);"><strong>2.3 局部变量与全局变量同名</strong></span></h5>

<p>如果局部变量和全局变量同名，局部变量会覆盖全局变量。也就是说，函数内部会优先使用局部变量。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="c1">// 全局变量声明</span>
<span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="c1">// 局部变量声明</span>
    <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">g</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出结果为：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">10</span>
</code></pre></div></div>

<p>这是因为在 <code class="language-plaintext highlighter-rouge">main</code> 函数中声明的局部变量 <code class="language-plaintext highlighter-rouge">g</code> 覆盖了全局变量 <code class="language-plaintext highlighter-rouge">g</code>。</p>

<h5 id="24-初始化局部变量和全局变量"><span style="color: rgb(32,178,170);"><strong>2.4 初始化局部变量和全局变量</strong></span></h5>

<ul>
  <li><strong>局部变量</strong>：在定义时，系统不会自动为其初始化，必须显式地初始化。</li>
  <li><strong>全局变量</strong>：系统会自动初始化为默认值。不同数据类型的默认值如下：</li>
</ul>

<table>
  <thead>
    <tr>
      <th>数据类型</th>
      <th>初始化默认值</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">int</code></td>
      <td><code class="language-plaintext highlighter-rouge">0</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">char</code></td>
      <td><code class="language-plaintext highlighter-rouge">'\0'</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">float</code></td>
      <td><code class="language-plaintext highlighter-rouge">0</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">double</code></td>
      <td><code class="language-plaintext highlighter-rouge">0</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">pointer</code></td>
      <td><code class="language-plaintext highlighter-rouge">NULL</code></td>
    </tr>
  </tbody>
</table>

<h5 id="25-块作用域"><span style="color: rgb(32,178,170);"><strong>2.5 块作用域</strong></span></h5>

<p>块作用域是指在代码块（如条件语句、循环语句等）内部声明的变量。它们仅在该代码块内部有效。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>  <span class="c1">// 块作用域变量</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"块变量: "</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"外部变量: "</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出结果为：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">块变量</span><span class="pi">:</span> <span class="m">20</span>
<span class="na">外部变量</span><span class="pi">:</span> <span class="m">10</span>
</code></pre></div></div>

<p>在这个例子中，内部代码块中声明了一个与外部同名的变量 <code class="language-plaintext highlighter-rouge">a</code>，并且它覆盖了外部作用域中的变量。在代码块内部访问 <code class="language-plaintext highlighter-rouge">a</code> 时，输出的是 <code class="language-plaintext highlighter-rouge">20</code>，而在外部访问时，输出的是 <code class="language-plaintext highlighter-rouge">10</code>。</p>

<h5 id="26-类作用域"><span style="color: rgb(32,178,170);"><strong>2.6 类作用域</strong></span></h5>

<p>类作用域是指在类内部声明的变量。类的成员变量（或类的静态变量）可以在类的所有成员函数中访问。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">class_var</span><span class="p">;</span>  <span class="c1">// 类作用域变量</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="n">MyClass</span><span class="o">::</span><span class="n">class_var</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"类变量: "</span> <span class="o">&lt;&lt;</span> <span class="n">MyClass</span><span class="o">::</span><span class="n">class_var</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出结果为：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">类变量</span><span class="pi">:</span> <span class="m">30</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">MyClass</code> 类中声明了一个静态成员变量 <code class="language-plaintext highlighter-rouge">class_var</code>，它属于类作用域，可以通过类名访问。</p>

<h4 id="总结"><span style="color: rgb(0,191,255);"><strong>总结</strong></span></h4>

<ul>
  <li>
    <p><span style="color: rgb(238,130,238);"><strong>局部作用域</strong>：在函数或代码块内有效。</span></p>
  </li>
  <li>
    <p><span style="color: rgb(238,130,238);"><strong>全局作用域</strong>：在程序的任何地方有效。</span></p>
  </li>
  <li>
    <p><span style="color: rgb(238,130,238);"><strong>块作用域</strong>：在代码块内部有效。</span></p>
  </li>
  <li>
    <p><span style="color: rgb(238,130,238);"><strong>类作用域</strong>：在类内部有效。</span></p>
  </li>
</ul>

<p>理解这些作用域有助于更好地管理变量的生命周期和访问权限。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[变量的作用域 在 C++ 中，变量的作用域指的是变量可以被访问的范围。通常来说，变量的作用域可以分为以下几种类型：]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-6.png" /><media:content medium="image" url="http://localhost:4000/code-cover-6.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">存储类</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Storage-Class/" rel="alternate" type="text/html" title="存储类" /><published>2025-01-05T00:00:00+08:00</published><updated>2025-01-05T00:00:00+08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Storage%20Class</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Storage-Class/"><![CDATA[<h1 id="存储类"><span style="color: rgb(255,127,80);"><strong>存储类</strong></span></h1>

<p>C++ 存储类定义了变量和函数的<strong>作用域</strong>（可见性）和<strong>生命周期</strong>。这些存储类说明符位于变量或函数类型之前。以下是 C++ 中常用的存储类：</p>

<h2 id="1-auto-存储类">1. <code class="language-plaintext highlighter-rouge">auto</code> 存储类</h2>

<ul>
  <li>
    <p><strong>定义</strong>：<code class="language-plaintext highlighter-rouge">auto</code> 是默认存储类，通常可以省略不写。</p>
  </li>
  <li>
    <p><strong>特点</strong>：<code class="language-plaintext highlighter-rouge">auto</code> 指定的变量具有自动存储期，即变量的生命周期仅限于定义它的块（block）。<code class="language-plaintext highlighter-rouge">auto</code> 变量通常分配在栈上。</p>

    <p>从 C++11 起，<code class="language-plaintext highlighter-rouge">auto</code> 用于根据初始化表达式推断变量类型：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>     <span class="c1">// double</span>
<span class="k">auto</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"hello"</span><span class="p">;</span>  <span class="c1">// const char*</span>
</code></pre></div>    </div>

    <p>从 C++17 起，<code class="language-plaintext highlighter-rouge">auto</code> 不再是存储类说明符。</p>
  </li>
</ul>

<h2 id="2-register-存储类">2. <code class="language-plaintext highlighter-rouge">register</code> 存储类</h2>

<ul>
  <li>
    <p><strong>定义</strong>：用于建议编译器将变量存储在 CPU 寄存器中，以提高访问速度。</p>
  </li>
  <li>
    <p><strong>特点</strong>：虽然可以提高访问速度，但它是一个建议，编译器可以忽略此声明。在 C++11 后，<code class="language-plaintext highlighter-rouge">register</code> 已被弃用。</p>

    <p>语法：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">register</span> <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="3-static-存储类">3. <code class="language-plaintext highlighter-rouge">static</code> 存储类</h2>

<ul>
  <li>
    <p><strong>定义</strong>：用于定义具有静态存储期的变量或函数，生命周期贯穿整个程序的运行期。</p>
  </li>
  <li>
    <p><strong>特点</strong>：在函数内部，<code class="language-plaintext highlighter-rouge">static</code> 变量的值在函数调用之间保持不变。对于全局作用域，<code class="language-plaintext highlighter-rouge">static</code> 使变量具有内部链接，仅在定义它的文件中可见。</p>

    <p>示例：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">int</span> <span class="n">staticVar</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 函数调用之间保持不变</span>
</code></pre></div>    </div>

    <p><code class="language-plaintext highlighter-rouge">static</code> 还可用于类成员，使其共享同一副本。</p>
  </li>
</ul>

<h2 id="4-extern-存储类">4. <code class="language-plaintext highlighter-rouge">extern</code> 存储类</h2>

<ul>
  <li>
    <p><strong>定义</strong>：用于声明一个具有外部链接的变量或函数，允许多个文件之间共享。</p>
  </li>
  <li>
    <p><strong>特点</strong>：<code class="language-plaintext highlighter-rouge">extern</code> 使得一个全局变量或函数在其他文件中可见。</p>

    <p>示例：</p>

    <p><strong>main.cpp</strong>:</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>
</code></pre></div>    </div>

    <p><strong>support.cpp</strong>:</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>  <span class="c1">// 引用 main.cpp 中的 count</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="5-mutable-存储类-c11">5. <code class="language-plaintext highlighter-rouge">mutable</code> 存储类 (C++11)</h2>

<ul>
  <li>
    <p><strong>定义</strong>：用于修饰类中的成员变量，使它们可以在 <code class="language-plaintext highlighter-rouge">const</code> 成员函数中修改。</p>
  </li>
  <li>
    <p><strong>特点</strong>：通常用于需要在 <code class="language-plaintext highlighter-rouge">const</code> 环境下修改状态的变量，如缓存或计数器。</p>

    <p>示例：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">mutable</span> <span class="kt">int</span> <span class="n">mutableVar</span><span class="p">;</span>
  
    <span class="kt">void</span> <span class="n">constMemberFunc</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
        <span class="n">mutableVar</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span> <span class="c1">// 允许修改 mutable 成员变量</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="6-thread_local-存储类-c11">6. <code class="language-plaintext highlighter-rouge">thread_local</code> 存储类 (C++11)</h2>

<ul>
  <li>
    <p><strong>定义</strong>：用于在多线程环境中定义线程局部存储期的变量。</p>
  </li>
  <li>
    <p><strong>特点</strong>：每个线程拥有该变量的独立副本，线程结束时自动销毁。</p>

    <p>示例：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">thread_local</span> <span class="kt">int</span> <span class="n">threadVar</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span> <span class="c1">// 每个线程有自己的独立副本</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="存储类的总结">存储类的总结</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">auto</code> 和 <code class="language-plaintext highlighter-rouge">static</code> 是最常用的存储类，分别用于自动推断类型和保证变量生命周期。</li>
  <li><code class="language-plaintext highlighter-rouge">register</code> 是一个优化提示，已在 C++11 中废弃。</li>
  <li><code class="language-plaintext highlighter-rouge">extern</code> 用于跨文件共享变量或函数。</li>
  <li><code class="language-plaintext highlighter-rouge">mutable</code> 和 <code class="language-plaintext highlighter-rouge">thread_local</code> 引入于 C++11，分别用于在 <code class="language-plaintext highlighter-rouge">const</code> 函数内修改变量和管理线程特有变量。</li>
</ul>

<h2 id="示例代码展示不同存储类">示例代码：展示不同存储类</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="n">globalVar</span><span class="p">;</span>  <span class="c1">// 全局变量，extern 默认为外部链接</span>

<span class="kt">void</span> <span class="nf">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">auto</span> <span class="kt">int</span> <span class="n">localVar</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>  <span class="c1">// 局部变量，自动存储期</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">staticVar</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>  <span class="c1">// 静态变量，生命周期贯穿整个程序</span>

    <span class="c1">// const 变量默认为 static 存储期</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">constVar</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
    
    <span class="c1">// mutable 成员变量，可以在 const 函数中修改</span>
    <span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
    <span class="nl">public:</span>
        <span class="k">mutable</span> <span class="kt">int</span> <span class="n">mutableVar</span><span class="p">;</span>
  
        <span class="kt">void</span> <span class="n">constMemberFunc</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
            <span class="n">mutableVar</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span> <span class="c1">// 修改 mutable 成员变量</span>
        <span class="p">}</span>
    <span class="p">};</span>
  
    <span class="k">thread_local</span> <span class="kt">int</span> <span class="n">threadVar</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span>  <span class="c1">// 线程局部变量</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">extern</span> <span class="kt">int</span> <span class="n">externalVar</span><span class="p">;</span>  <span class="c1">// 声明外部变量</span>
    <span class="n">function</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="存储类的详细说明">存储类的详细说明</h2>

<h3 id="1-auto-存储类-1">1. <code class="language-plaintext highlighter-rouge">auto</code> 存储类</h3>

<p>自 C++11 起，<code class="language-plaintext highlighter-rouge">auto</code> 用于两种场景：</p>

<ul>
  <li>
    <p>根据初始化表达式自动推断变量类型：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>  <span class="c1">// double</span>
<span class="k">auto</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"hello"</span><span class="p">;</span>  <span class="c1">// const char*</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-register-存储类-1">2. <code class="language-plaintext highlighter-rouge">register</code> 存储类</h3>

<p><code class="language-plaintext highlighter-rouge">register</code> 用于将变量存储在寄存器中以提高访问速度，尤其是循环变量：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">register</span> <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 循环体</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="3-static-存储类-1">3. <code class="language-plaintext highlighter-rouge">static</code> 存储类</h3>

<p><code class="language-plaintext highlighter-rouge">static</code> 用于指示变量在程序运行期间持续存在，常用于局部静态变量和全局变量的作用域限制。</p>

<h4 id="局部静态变量">局部静态变量：</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">func</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>  <span class="c1">// 局部静态变量</span>
    <span class="n">i</span><span class="o">++</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"i = "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="4-extern-存储类-1">4. <code class="language-plaintext highlighter-rouge">extern</code> 存储类</h3>

<p><code class="language-plaintext highlighter-rouge">extern</code> 用于引用其他文件中的全局变量或函数。</p>

<h4 id="示例跨文件使用-extern">示例：跨文件使用 <code class="language-plaintext highlighter-rouge">extern</code></h4>

<p><strong>main.cpp</strong>:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>
<span class="kt">void</span> <span class="nf">write_extern</span><span class="p">();</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="n">write_extern</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>support.cpp</strong>:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>  <span class="c1">// 引用 main.cpp 中的 count</span>

<span class="kt">void</span> <span class="nf">write_extern</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Count is "</span> <span class="o">&lt;&lt;</span> <span class="n">count</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="5-mutable-存储类">5. <code class="language-plaintext highlighter-rouge">mutable</code> 存储类</h3>

<p><code class="language-plaintext highlighter-rouge">mutable</code> 使得类的成员可以在 <code class="language-plaintext highlighter-rouge">const</code> 成员函数中修改。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Example</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">mutable</span> <span class="kt">int</span> <span class="n">cachedValue</span><span class="p">;</span>  <span class="c1">// 可以在 const 函数中修改</span>

    <span class="kt">int</span> <span class="n">getValue</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">cachedValue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="nf">increment</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">cachedValue</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="6-thread_local-存储类">6. <code class="language-plaintext highlighter-rouge">thread_local</code> 存储类</h3>

<p><code class="language-plaintext highlighter-rouge">thread_local</code> 定义线程局部存储变量，每个线程都有自己独立的副本。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">thread_local</span> <span class="kt">int</span> <span class="n">threadSpecificVar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">threadFunction</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">threadSpecificVar</span> <span class="o">=</span> <span class="n">id</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread "</span> <span class="o">&lt;&lt;</span> <span class="n">id</span> <span class="o">&lt;&lt;</span> <span class="s">": threadSpecificVar = "</span> <span class="o">&lt;&lt;</span> <span class="n">threadSpecificVar</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t1</span><span class="p">(</span><span class="n">threadFunction</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t2</span><span class="p">(</span><span class="n">threadFunction</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>

    <span class="n">t1</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="n">t2</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p>通过合理使用存储类说明符，可以提升程序的可维护性和性能，帮助管理变量的生命周期、可见性和存储位置。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[存储类]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">基本数据类型</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Variable-Types/" rel="alternate" type="text/html" title="基本数据类型" /><published>2025-01-05T00:00:00+08:00</published><updated>2025-01-05T00:00:00+08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Variable%20Types</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Variable-Types/"><![CDATA[<h1 id="基本数据类型"><span style="color: rgb(255,127,80);"><strong>基本数据类型</strong></span></h1>

<p>在 C++ 中，<strong>变量</strong>是程序中用于存储数据的命名存储区。每个变量都有一个指定的类型，类型决定了变量所占用的内存大小、数据布局及可以存储的数据值范围。</p>

<p>变量的名称由字母、数字和下划线组成，但必须以字母或下划线开头。需要注意的是，C++ 区分大小写，即大写字母和小写字母被视为不同的字符。</p>

<hr />

<p>在 C++ 中，基本数据类型主要有以下几种：</p>

<h3 id="1-基本数据类型"><span style="color: rgb(0,191,255);"><strong>1. 基本数据类型</strong></span></h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">bool</code></td>
      <td>布尔类型，存储值 <code class="language-plaintext highlighter-rouge">true</code> 或 <code class="language-plaintext highlighter-rouge">false</code>，占用 1 个字节。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">char</code></td>
      <td>字符类型，用于存储 ASCII 字符，通常占用 1 个字节。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">int</code></td>
      <td>整数类型，通常用于存储普通整数，通常占用 4 个字节。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">float</code></td>
      <td>单精度浮点数类型，通常占用 4 个字节，存储 1 位符号、8 位指数和 23 位小数。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">double</code></td>
      <td>双精度浮点数类型，通常占用 8 个字节，存储 1 位符号、11 位指数和 52 位小数。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">void</code></td>
      <td>无类型，表示函数不返回值或指针没有类型。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">wchar_t</code></td>
      <td>宽字符类型，存储更大范围的字符，通常占用 2 或 4 个字节。</td>
    </tr>
  </tbody>
</table>

<h5 id="基本数据类型示例"><span style="color: rgb(32,178,170);"><strong>基本数据类型示例</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>        <span class="c1">// 布尔类型</span>
    <span class="kt">char</span> <span class="n">letter</span> <span class="o">=</span> <span class="sc">'A'</span><span class="p">;</span>       <span class="c1">// 字符类型</span>
    <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>            <span class="c1">// 整数类型</span>
    <span class="kt">float</span> <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14</span><span class="n">f</span><span class="p">;</span>        <span class="c1">// 单精度浮点数</span>
    <span class="kt">double</span> <span class="n">piApprox</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="p">;</span> <span class="c1">// 双精度浮点数</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Flag: "</span> <span class="o">&lt;&lt;</span> <span class="n">flag</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Letter: "</span> <span class="o">&lt;&lt;</span> <span class="n">letter</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Age: "</span> <span class="o">&lt;&lt;</span> <span class="n">age</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">pi</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Pi Approx: "</span> <span class="o">&lt;&lt;</span> <span class="n">piApprox</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">复制代码</span>
<span class="na">Flag</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">Letter</span><span class="pi">:</span> <span class="s">A</span>
<span class="na">Age</span><span class="pi">:</span> <span class="m">25</span>
<span class="na">Pi</span><span class="pi">:</span> <span class="m">3.14</span>
<span class="na">Pi Approx</span><span class="pi">:</span> <span class="m">3.14159</span>
</code></pre></div></div>

<h3 id="2-整数类型"><span style="color: rgb(0,191,255);"><strong>2. 整数类型</strong></span></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">int</code>: 用于表示普通整数，通常占用 4 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">short</code>: 短整数，通常占用 2 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">long</code>: 长整数，通常占用 4 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">long long</code>: 更长的整数，通常占用 8 个字节。</li>
</ul>

<h5 id="整数类型示例"><span style="color: rgb(32,178,170);"><strong>整数类型示例</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">short</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">32767</span><span class="p">;</span>        <span class="c1">// 短整数类型，最大值</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">100000</span><span class="p">;</span>         <span class="c1">// 普通整数类型</span>
    <span class="kt">long</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">1000000000</span><span class="p">;</span>    <span class="c1">// 长整数类型</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span> <span class="o">=</span> <span class="mi">1000000000000</span><span class="p">;</span> <span class="c1">// 超长整数类型</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Short: "</span> <span class="o">&lt;&lt;</span> <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Int: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Long: "</span> <span class="o">&lt;&lt;</span> <span class="n">l</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Long Long: "</span> <span class="o">&lt;&lt;</span> <span class="n">ll</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Short</span><span class="pi">:</span> <span class="m">32767</span>
<span class="na">Int</span><span class="pi">:</span> <span class="m">100000</span>
<span class="na">Long</span><span class="pi">:</span> <span class="m">1000000000</span>
<span class="na">Long Long</span><span class="pi">:</span> <span class="m">1000000000000</span>
</code></pre></div></div>

<h3 id="3-浮点类型"><span style="color: rgb(0,191,255);"><strong>3. 浮点类型</strong></span></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">float</code>: 单精度浮点数，通常占用 4 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">double</code>: 双精度浮点数，通常占用 8 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">long double</code>: 高精度浮点数，占用字节数根据系统不同而变化。</li>
</ul>

<h5 id="浮点类型示例"><span style="color: rgb(32,178,170);"><strong>浮点类型示例</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">float</span> <span class="n">piFloat</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="n">f</span><span class="p">;</span>  <span class="c1">// 单精度浮点数</span>
    <span class="kt">double</span> <span class="n">piDouble</span> <span class="o">=</span> <span class="mf">3.1415926535</span><span class="p">;</span> <span class="c1">// 双精度浮点数</span>
    <span class="kt">long</span> <span class="kt">double</span> <span class="n">piLongDouble</span> <span class="o">=</span> <span class="mf">3.14159265358979323846</span><span class="p">;</span> <span class="c1">// 高精度浮点数</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Float Pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">piFloat</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Double Pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">piDouble</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Long Double Pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">piLongDouble</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Float Pi</span><span class="pi">:</span> <span class="m">3.14159</span>
<span class="na">Double Pi</span><span class="pi">:</span> <span class="m">3.14159</span>
<span class="na">Long Double Pi</span><span class="pi">:</span> <span class="m">3.14159</span>
</code></pre></div></div>

<h3 id="4-字符类型"><span style="color: rgb(0,191,255);"><strong>4. 字符类型</strong></span></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">char</code>: 单字节字符，通常占用 1 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">wchar_t</code>: 宽字符，通常占用 2 或 4 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">char16_t</code>: 16 位 Unicode 字符，占用 2 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">char32_t</code>: 32 位 Unicode 字符，占用 4 个字节。</li>
</ul>

<h5 id="字符类型示例"><span style="color: rgb(32,178,170);"><strong>字符类型示例</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">'A'</span><span class="p">;</span>             <span class="c1">// 字符类型</span>
    <span class="kt">wchar_t</span> <span class="n">wc</span> <span class="o">=</span> <span class="sc">L'你'</span><span class="p">;</span>        <span class="c1">// 宽字符类型</span>
    <span class="kt">char16_t</span> <span class="n">c16</span> <span class="o">=</span> <span class="sc">u'你'</span><span class="p">;</span>      <span class="c1">// 16位 Unicode 字符</span>
    <span class="kt">char32_t</span> <span class="n">c32</span> <span class="o">=</span> <span class="sc">U'你'</span><span class="p">;</span>      <span class="c1">// 32位 Unicode 字符</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Char: "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Wide Char: "</span> <span class="o">&lt;&lt;</span> <span class="n">wc</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Char16_t: "</span> <span class="o">&lt;&lt;</span> <span class="n">c16</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Char32_t: "</span> <span class="o">&lt;&lt;</span> <span class="n">c32</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Char</span><span class="pi">:</span> <span class="s">A</span>
<span class="na">Wide Char</span><span class="pi">:</span> <span class="s">你</span>
<span class="na">Char16_t</span><span class="pi">:</span> <span class="s">你</span>
<span class="na">Char32_t</span><span class="pi">:</span> <span class="s">你</span>
</code></pre></div></div>

<hr />

<h3 id="变量定义与声明">变量定义与声明</h3>

<h4 id="1-变量定义">1. 变量定义</h4>

<p>在 C++ 中，<strong>定义变量</strong>时指定其类型，并为该类型创建存储空间。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">type</span> <span class="n">variable_list</span><span class="p">;</span>
</code></pre></div></div>

<p>其中 <code class="language-plaintext highlighter-rouge">type</code> 是有效的 C++ 数据类型，<code class="language-plaintext highlighter-rouge">variable_list</code> 是一个或多个变量名（以逗号分隔）。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
<span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="n">ch</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">f</span><span class="p">,</span> <span class="n">salary</span><span class="p">;</span>
<span class="kt">double</span> <span class="n">d</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="示例变量定义">示例：变量定义</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>  <span class="c1">// 定义并初始化 i 和 j</span>
    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">'A'</span><span class="p">;</span>            <span class="c1">// 定义字符类型变量 c</span>
    <span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">3.14</span><span class="n">f</span><span class="p">;</span>         <span class="c1">// 定义浮点数变量 f</span>
    <span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="p">;</span>      <span class="c1">// 定义双精度浮点数变量 d</span>
    <span class="n">k</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">;</span>               <span class="c1">// 使用变量 i 和 j 计算 k</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"i: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">", j: "</span> <span class="o">&lt;&lt;</span> <span class="n">j</span> <span class="o">&lt;&lt;</span> <span class="s">", k: "</span> <span class="o">&lt;&lt;</span> <span class="n">k</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c: "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="s">", f: "</span> <span class="o">&lt;&lt;</span> <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="s">", d: "</span> <span class="o">&lt;&lt;</span> <span class="n">d</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">i</span><span class="pi">:</span> <span class="s">10, j</span><span class="err">:</span> <span class="s">20, k</span><span class="err">:</span> <span class="m">30</span>
<span class="na">c</span><span class="pi">:</span> <span class="s">A, f</span><span class="err">:</span> <span class="s">3.14, d</span><span class="err">:</span> <span class="m">3.14159</span>
</code></pre></div></div>

<h4 id="2-变量声明">2. 变量声明</h4>

<p><strong>变量声明</strong>是向编译器保证某个变量在某处存在。声明不需要提供完整的变量定义，仅需指定类型和名称即可。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>  <span class="c1">// 声明变量 a 和 b</span>
<span class="k">extern</span> <span class="kt">float</span> <span class="n">f</span><span class="p">;</span>   <span class="c1">// 声明变量 f</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">extern</code> 关键字用于声明变量，表明该变量在其他地方定义。例如，在多个文件中，你可以在头文件声明变量，在源文件中进行定义。</p>

<h4 id="示例变量声明与定义">示例：变量声明与定义</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>  <span class="c1">// 声明变量 a 和 b</span>
<span class="k">extern</span> <span class="kt">float</span> <span class="n">f</span><span class="p">;</span>   <span class="c1">// 声明变量 f</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>    <span class="c1">// 定义变量 a 和 b</span>
    <span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">70.0</span> <span class="o">/</span> <span class="mf">3.0</span><span class="p">;</span>  <span class="c1">// 定义并初始化变量 f</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Sum of a and b: "</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"f: "</span> <span class="o">&lt;&lt;</span> <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Sum of a and b</span><span class="pi">:</span> <span class="m">30</span>
<span class="na">f</span><span class="pi">:</span> <span class="m">23.3333</span>
</code></pre></div></div>

<hr />

<h3 id="左值lvalues与右值rvalues">左值（Lvalues）与右值（Rvalues）</h3>

<p>C++ 中的表达式分为两种类型：</p>

<ul>
  <li><strong>左值（lvalue）</strong>：表示一个内存位置，可以对其进行赋值。左值可以出现在赋值语句的左侧。</li>
  <li><strong>右值（rvalue）</strong>：表示某个具体的值，不能进行赋值。右值通常出现在赋值语句的右侧，但不能出现在左侧。</li>
</ul>

<h4 id="示例左值与右值">示例：左值与右值</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>  <span class="c1">// 变量 x 是左值</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>  <span class="c1">// 变量 y 是左值</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>  <span class="c1">// 这是有效的，左值可以赋值</span>
    <span class="c1">// 10 = x; // 错误，10 是右值，不能在赋值语句的左侧</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"x: "</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="s">", y: "</span> <span class="o">&lt;&lt;</span> <span class="n">y</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">x</span><span class="pi">:</span> <span class="s">20, y</span><span class="err">:</span> <span class="m">20</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[基本数据类型]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-3.png" /><media:content medium="image" url="http://localhost:4000/code-cover-3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>