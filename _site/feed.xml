<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-01-07T11:14:37-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tomorrow’s Blog</title><entry><title type="html">基本数据类型</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Variable-Types/" rel="alternate" type="text/html" title="基本数据类型" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Variable%20Types</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Variable-Types/"><![CDATA[<p>在 C++ 中，<strong>变量</strong>是程序中用于存储数据的命名存储区。每个变量都有一个指定的类型，类型决定了变量所占用的内存大小、数据布局及可以存储的数据值范围。</p>

<p>变量的名称由字母、数字和下划线组成，但必须以字母或下划线开头。需要注意的是，C++ 区分大小写，即大写字母和小写字母被视为不同的字符。</p>

<p>在 C++ 中，基本数据类型主要有以下几种：</p>

<h3 id="1-基本数据类型"><span style="color: rgb(0,191,255);"><strong>1. 基本数据类型</strong></span></h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">bool</code></td>
      <td>布尔类型，存储值 <code class="language-plaintext highlighter-rouge">true</code> 或 <code class="language-plaintext highlighter-rouge">false</code>，占用 1 个字节。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">char</code></td>
      <td>字符类型，用于存储 ASCII 字符，通常占用 1 个字节。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">int</code></td>
      <td>整数类型，通常用于存储普通整数，通常占用 4 个字节。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">float</code></td>
      <td>单精度浮点数类型，通常占用 4 个字节，存储 1 位符号、8 位指数和 23 位小数。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">double</code></td>
      <td>双精度浮点数类型，通常占用 8 个字节，存储 1 位符号、11 位指数和 52 位小数。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">void</code></td>
      <td>无类型，表示函数不返回值或指针没有类型。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">wchar_t</code></td>
      <td>宽字符类型，存储更大范围的字符，通常占用 2 或 4 个字节。</td>
    </tr>
  </tbody>
</table>

<h5 id="基本数据类型示例"><span style="color: rgb(32,178,170);"><strong>基本数据类型示例</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>        <span class="c1">// 布尔类型</span>
    <span class="kt">char</span> <span class="n">letter</span> <span class="o">=</span> <span class="sc">'A'</span><span class="p">;</span>       <span class="c1">// 字符类型</span>
    <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>            <span class="c1">// 整数类型</span>
    <span class="kt">float</span> <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14</span><span class="n">f</span><span class="p">;</span>        <span class="c1">// 单精度浮点数</span>
    <span class="kt">double</span> <span class="n">piApprox</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="p">;</span> <span class="c1">// 双精度浮点数</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Flag: "</span> <span class="o">&lt;&lt;</span> <span class="n">flag</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Letter: "</span> <span class="o">&lt;&lt;</span> <span class="n">letter</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Age: "</span> <span class="o">&lt;&lt;</span> <span class="n">age</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">pi</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Pi Approx: "</span> <span class="o">&lt;&lt;</span> <span class="n">piApprox</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">复制代码</span>
<span class="na">Flag</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">Letter</span><span class="pi">:</span> <span class="s">A</span>
<span class="na">Age</span><span class="pi">:</span> <span class="m">25</span>
<span class="na">Pi</span><span class="pi">:</span> <span class="m">3.14</span>
<span class="na">Pi Approx</span><span class="pi">:</span> <span class="m">3.14159</span>
</code></pre></div></div>

<h3 id="2-整数类型"><span style="color: rgb(0,191,255);"><strong>2. 整数类型</strong></span></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">int</code>: 用于表示普通整数，通常占用 4 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">short</code>: 短整数，通常占用 2 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">long</code>: 长整数，通常占用 4 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">long long</code>: 更长的整数，通常占用 8 个字节。</li>
</ul>

<h5 id="整数类型示例"><span style="color: rgb(32,178,170);"><strong>整数类型示例</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">short</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">32767</span><span class="p">;</span>        <span class="c1">// 短整数类型，最大值</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">100000</span><span class="p">;</span>         <span class="c1">// 普通整数类型</span>
    <span class="kt">long</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">1000000000</span><span class="p">;</span>    <span class="c1">// 长整数类型</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span> <span class="o">=</span> <span class="mi">1000000000000</span><span class="p">;</span> <span class="c1">// 超长整数类型</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Short: "</span> <span class="o">&lt;&lt;</span> <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Int: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Long: "</span> <span class="o">&lt;&lt;</span> <span class="n">l</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Long Long: "</span> <span class="o">&lt;&lt;</span> <span class="n">ll</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Short</span><span class="pi">:</span> <span class="m">32767</span>
<span class="na">Int</span><span class="pi">:</span> <span class="m">100000</span>
<span class="na">Long</span><span class="pi">:</span> <span class="m">1000000000</span>
<span class="na">Long Long</span><span class="pi">:</span> <span class="m">1000000000000</span>
</code></pre></div></div>

<h3 id="3-浮点类型"><span style="color: rgb(0,191,255);"><strong>3. 浮点类型</strong></span></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">float</code>: 单精度浮点数，通常占用 4 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">double</code>: 双精度浮点数，通常占用 8 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">long double</code>: 高精度浮点数，占用字节数根据系统不同而变化。</li>
</ul>

<h5 id="浮点类型示例"><span style="color: rgb(32,178,170);"><strong>浮点类型示例</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">float</span> <span class="n">piFloat</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="n">f</span><span class="p">;</span>  <span class="c1">// 单精度浮点数</span>
    <span class="kt">double</span> <span class="n">piDouble</span> <span class="o">=</span> <span class="mf">3.1415926535</span><span class="p">;</span> <span class="c1">// 双精度浮点数</span>
    <span class="kt">long</span> <span class="kt">double</span> <span class="n">piLongDouble</span> <span class="o">=</span> <span class="mf">3.14159265358979323846</span><span class="p">;</span> <span class="c1">// 高精度浮点数</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Float Pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">piFloat</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Double Pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">piDouble</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Long Double Pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">piLongDouble</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Float Pi</span><span class="pi">:</span> <span class="m">3.14159</span>
<span class="na">Double Pi</span><span class="pi">:</span> <span class="m">3.14159</span>
<span class="na">Long Double Pi</span><span class="pi">:</span> <span class="m">3.14159</span>
</code></pre></div></div>

<h3 id="4-字符类型"><span style="color: rgb(0,191,255);"><strong>4. 字符类型</strong></span></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">char</code>: 单字节字符，通常占用 1 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">wchar_t</code>: 宽字符，通常占用 2 或 4 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">char16_t</code>: 16 位 Unicode 字符，占用 2 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">char32_t</code>: 32 位 Unicode 字符，占用 4 个字节。</li>
</ul>

<h5 id="字符类型示例"><span style="color: rgb(32,178,170);"><strong>字符类型示例</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">'A'</span><span class="p">;</span>             <span class="c1">// 字符类型</span>
    <span class="kt">wchar_t</span> <span class="n">wc</span> <span class="o">=</span> <span class="sc">L'你'</span><span class="p">;</span>        <span class="c1">// 宽字符类型</span>
    <span class="kt">char16_t</span> <span class="n">c16</span> <span class="o">=</span> <span class="sc">u'你'</span><span class="p">;</span>      <span class="c1">// 16位 Unicode 字符</span>
    <span class="kt">char32_t</span> <span class="n">c32</span> <span class="o">=</span> <span class="sc">U'你'</span><span class="p">;</span>      <span class="c1">// 32位 Unicode 字符</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Char: "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Wide Char: "</span> <span class="o">&lt;&lt;</span> <span class="n">wc</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Char16_t: "</span> <span class="o">&lt;&lt;</span> <span class="n">c16</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Char32_t: "</span> <span class="o">&lt;&lt;</span> <span class="n">c32</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Char</span><span class="pi">:</span> <span class="s">A</span>
<span class="na">Wide Char</span><span class="pi">:</span> <span class="s">你</span>
<span class="na">Char16_t</span><span class="pi">:</span> <span class="s">你</span>
<span class="na">Char32_t</span><span class="pi">:</span> <span class="s">你</span>
</code></pre></div></div>

<hr />

<h3 id="变量定义与声明">变量定义与声明</h3>

<h4 id="1-变量定义">1. 变量定义</h4>

<p>在 C++ 中，<strong>定义变量</strong>时指定其类型，并为该类型创建存储空间。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">type</span> <span class="n">variable_list</span><span class="p">;</span>
</code></pre></div></div>

<p>其中 <code class="language-plaintext highlighter-rouge">type</code> 是有效的 C++ 数据类型，<code class="language-plaintext highlighter-rouge">variable_list</code> 是一个或多个变量名（以逗号分隔）。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
<span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="n">ch</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">f</span><span class="p">,</span> <span class="n">salary</span><span class="p">;</span>
<span class="kt">double</span> <span class="n">d</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="示例变量定义">示例：变量定义</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>  <span class="c1">// 定义并初始化 i 和 j</span>
    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">'A'</span><span class="p">;</span>            <span class="c1">// 定义字符类型变量 c</span>
    <span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">3.14</span><span class="n">f</span><span class="p">;</span>         <span class="c1">// 定义浮点数变量 f</span>
    <span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="p">;</span>      <span class="c1">// 定义双精度浮点数变量 d</span>
    <span class="n">k</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">;</span>               <span class="c1">// 使用变量 i 和 j 计算 k</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"i: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">", j: "</span> <span class="o">&lt;&lt;</span> <span class="n">j</span> <span class="o">&lt;&lt;</span> <span class="s">", k: "</span> <span class="o">&lt;&lt;</span> <span class="n">k</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c: "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="s">", f: "</span> <span class="o">&lt;&lt;</span> <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="s">", d: "</span> <span class="o">&lt;&lt;</span> <span class="n">d</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">i</span><span class="pi">:</span> <span class="s">10, j</span><span class="err">:</span> <span class="s">20, k</span><span class="err">:</span> <span class="m">30</span>
<span class="na">c</span><span class="pi">:</span> <span class="s">A, f</span><span class="err">:</span> <span class="s">3.14, d</span><span class="err">:</span> <span class="m">3.14159</span>
</code></pre></div></div>

<h4 id="2-变量声明">2. 变量声明</h4>

<p><strong>变量声明</strong>是向编译器保证某个变量在某处存在。声明不需要提供完整的变量定义，仅需指定类型和名称即可。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>  <span class="c1">// 声明变量 a 和 b</span>
<span class="k">extern</span> <span class="kt">float</span> <span class="n">f</span><span class="p">;</span>   <span class="c1">// 声明变量 f</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">extern</code> 关键字用于声明变量，表明该变量在其他地方定义。例如，在多个文件中，你可以在头文件声明变量，在源文件中进行定义。</p>

<h4 id="示例变量声明与定义">示例：变量声明与定义</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>  <span class="c1">// 声明变量 a 和 b</span>
<span class="k">extern</span> <span class="kt">float</span> <span class="n">f</span><span class="p">;</span>   <span class="c1">// 声明变量 f</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>    <span class="c1">// 定义变量 a 和 b</span>
    <span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">70.0</span> <span class="o">/</span> <span class="mf">3.0</span><span class="p">;</span>  <span class="c1">// 定义并初始化变量 f</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Sum of a and b: "</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"f: "</span> <span class="o">&lt;&lt;</span> <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Sum of a and b</span><span class="pi">:</span> <span class="m">30</span>
<span class="na">f</span><span class="pi">:</span> <span class="m">23.3333</span>
</code></pre></div></div>

<hr />

<h3 id="左值lvalues与右值rvalues">左值（Lvalues）与右值（Rvalues）</h3>

<p>C++ 中的表达式分为两种类型：</p>

<ul>
  <li><strong>左值（lvalue）</strong>：表示一个内存位置，可以对其进行赋值。左值可以出现在赋值语句的左侧。</li>
  <li><strong>右值（rvalue）</strong>：表示某个具体的值，不能进行赋值。右值通常出现在赋值语句的右侧，但不能出现在左侧。</li>
</ul>

<h4 id="示例左值与右值">示例：左值与右值</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>  <span class="c1">// 变量 x 是左值</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>  <span class="c1">// 变量 y 是左值</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>  <span class="c1">// 这是有效的，左值可以赋值</span>
    <span class="c1">// 10 = x; // 错误，10 是右值，不能在赋值语句的左侧</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"x: "</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="s">", y: "</span> <span class="o">&lt;&lt;</span> <span class="n">y</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">x</span><span class="pi">:</span> <span class="s">20, y</span><span class="err">:</span> <span class="m">20</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[在 C++ 中，变量是程序中用于存储数据的命名存储区。每个变量都有一个指定的类型，类型决定了变量所占用的内存大小、数据布局及可以存储的数据值范围。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-3.png" /><media:content medium="image" url="http://localhost:4000/code-cover-3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">变量的作用域</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Scope-of-variables/" rel="alternate" type="text/html" title="变量的作用域" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Scope%20of%20variables</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Scope-of-variables/"><![CDATA[<p>在 C++ 中，变量的作用域指的是变量可以被访问的范围。通常来说，变量的作用域可以分为以下几种类型：</p>

<ul>
  <li><strong>局部作用域</strong>：变量仅在函数或代码块内部可访问。</li>
  <li><strong>全局作用域</strong>：变量在整个程序中都可访问。</li>
  <li><strong>块作用域</strong>：变量仅在某个特定代码块（如 if 语句、循环等）内可访问。</li>
  <li><strong>类作用域</strong>：变量仅在类内部可访问。</li>
</ul>

<h4 id="1-变量声明位置"><span style="color: rgb(0,191,255);"><strong>1. 变量声明位置</strong></span></h4>

<p>变量可以在不同的地方声明，具体包括：</p>

<ul>
  <li><strong>局部变量</strong>：在函数或代码块内部声明的变量。</li>
  <li><strong>形式参数</strong>：在函数参数列表中声明的变量。</li>
  <li><strong>全局变量</strong>：在所有函数外部声明的变量。</li>
</ul>

<h4 id="2-作用域详细介绍"><span style="color: rgb(0,191,255);"><strong>2. 作用域详细介绍</strong></span></h4>

<h5 id="21-局部作用域"><span style="color: rgb(32,178,170);"><strong>2.1 局部作用域</strong></span></h5>

<p>局部变量是在函数或代码块内部声明的，它们只在当前函数或代码块中有效。当函数被调用时，局部变量会被创建，函数执行结束后，它们会被销毁。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="c1">// 局部变量声明</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>

    <span class="c1">// 实际初始化</span>
    <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">c</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个例子中，变量 <code class="language-plaintext highlighter-rouge">a</code>、<code class="language-plaintext highlighter-rouge">b</code> 和 <code class="language-plaintext highlighter-rouge">c</code> 是局部变量，只能在 <code class="language-plaintext highlighter-rouge">main</code> 函数内部访问。</p>

<h5 id="22-全局作用域"><span style="color: rgb(32,178,170);"><strong>2.2 全局作用域</strong></span></h5>

<p>全局变量是在所有函数外部定义的变量，它们在整个程序中都有效，并且可以被任何函数访问。全局变量的生命周期从程序开始到程序结束。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="c1">// 全局变量声明</span>
<span class="kt">int</span> <span class="n">g</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="c1">// 局部变量声明</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>

    <span class="c1">// 实际初始化</span>
    <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
    <span class="n">g</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">g</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">g</code> 是一个全局变量，可以在整个程序中访问。</p>

<h5 id="23-局部变量与全局变量同名"><span style="color: rgb(32,178,170);"><strong>2.3 局部变量与全局变量同名</strong></span></h5>

<p>如果局部变量和全局变量同名，局部变量会覆盖全局变量。也就是说，函数内部会优先使用局部变量。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="c1">// 全局变量声明</span>
<span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="c1">// 局部变量声明</span>
    <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">g</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出结果为：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">10</span>
</code></pre></div></div>

<p>这是因为在 <code class="language-plaintext highlighter-rouge">main</code> 函数中声明的局部变量 <code class="language-plaintext highlighter-rouge">g</code> 覆盖了全局变量 <code class="language-plaintext highlighter-rouge">g</code>。</p>

<h5 id="24-初始化局部变量和全局变量"><span style="color: rgb(32,178,170);"><strong>2.4 初始化局部变量和全局变量</strong></span></h5>

<ul>
  <li><strong>局部变量</strong>：在定义时，系统不会自动为其初始化，必须显式地初始化。</li>
  <li><strong>全局变量</strong>：系统会自动初始化为默认值。不同数据类型的默认值如下：</li>
</ul>

<table>
  <thead>
    <tr>
      <th>数据类型</th>
      <th>初始化默认值</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">int</code></td>
      <td><code class="language-plaintext highlighter-rouge">0</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">char</code></td>
      <td><code class="language-plaintext highlighter-rouge">'\0'</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">float</code></td>
      <td><code class="language-plaintext highlighter-rouge">0</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">double</code></td>
      <td><code class="language-plaintext highlighter-rouge">0</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">pointer</code></td>
      <td><code class="language-plaintext highlighter-rouge">NULL</code></td>
    </tr>
  </tbody>
</table>

<h5 id="25-块作用域"><span style="color: rgb(32,178,170);"><strong>2.5 块作用域</strong></span></h5>

<p>块作用域是指在代码块（如条件语句、循环语句等）内部声明的变量。它们仅在该代码块内部有效。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>  <span class="c1">// 块作用域变量</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"块变量: "</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"外部变量: "</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出结果为：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">块变量</span><span class="pi">:</span> <span class="m">20</span>
<span class="na">外部变量</span><span class="pi">:</span> <span class="m">10</span>
</code></pre></div></div>

<p>在这个例子中，内部代码块中声明了一个与外部同名的变量 <code class="language-plaintext highlighter-rouge">a</code>，并且它覆盖了外部作用域中的变量。在代码块内部访问 <code class="language-plaintext highlighter-rouge">a</code> 时，输出的是 <code class="language-plaintext highlighter-rouge">20</code>，而在外部访问时，输出的是 <code class="language-plaintext highlighter-rouge">10</code>。</p>

<h5 id="26-类作用域"><span style="color: rgb(32,178,170);"><strong>2.6 类作用域</strong></span></h5>

<p>类作用域是指在类内部声明的变量。类的成员变量（或类的静态变量）可以在类的所有成员函数中访问。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">class_var</span><span class="p">;</span>  <span class="c1">// 类作用域变量</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="n">MyClass</span><span class="o">::</span><span class="n">class_var</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"类变量: "</span> <span class="o">&lt;&lt;</span> <span class="n">MyClass</span><span class="o">::</span><span class="n">class_var</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出结果为：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">类变量</span><span class="pi">:</span> <span class="m">30</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">MyClass</code> 类中声明了一个静态成员变量 <code class="language-plaintext highlighter-rouge">class_var</code>，它属于类作用域，可以通过类名访问。</p>

<h4 id="总结"><span style="color: rgb(0,191,255);"><strong>总结</strong></span></h4>

<ul>
  <li>
    <p><span style="color: rgb(238,130,238);"><strong>局部作用域</strong>：在函数或代码块内有效。</span></p>
  </li>
  <li>
    <p><span style="color: rgb(238,130,238);"><strong>全局作用域</strong>：在程序的任何地方有效。</span></p>
  </li>
  <li>
    <p><span style="color: rgb(238,130,238);"><strong>块作用域</strong>：在代码块内部有效。</span></p>
  </li>
  <li>
    <p><span style="color: rgb(238,130,238);"><strong>类作用域</strong>：在类内部有效。</span></p>
  </li>
</ul>

<p>理解这些作用域有助于更好地管理变量的生命周期和访问权限。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[在 C++ 中，变量的作用域指的是变量可以被访问的范围。通常来说，变量的作用域可以分为以下几种类型：]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-5.png" /><media:content medium="image" url="http://localhost:4000/code-cover-5.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Basic Knowledge</title><link href="http://localhost:4000/code/algorithm/2025/01/03/basic-knowledge/" rel="alternate" type="text/html" title="Basic Knowledge" /><published>2025-01-03T00:00:00-08:00</published><updated>2025-01-03T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/2025/01/03/basic-knowledge</id><content type="html" xml:base="http://localhost:4000/code/algorithm/2025/01/03/basic-knowledge/"><![CDATA[<meta http-equiv="refresh" content="0; url=/code/algorithm/basic-knowledge" />

<p>If you are not redirected, <a href="/code/algorithm/basic-knowledge">click here</a>.</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm" /><category term="Code" /><summary type="html"><![CDATA[If you are not redirected, click here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/luogu-cover-2.png" /><media:content medium="image" url="http://localhost:4000/luogu-cover-2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">注释</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/03/Annotation/" rel="alternate" type="text/html" title="注释" /><published>2025-01-03T00:00:00-08:00</published><updated>2025-01-03T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/03/Annotation</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/03/Annotation/"><![CDATA[<h3 id="c-注释"><span style="color: rgb(0,191,255);"><strong>C++ 注释</strong></span></h3>
<p>程序中的注释是用于解释代码的语句，可以帮助提高源代码的可读性。所有编程语言都支持某种形式的注释，以便开发者更容易理解代码的意图和功能。</p>

<p>C++ 支持两种类型的注释：单行注释和多行注释。在 C++ 中，注释中的内容会被编译器忽略，不会对程序的执行产生任何影响。</p>

<h3 id="c-注释的两种形式"><span style="color: rgb(0,191,255);"><strong>C++ 注释的两种形式：</strong></span></h3>

<ul>
  <li>
    <p><strong>单行注释</strong>： 使用 <code class="language-plaintext highlighter-rouge">//</code> 开始，注释从 <code class="language-plaintext highlighter-rouge">//</code> 后开始直到行末。例如：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 这是一个单行注释</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello World!"</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>多行注释</strong>： 使用 <code class="language-plaintext highlighter-rouge">/*</code> 开始，以 <code class="language-plaintext highlighter-rouge">*/</code> 结束，可以注释多行文本。例如：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 这是一个多行注释
   可以跨越多行
*/</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello World!"</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="示例代码"><span style="color: rgb(0,191,255);"><strong>示例代码</strong></span></h3>
<ul>
  <li><strong>单行注释</strong>
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
  <span class="c1">// 这是一个单行注释</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello World!"</span><span class="p">;</span>  <span class="c1">// 语句后面的注释</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>在上面的代码中，编译器会忽略 // 这是一个注释 和 // 语句后面的注释，输出结果为：</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">Hello World!</span>
</code></pre></div></div>
<ul>
  <li><strong>多行注释</strong>
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
  <span class="cm">/* 这是一个多行注释
     可以跨越多行 */</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello World!"</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>在这段代码中，/* 这是一个多行注释 */ 会被编译器忽略，输出结果为：</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">Hello World!</span>
</code></pre></div></div>

<h3 id="注释嵌套"><span style="color: rgb(0,191,255);"><strong>注释嵌套</strong></span></h3>

<p>虽然注释可以嵌套使用，但有一些注意事项：</p>

<p><span style="color: rgb(238,130,238);"><strong>在 /* 和 */ 注释内，// 字符没有特殊的含义。</strong></span></p>

<p><span style="color: rgb(238,130,238);"><strong>在 // 注释内，/* 和 */ 字符也没有特殊的含义。</strong></span></p>

<p>因此，您可以在一种注释类型内使用另一种注释类型。例如：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 用于输出 Hello World 的注释

cout &lt;&lt; "Hello World"; // 输出 Hello World

*/</span>
</code></pre></div></div>
<p>这种嵌套的注释方式是允许的。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[C++ 注释 程序中的注释是用于解释代码的语句，可以帮助提高源代码的可读性。所有编程语言都支持某种形式的注释，以便开发者更容易理解代码的意图和功能。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-1.png" /><media:content medium="image" url="http://localhost:4000/code-cover-1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">数据类型</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/03/Data-Types/" rel="alternate" type="text/html" title="数据类型" /><published>2025-01-03T00:00:00-08:00</published><updated>2025-01-03T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/03/Data%20Types</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/03/Data-Types/"><![CDATA[<h2 id="基本内置类型"><span style="color: rgb(0,191,255);"><strong>基本内置类型</strong></span></h2>

<p>C++ 提供了丰富的内置数据类型供程序员使用，同时也支持用户自定义数据类型。下表列出了七种基本的 C++ 数据类型：</p>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>关键字</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>布尔型</td>
      <td><code class="language-plaintext highlighter-rouge">bool</code></td>
    </tr>
    <tr>
      <td>字符型</td>
      <td><code class="language-plaintext highlighter-rouge">char</code></td>
    </tr>
    <tr>
      <td>整型</td>
      <td><code class="language-plaintext highlighter-rouge">int</code></td>
    </tr>
    <tr>
      <td>浮点型</td>
      <td><code class="language-plaintext highlighter-rouge">float</code></td>
    </tr>
    <tr>
      <td>双精度浮点型</td>
      <td><code class="language-plaintext highlighter-rouge">double</code></td>
    </tr>
    <tr>
      <td>无类型</td>
      <td><code class="language-plaintext highlighter-rouge">void</code></td>
    </tr>
    <tr>
      <td>宽字符型</td>
      <td><code class="language-plaintext highlighter-rouge">wchar_t</code></td>
    </tr>
  </tbody>
</table>

<p>其中，<code class="language-plaintext highlighter-rouge">wchar_t</code> 是通过 <code class="language-plaintext highlighter-rouge">typedef</code> 定义的：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="kt">short</span> <span class="kt">int</span> <span class="kt">wchar_t</span><span class="p">;</span>
</code></pre></div></div>

<p>所以，<code class="language-plaintext highlighter-rouge">wchar_t</code> 占用的空间和 <code class="language-plaintext highlighter-rouge">short int</code> 一样。</p>

<p>某些基本类型可以使用修饰符进行修饰，如：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">signed</code></li>
  <li><code class="language-plaintext highlighter-rouge">unsigned</code></li>
  <li><code class="language-plaintext highlighter-rouge">short</code></li>
  <li><code class="language-plaintext highlighter-rouge">long</code></li>
</ul>

<h3 id="数据类型的内存占用"><span style="color: rgb(0,191,255);"><strong>数据类型的内存占用</strong></span></h3>

<p>下表显示了不同类型的数据在内存中占用的字节数，以及其对应的最大值和最小值。</p>

<p>注意：不同系统可能会有所不同。通常，1 字节等于 8 位。</p>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>内存（字节）</th>
      <th>范围</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">char</code></td>
      <td>1</td>
      <td>-128 到 127 或 0 到 255</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">unsigned char</code></td>
      <td>1</td>
      <td>0 到 255</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">signed char</code></td>
      <td>1</td>
      <td>-128 到 127</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">int</code></td>
      <td>4</td>
      <td>-2147483648 到 2147483647</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">unsigned int</code></td>
      <td>4</td>
      <td>0 到 4294967295</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">signed int</code></td>
      <td>4</td>
      <td>-2147483648 到 2147483647</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">short int</code></td>
      <td>2</td>
      <td>-32768 到 32767</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">unsigned short int</code></td>
      <td>2</td>
      <td>0 到 65535</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">signed short int</code></td>
      <td>2</td>
      <td>-32768 到 32767</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">long int</code></td>
      <td>8</td>
      <td>-9223372036854775808 到 9223372036854775807</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">signed long int</code></td>
      <td>8</td>
      <td>-9223372036854775808 到 9223372036854775807</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">unsigned long int</code></td>
      <td>8</td>
      <td>0 到 18446744073709551615</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">float</code></td>
      <td>4</td>
      <td>±3.4e ± 38 (~7 位数字)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">double</code></td>
      <td>8</td>
      <td>±1.7e ± 308 (~15 位数字)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">long long</code></td>
      <td>8</td>
      <td>-9223372036854775807 到 9223372036854775807</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">long double</code></td>
      <td>16</td>
      <td>128 位内存空间，提供约 18-19 位有效数字</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">wchar_t</code></td>
      <td>2 或 4</td>
      <td>1 个宽字符</td>
    </tr>
  </tbody>
</table>

<h3 id="系统位数与数据类型大小"><span style="color: rgb(0,191,255);"><strong>系统位数与数据类型大小</strong></span></h3>

<p>各种类型的数据存储大小与系统位数有关，目前大部分系统采用 64 位架构。下表展示了 32 位和 64 位系统下某些数据类型的存储差异（以 Windows 为例）：</p>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>32 位系统</th>
      <th>64 位系统</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">char</code></td>
      <td>1 字节</td>
      <td>1 字节</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">int</code></td>
      <td>4 字节</td>
      <td>4 字节</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">long</code></td>
      <td>4 字节</td>
      <td>8 字节</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">long long</code></td>
      <td>8 字节</td>
      <td>8 字节</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">size_t</code></td>
      <td>4 字节</td>
      <td>8 字节</td>
    </tr>
  </tbody>
</table>

<h4 id="示例程序"><span style="color: rgb(0,191,255);"><strong>示例程序</strong></span></h4>

<p>以下是一个示例程序，输出计算机上各种数据类型的大小和范围。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="c1">  </span><span class="cp">
#include</span> <span class="cpf">&lt;limits&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>  
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>  
<span class="p">{</span>  
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"type: </span><span class="se">\t\t</span><span class="s">"</span> <span class="o">&lt;&lt;</span> <span class="s">"************size**************"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"bool: </span><span class="se">\t\t</span><span class="s">"</span> <span class="o">&lt;&lt;</span> <span class="s">"所占字节数："</span> <span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">bool</span><span class="p">);</span>  
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\t</span><span class="s">最大值："</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;::</span><span class="n">max</span><span class="p">)();</span>  
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\t</span><span class="s">最小值："</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;::</span><span class="n">min</span><span class="p">)()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"char: </span><span class="se">\t\t</span><span class="s">"</span> <span class="o">&lt;&lt;</span> <span class="s">"所占字节数："</span> <span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">);</span>  
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\t</span><span class="s">最大值："</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;::</span><span class="n">max</span><span class="p">)();</span>  
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\t</span><span class="s">最小值："</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;::</span><span class="n">min</span><span class="p">)()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  
    <span class="c1">// 省略其余类型的输出代码...</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>  
<span class="p">}</span>
</code></pre></div></div>

<p>运行此代码时，输出将根据计算机的具体配置有所不同。</p>

<p><span style="color: rgb(153,50,204);"><strong><code class="language-plaintext highlighter-rouge">typedef</code> 声明</strong></span></p>

<p>通过 <code class="language-plaintext highlighter-rouge">typedef</code>，你可以为已有的类型取一个新名字。语法如下：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="n">type</span> <span class="n">newname</span><span class="p">;</span>
</code></pre></div></div>

<p>例如，将 <code class="language-plaintext highlighter-rouge">int</code> 类型重新命名为 <code class="language-plaintext highlighter-rouge">feet</code>：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="kt">int</span> <span class="n">feet</span><span class="p">;</span>
<span class="n">feet</span> <span class="n">distance</span><span class="p">;</span> <span class="c1">// 合法声明</span>
</code></pre></div></div>

<h2 id="枚举类型"><span style="color: rgb(0,191,255);"><strong>枚举类型</strong></span></h2>

<p>枚举（<code class="language-plaintext highlighter-rouge">enum</code>）是 C++ 中的一种派生数据类型，允许你为变量指定一组有限的值。其定义格式如下：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="err">枚举名</span> <span class="p">{</span> <span class="err">标识符</span><span class="p">[</span><span class="o">=</span><span class="err">整型常数</span><span class="p">],</span> <span class="err">标识符</span><span class="p">[</span><span class="o">=</span><span class="err">整型常数</span><span class="p">],</span> <span class="p">...</span> <span class="p">}</span> <span class="err">枚举变量</span><span class="p">;</span>
</code></pre></div></div>

<p>例如，定义一个颜色枚举：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="n">color</span> <span class="p">{</span> <span class="n">red</span><span class="p">,</span> <span class="n">green</span><span class="p">,</span> <span class="n">blue</span> <span class="p">}</span> <span class="n">c</span><span class="p">;</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">blue</span><span class="p">;</span> <span class="c1">// 给变量 c 赋值为 blue</span>
</code></pre></div></div>

<p>默认情况下，<code class="language-plaintext highlighter-rouge">red</code> 的值为 0，<code class="language-plaintext highlighter-rouge">green</code> 为 1，<code class="language-plaintext highlighter-rouge">blue</code> 为 2。如果你想自定义某个值，可以这样做：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="n">color</span> <span class="p">{</span> <span class="n">red</span><span class="p">,</span> <span class="n">green</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">blue</span> <span class="p">};</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">green</code> 的值为 5，而 <code class="language-plaintext highlighter-rouge">blue</code> 的值为 6。</p>

<h2 id="类型转换"><span style="color: rgb(0,191,255);"><strong>类型转换</strong></span></h2>

<p>类型转换是将一个数据类型的值转换为另一种数据类型的值。在 C++ 中，有四种类型转换方式：</p>

<h4 id="1-静态转换static_cast"><span style="color: rgb(32,178,170);"><strong>1. 静态转换（<code class="language-plaintext highlighter-rouge">static_cast</code>）</strong></span></h4>

<p>静态转换用于将相似类型的值转换为另一种类型的值。例如，将 <code class="language-plaintext highlighter-rouge">int</code> 转换为 <code class="language-plaintext highlighter-rouge">float</code>：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span><span class="p">);</span> <span class="c1">// 静态转换</span>
</code></pre></div></div>

<h4 id="2-动态转换dynamic_cast"><span style="color: rgb(32,178,170);"><strong>2. 动态转换（<code class="language-plaintext highlighter-rouge">dynamic_cast</code>）</strong></span></h4>

<p>动态转换通常用于将基类指针或引用转换为派生类指针或引用。它在运行时进行类型检查，若转换失败，返回空指针或抛出异常：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Base</span> <span class="p">{};</span>
<span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span> <span class="p">{};</span>
<span class="n">Base</span><span class="o">*</span> <span class="n">ptr_base</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Derived</span><span class="p">;</span>
<span class="n">Derived</span><span class="o">*</span> <span class="n">ptr_derived</span> <span class="o">=</span> <span class="k">dynamic_cast</span><span class="o">&lt;</span><span class="n">Derived</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">ptr_base</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="3-常量转换const_cast"><span style="color: rgb(32,178,170);"><strong>3. 常量转换（<code class="language-plaintext highlighter-rouge">const_cast</code>）</strong></span></h4>

<p>常量转换用于去除对象的 <code class="language-plaintext highlighter-rouge">const</code> 属性，将 <code class="language-plaintext highlighter-rouge">const</code> 类型的对象转换为非 <code class="language-plaintext highlighter-rouge">const</code> 类型：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kt">int</span><span class="o">&amp;</span> <span class="n">r</span> <span class="o">=</span> <span class="k">const_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="n">i</span><span class="p">);</span> <span class="c1">// 将 const int 转换为 int</span>
</code></pre></div></div>

<h4 id="4-重新解释转换reinterpret_cast"><span style="color: rgb(32,178,170);"><strong>4. 重新解释转换（<code class="language-plaintext highlighter-rouge">reinterpret_cast</code>）</strong></span></h4>

<p>重新解释转换用于将一个数据类型的值强制转换为另一个数据类型的值。此转换通常没有任何类型检查，因此可能会导致未定义行为：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="n">i</span><span class="p">);</span> <span class="c1">// 强制将 int 转换为 float</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[基本内置类型]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-2.png" /><media:content medium="image" url="http://localhost:4000/code-cover-2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">语法&amp;amp;介绍</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/03/Grammar&Intro/" rel="alternate" type="text/html" title="语法&amp;amp;介绍" /><published>2025-01-03T00:00:00-08:00</published><updated>2025-01-03T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/03/Grammar&amp;Intro</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/03/Grammar&amp;Intro/"><![CDATA[<h3 id="1-基本结构"><span style="color: rgb(0,191,255);">1. <strong>基本结构</strong></span></h3>

<p>一个简单的 C++ 程序结构如下：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="c1">  // 引入标准输入输出库</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>  <span class="c1">// 使用标准命名空间</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>  <span class="c1">// 主函数</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello, World!"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// 输出内容</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">// 返回值</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="2-数据类型"><span style="color: rgb(0,191,255);">2. <strong>数据类型</strong></span></h3>

<p>C++ 提供了多种基本数据类型：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">int</code>：整数类型</li>
  <li><code class="language-plaintext highlighter-rouge">float</code>：单精度浮点数</li>
  <li><code class="language-plaintext highlighter-rouge">double</code>：双精度浮点数</li>
  <li><code class="language-plaintext highlighter-rouge">char</code>：字符类型</li>
  <li><code class="language-plaintext highlighter-rouge">bool</code>：布尔类型（<code class="language-plaintext highlighter-rouge">true</code> 或 <code class="language-plaintext highlighter-rouge">false</code>）</li>
  <li><code class="language-plaintext highlighter-rouge">void</code>：无类型</li>
</ul>

<h3 id="3-变量声明"><span style="color: rgb(0,191,255);">3. <strong>变量声明</strong></span></h3>

<p>变量在使用之前需要声明，可以指定初始值：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">b</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>
<span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">'A'</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="4-控制结构"><span style="color: rgb(0,191,255);">4. <strong>控制结构</strong></span></h3>

<ul>
  <li>
    <p><strong>条件语句</strong>：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a is greater than b"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span> 
<span class="k">else</span> 
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"b is greater than or equal to a"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>循环语句</strong>：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// for 循环</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// while 循环</span>
<span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">j</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">j</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// do-while 循环</span>
<span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">do</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">k</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">k</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="5-函数"><span style="color: rgb(0,191,255);">5. <strong>函数</strong></span></h3>

<p>函数用于封装代码块，方便复用：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Sum is: "</span> <span class="o">&lt;&lt;</span> <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="6-数组"><span style="color: rgb(0,191,255);">6. <strong>数组</strong></span></h3>

<p>数组用于存储多个相同类型的元素：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>  <span class="c1">// 输出数组的第一个元素</span>
</code></pre></div></div>

<h3 id="7-指针"><span style="color: rgb(0,191,255);">7. <strong>指针</strong></span></h3>

<p>指针存储变量的内存地址：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kt">int</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>  <span class="c1">// 指针 ptr 存储 a 的地址</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>  <span class="c1">// 解引用，输出 a 的值</span>
</code></pre></div></div>

<h3 id="8-面向对象"><span style="color: rgb(0,191,255);">8. <strong>面向对象</strong></span></h3>

<p>C++ 支持面向对象编程，基本概念包括类、对象、继承、封装和多态。</p>

<ul>
  <li>类和对象：
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Car</span> 
<span class="p">{</span>
	<span class="nl">public:</span>
    <span class="n">string</span> <span class="n">model</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">year</span><span class="p">;</span>
    <span class="kt">void</span> <span class="n">display</span><span class="p">()</span> 
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Model: "</span> <span class="o">&lt;&lt;</span> <span class="n">model</span> <span class="o">&lt;&lt;</span> <span class="s">", Year: "</span> <span class="o">&lt;&lt;</span> <span class="n">year</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="n">Car</span> <span class="n">myCar</span><span class="p">;</span>
    <span class="n">myCar</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="s">"Toyota"</span><span class="p">;</span>
    <span class="n">myCar</span><span class="p">.</span><span class="n">year</span> <span class="o">=</span> <span class="mi">2020</span><span class="p">;</span>
    <span class="n">myCar</span><span class="p">.</span><span class="n">display</span><span class="p">();</span>  <span class="c1">// 输出：Model: Toyota, Year: 2020</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="9-输入输出"><span style="color: rgb(0,191,255);">9. <strong>输入输出</strong></span></h3>

<ul>
  <li>标准输入输出：
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Enter a number: "</span><span class="p">;</span>
<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"You entered: "</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="10-常量"><span style="color: rgb(0,191,255);">10. <strong>常量</strong></span></h3>

<p>常量是不可改变的变量，使用 <code class="language-plaintext highlighter-rouge">const</code> 关键字声明：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">float</span> <span class="n">PI</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="11-命名空间"><span style="color: rgb(0,191,255);">11. <strong>命名空间</strong></span></h3>

<p>C++ 使用命名空间来避免名称冲突，常见的是 <code class="language-plaintext highlighter-rouge">std</code>（标准命名空间）：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[1. 基本结构]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-3.png" /><media:content medium="image" url="http://localhost:4000/code-cover-3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">C++ 关键字（保留字）介绍</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/03/Introduction-to-C++-Reserved-Words/" rel="alternate" type="text/html" title="C++ 关键字（保留字）介绍" /><published>2025-01-03T00:00:00-08:00</published><updated>2025-01-03T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/03/Introduction%20to%20C++%20Reserved%20Words</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/03/Introduction-to-C++-Reserved-Words/"><![CDATA[<h2 id="c-关键字保留字介绍"><span style="color: rgb(0,191,255);"><strong>C++ 关键字（保留字）介绍</strong></span></h2>

<p>C++ 中的关键字（也称为保留字）是语言的预定义元素，它们已被编译器和运行环境为特定功能保留。这些关键字不能被用作为变量名或其他自定义元素。下面将全面介绍这些关键字：</p>

<table>
  <thead>
    <tr>
      <th>asm</th>
      <th>auto</th>
      <th>bool</th>
      <th>break</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>case</td>
      <td>catch</td>
      <td>char</td>
      <td>class</td>
    </tr>
    <tr>
      <td>const</td>
      <td>const_cast</td>
      <td>continue</td>
      <td>default</td>
    </tr>
    <tr>
      <td>delete</td>
      <td>do</td>
      <td>double</td>
      <td>dynamic_cast</td>
    </tr>
    <tr>
      <td>else</td>
      <td>enum</td>
      <td>explicit</td>
      <td>export</td>
    </tr>
    <tr>
      <td>extern</td>
      <td>false</td>
      <td>float</td>
      <td>for</td>
    </tr>
    <tr>
      <td>friend</td>
      <td>goto</td>
      <td>if</td>
      <td>inline</td>
    </tr>
    <tr>
      <td>int</td>
      <td>long</td>
      <td>mutable</td>
      <td>namespace</td>
    </tr>
    <tr>
      <td>new</td>
      <td>operator</td>
      <td>private</td>
      <td>protected</td>
    </tr>
    <tr>
      <td>public</td>
      <td>register</td>
      <td>reinterpret_cast</td>
      <td>return</td>
    </tr>
    <tr>
      <td>short</td>
      <td>signed</td>
      <td>sizeof</td>
      <td>static</td>
    </tr>
    <tr>
      <td>static_cast</td>
      <td>struct</td>
      <td>switch</td>
      <td>template</td>
    </tr>
    <tr>
      <td>this</td>
      <td>throw</td>
      <td>true</td>
      <td>try</td>
    </tr>
    <tr>
      <td>typedef</td>
      <td>typeid</td>
      <td>typename</td>
      <td>union</td>
    </tr>
    <tr>
      <td>unsigned</td>
      <td>using</td>
      <td>virtual</td>
      <td>void</td>
    </tr>
    <tr>
      <td>volatile</td>
      <td>wchar_t</td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h2 id="详细介绍"><span style="color: rgb(0,191,255);"><strong>详细介绍</strong></span></h2>

<h3 id="1-asm"><span style="color: rgb(32,178,170);"><strong>1. asm</strong></span></h3>

<p>允许在 C++ 程序中嵌入汇编代码。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">asm</span><span class="p">(</span><span class="s">"movl %0, %%eax"</span> <span class="o">:</span> <span class="s">"=r"</span><span class="p">(</span><span class="n">result</span><span class="p">));</span>
</code></pre></div></div>

<h3 id="2-auto"><span style="color: rgb(32,178,170);"><strong>2. auto</strong></span></h3>

<p>标示自动型别，表示变量自动具有本地范围。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// 自动推断 x 为 int 类型</span>
</code></pre></div></div>

<h3 id="3-bool"><span style="color: rgb(32,178,170);"><strong>3. bool</strong></span></h3>

<p>基础数据类型，值为 <code class="language-plaintext highlighter-rouge">true</code> 或 <code class="language-plaintext highlighter-rouge">false</code>，通常用于条件判断。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="n">isReady</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">isReady</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="c1">// 执行某些操作</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="4-break"><span style="color: rgb(32,178,170);"><strong>4. break</strong></span></h3>

<p>在 <code class="language-plaintext highlighter-rouge">switch</code> 或循环中使用，用于中断并跳出循环。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">5</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="5-case"><span style="color: rgb(32,178,170);"><strong>5. case</strong></span></h3>

<p>使用于 <code class="language-plaintext highlighter-rouge">switch</code> 语句，用于判断分支条件。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span> <span class="p">(</span><span class="n">value</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
        <span class="c1">// 操作</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="nl">default:</span>
        <span class="c1">// 默认操作</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="6-catch"><span style="color: rgb(32,178,170);"><strong>6. catch</strong></span></h3>

<p>配合 <code class="language-plaintext highlighter-rouge">try</code> 语句，用于异常处理。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="mi">42</span><span class="p">;</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="kt">int</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Caught exception: "</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="7-char"><span style="color: rgb(32,178,170);"><strong>7. char</strong></span></h3>

<p>基础数据类型，表示单个字符，值通常为 0~255。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">'A'</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="8-class"><span style="color: rgb(32,178,170);"><strong>8. class</strong></span></h3>

<p>面向对象编程的基础，用于声明类。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
<span class="nl">public:</span>
    <span class="n">MyClass</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="o">:</span> <span class="n">value</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="9-const"><span style="color: rgb(32,178,170);"><strong>9. const</strong></span></h3>

<p>保护变量不被修改，可以用于声明常量。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">int</span> <span class="n">maxSize</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="10-const_cast"><span style="color: rgb(32,178,170);"><strong>10. const_cast</strong></span></h3>

<p>修改型的 <code class="language-plaintext highlighter-rouge">const</code> 或 <code class="language-plaintext highlighter-rouge">volatile</code> 属性，用于将常量指针转换为非常量指针。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kt">int</span><span class="o">*</span> <span class="n">b</span> <span class="o">=</span> <span class="k">const_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">*&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="11-continue"><span style="color: rgb(32,178,170);"><strong>11. continue</strong></span></h3>

<p>跳过本次循环的余下部分，并进入下一次循环。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="12-default"><span style="color: rgb(32,178,170);"><strong>12. default</strong></span></h3>

<p>在 <code class="language-plaintext highlighter-rouge">switch</code> 语句中，用于处理所有不满足条件的情况。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span> <span class="p">(</span><span class="n">value</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
        <span class="c1">// 操作</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="nl">default:</span>
        <span class="c1">// 默认操作</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="13-delete"><span style="color: rgb(32,178,170);"><strong>13. delete</strong></span></h3>

<p>释放通过 <code class="language-plaintext highlighter-rouge">new</code> 实例化的内存。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">int</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
<span class="k">delete</span> <span class="n">p</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="14-do"><span style="color: rgb(32,178,170);"><strong>14. do</strong></span></h3>

<p>配合 <code class="language-plaintext highlighter-rouge">while</code> 语句，保证至少执行一次循环体。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">do</span> 
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Running"</span><span class="p">;</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="nb">false</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="15-double"><span style="color: rgb(32,178,170);"><strong>15. double</strong></span></h3>

<p>基础数据类型，表示双精度浮点数。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="16-dynamic_cast"><span style="color: rgb(32,178,170);"><strong>16. dynamic_cast</strong></span></h3>

<p>让运行时进行类型转换，通常用于基类和泛生类间的安全转换。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Base</span><span class="o">*</span> <span class="n">base</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Derived</span><span class="p">();</span>
<span class="n">Derived</span><span class="o">*</span> <span class="n">derived</span> <span class="o">=</span> <span class="k">dynamic_cast</span><span class="o">&lt;</span><span class="n">Derived</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">base</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="17-else"><span style="color: rgb(32,178,170);"><strong>17. else</strong></span></h3>

<p>应对于 <code class="language-plaintext highlighter-rouge">if</code>，对不满足条件的分支执行。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Greater"</span><span class="p">;</span>
<span class="p">}</span> 
<span class="k">else</span> 
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Smaller or equal"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="18-enum"><span style="color: rgb(32,178,170);"><strong>18. enum</strong></span></h3>

<p>声明枚举类型，实现一组固定值的选择。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="n">Color</span> <span class="p">{</span> <span class="n">RED</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">BLUE</span> <span class="p">};</span>
<span class="n">Color</span> <span class="n">myColor</span> <span class="o">=</span> <span class="n">RED</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="19-explicit"><span style="color: rgb(32,178,170);"><strong>19. explicit</strong></span></h3>

<p>禁止单参数构造函数自动进行类型转换。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span> 
<span class="p">{</span>
    <span class="k">explicit</span> <span class="n">MyClass</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="20-export"><span style="color: rgb(32,178,170);"><strong>20. export</strong></span></h3>

<p>用于模板的跨单元定义。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="n">T</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 模板实现</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="21-extern"><span style="color: rgb(32,178,170);"><strong>21. extern</strong></span></h3>

<p>声明外部变量或函数，在其他文件中可见。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">globalVar</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="22-false"><span style="color: rgb(32,178,170);"><strong>22. false</strong></span></h3>

<p>基础数据类型 bool 的值之一，等价于整数值 <code class="language-plaintext highlighter-rouge">0</code>。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="n">isReady</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="23-float"><span style="color: rgb(32,178,170);"><strong>23. float</strong></span></h3>

<p>基础数据类型，表示浮点数，精度低于 <code class="language-plaintext highlighter-rouge">double</code>。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">float</span> <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14</span><span class="n">f</span><span class="p">;</span>  
</code></pre></div></div>

<h3 id="24-for"><span style="color: rgb(32,178,170);"><strong>24. for</strong></span></h3>

<p>循环结构之一，用于自动计数循环。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>  
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>  
<span class="p">}</span>  
</code></pre></div></div>

<h3 id="25-friend"><span style="color: rgb(32,178,170);"><strong>25. friend</strong></span></h3>

<p>声明友元关系，允许友元访问类中的私有和受保护成员。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>  
<span class="nl">private:</span>  
    <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>  
<span class="nl">public:</span>  
    <span class="k">friend</span> <span class="kt">void</span> <span class="n">showValue</span><span class="p">(</span><span class="n">MyClass</span> <span class="n">obj</span><span class="p">);</span>  
<span class="p">};</span>  

<span class="kt">void</span> <span class="nf">showValue</span><span class="p">(</span><span class="n">MyClass</span> <span class="n">obj</span><span class="p">)</span> 
<span class="p">{</span>  
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">obj</span><span class="p">.</span><span class="n">value</span><span class="p">;</span>  
<span class="p">}</span>  
</code></pre></div></div>

<h3 id="26-goto"><span style="color: rgb(32,178,170);"><strong>26. goto</strong></span></h3>

<p>实现无条件跳转。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  
<span class="n">start</span><span class="o">:</span>  
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>  
<span class="n">i</span><span class="o">++</span><span class="p">;</span>  
<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="k">goto</span> <span class="n">start</span><span class="p">;</span>  
</code></pre></div></div>

<h3 id="27-if"><span style="color: rgb(32,178,170);"><strong>27. if</strong></span></h3>

<p>条件判断语句，根据布尔值决定分支执行。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span> 
<span class="p">{</span>  
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Greater"</span><span class="p">;</span>  
<span class="p">}</span>  
</code></pre></div></div>

<h3 id="28-inline"><span style="color: rgb(32,178,170);"><strong>28. inline</strong></span></h3>

<p>定义内联函数，提高程序效率。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">inline</span> <span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> 
<span class="p">{</span>  
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>  
<span class="p">}</span>  
</code></pre></div></div>

<h3 id="29-int"><span style="color: rgb(32,178,170);"><strong>29. int</strong></span></h3>

<p>基础数据类型，表示整数。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>  
</code></pre></div></div>

<h3 id="30-long"><span style="color: rgb(32,178,170);"><strong>30. long</strong></span></h3>

<p>基础数据类型，表示长整型。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="n">distance</span> <span class="o">=</span> <span class="mi">100000L</span><span class="p">;</span>  
</code></pre></div></div>

<h3 id="31-mutable"><span style="color: rgb(32,178,170);"><strong>31. mutable</strong></span></h3>

<p>允许在 <code class="language-plaintext highlighter-rouge">const</code> 函数中修改成员变量。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>  
    <span class="k">mutable</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>  
<span class="nl">public:</span>  
    <span class="kt">void</span> <span class="n">increment</span><span class="p">()</span> <span class="k">const</span> 
    <span class="p">{</span>  
        <span class="n">count</span><span class="o">++</span><span class="p">;</span>  
    <span class="p">}</span>  
<span class="p">};</span>  
</code></pre></div></div>

<h3 id="32-namespace"><span style="color: rgb(32,178,170);"><strong>32. namespace</strong></span></h3>

<p>用于逻辑组织代码，避免名称冲突。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="n">MyNamespace</span> 
<span class="p">{</span>  
    <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>  
<span class="p">}</span>  
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">MyNamespace</span><span class="o">::</span><span class="n">value</span><span class="p">;</span>  
</code></pre></div></div>

<h3 id="33-new"><span style="color: rgb(32,178,170);"><strong>33. new</strong></span></h3>

<p>在堆上分配动态内存。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">int</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>  
</code></pre></div></div>

<h3 id="34-operator"><span style="color: rgb(32,178,170);"><strong>34. operator</strong></span></h3>

<p>用于操作符重载。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>  
<span class="nl">public:</span>  
    <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>  
    <span class="n">MyClass</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="o">:</span> <span class="n">value</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="p">{}</span>  
    <span class="n">MyClass</span> <span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="k">const</span> <span class="n">MyClass</span><span class="o">&amp;</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>  
        <span class="k">return</span> <span class="n">MyClass</span><span class="p">(</span><span class="n">value</span> <span class="o">+</span> <span class="n">obj</span><span class="p">.</span><span class="n">value</span><span class="p">);</span>  
    <span class="p">}</span>  
<span class="p">};</span>  
</code></pre></div></div>

<h3 id="35-private"><span style="color: rgb(32,178,170);"><strong>35. private</strong></span></h3>

<p>访问控制符，表示私有成员。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>  
<span class="nl">private:</span>  
    <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>  
<span class="p">};</span>  
</code></pre></div></div>

<h3 id="36-protected"><span style="color: rgb(32,178,170);"><strong>36. protected</strong></span></h3>

<p>访问控制符，表示受保护成员。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Base</span> <span class="p">{</span>  
<span class="nl">protected:</span>  
    <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>  
<span class="p">};</span>  
</code></pre></div></div>

<h3 id="37-public"><span style="color: rgb(32,178,170);"><strong>37. public</strong></span></h3>

<p>访问控制符，表示公共成员。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>  
<span class="nl">public:</span>  
    <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>  
<span class="p">};</span>  
</code></pre></div></div>

<h3 id="38-register"><span style="color: rgb(32,178,170);"><strong>38. register</strong></span></h3>

<p>提示编译器将变量存储在寄存器中。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">register</span> <span class="kt">int</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  
</code></pre></div></div>

<h3 id="39-reinterpret_cast"><span style="color: rgb(32,178,170);"><strong>39. reinterpret_cast</strong></span></h3>

<p>进行类型转换，如指针与整数之间转换。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>  
<span class="kt">int</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">*&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">);</span>  
</code></pre></div></div>

<h3 id="40-return"><span style="color: rgb(32,178,170);"><strong>40. return</strong></span></h3>

<p>用于函数中返回值，并结束函数执行。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">getValue</span><span class="p">()</span> 
<span class="p">{</span>  
    <span class="k">return</span> <span class="mi">10</span><span class="p">;</span>  
<span class="p">}</span>  
</code></pre></div></div>

<h3 id="41-short"><span style="color: rgb(32,178,170);"><strong>41. short</strong></span></h3>

<p>基础数据类型，表示短整型。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">short</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>  
</code></pre></div></div>

<h3 id="42-signed"><span style="color: rgb(32,178,170);"><strong>42. signed</strong></span></h3>

<p>显式声明有符号数据类型。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">signed</span> <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="o">-</span><span class="mi">10</span><span class="p">;</span>  
</code></pre></div></div>

<h3 id="43-sizeof"><span style="color: rgb(32,178,170);"><strong>43. sizeof</strong></span></h3>

<p>获取类型或变量占用的内存大小。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>  
</code></pre></div></div>

<h3 id="44-static"><span style="color: rgb(32,178,170);"><strong>44. static</strong></span></h3>

<p>用于声明静态变量或静态成员函数。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>  
    <span class="k">static</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>  
<span class="p">};</span>  
</code></pre></div></div>

<h3 id="45-static_cast"><span style="color: rgb(32,178,170);"><strong>45. static_cast</strong></span></h3>

<p>进行安全的显式类型转换。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">3.14</span><span class="n">f</span><span class="p">;</span>  
<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>  
</code></pre></div></div>

<h3 id="46-struct"><span style="color: rgb(32,178,170);"><strong>46. struct</strong></span></h3>

<p>定义结构体类型。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">Point</span> 
<span class="p">{</span>  
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>  
<span class="p">};</span>  
</code></pre></div></div>

<h3 id="47-switch"><span style="color: rgb(32,178,170);"><strong>47. switch</strong></span></h3>

<p>用于多分支选择语句。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span> <span class="p">(</span><span class="n">value</span><span class="p">)</span> 
<span class="p">{</span>  
    <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>  
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"One"</span><span class="p">;</span>  
        <span class="k">break</span><span class="p">;</span>  
    <span class="nl">default:</span>  
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Other"</span><span class="p">;</span>  
<span class="p">}</span>  
</code></pre></div></div>

<h3 id="48-template"><span style="color: rgb(32,178,170);"><strong>48. template</strong></span></h3>

<p>实现模板编程机制。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>  
<span class="n">T</span> <span class="nf">add</span><span class="p">(</span><span class="n">T</span> <span class="n">a</span><span class="p">,</span> <span class="n">T</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>  
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>  
<span class="p">}</span>  
</code></pre></div></div>

<h3 id="49-this"><span style="color: rgb(32,178,170);"><strong>49. this</strong></span></h3>

<p>返回当前对象的指针。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>  
<span class="nl">public:</span>  
    <span class="n">MyClass</span><span class="o">*</span> <span class="n">getPointer</span><span class="p">()</span> <span class="p">{</span>  
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>  
    <span class="p">}</span>  
<span class="p">};</span>  
</code></pre></div></div>

<h3 id="50-throw"><span style="color: rgb(32,178,170);"><strong>50. throw</strong></span></h3>

<p>用于抛出异常。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">"Error occurred"</span><span class="p">);</span>  
</code></pre></div></div>

<h3 id="51-true"><span style="color: rgb(32,178,170);"><strong>51. true</strong></span></h3>

<p>布尔类型值，等价于非零整数值。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="n">isReady</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>  
</code></pre></div></div>

<h3 id="52-try"><span style="color: rgb(32,178,170);"><strong>52. try</strong></span></h3>

<p>与 <code class="language-plaintext highlighter-rouge">catch</code> 搭配实现异常处理。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="p">{</span>  
    <span class="k">throw</span> <span class="mi">42</span><span class="p">;</span>  
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="kt">int</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>  
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">;</span>  
<span class="p">}</span>  
</code></pre></div></div>

<h3 id="53-typedef"><span style="color: rgb(32,178,170);"><strong>53. typedef</strong></span></h3>

<p>为数据类型定义新名称。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">uint</span><span class="p">;</span>  
</code></pre></div></div>

<h3 id="54-typeid"><span style="color: rgb(32,178,170);"><strong>54. typeid</strong></span></h3>

<p>获取对象的实际类型信息。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">typeid</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="n">name</span><span class="p">();</span>  
</code></pre></div></div>

<h3 id="55-typename"><span style="color: rgb(32,178,170);"><strong>55. typename</strong></span></h3>

<p>用于声明模板中嵌套类型。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>  
<span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span> <span class="nf">func</span><span class="p">();</span>  
</code></pre></div></div>

<h3 id="56-union"><span style="color: rgb(32,178,170);"><strong>56. union</strong></span></h3>

<p>定义联合体，共享内存空间。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">union</span> <span class="n">Data</span> <span class="p">{</span>  
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>  
    <span class="kt">float</span> <span class="n">f</span><span class="p">;</span>  
<span class="p">};</span>  
</code></pre></div></div>

<h3 id="57-unsigned"><span style="color: rgb(32,178,170);"><strong>57. unsigned</strong></span></h3>

<p>显式声明无符号数据类型。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>  
</code></pre></div></div>

<h3 id="58-using"><span style="color: rgb(32,178,170);"><strong>58. using</strong></span></h3>

<p>声明使用命名空间或定义别名。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>  
</code></pre></div></div>

<h3 id="59-virtual"><span style="color: rgb(32,178,170);"><strong>59. virtual</strong></span></h3>

<p>用于声明虚函数，实现多态。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Base</span> <span class="p">{</span>  
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">func</span><span class="p">();</span>  
<span class="p">};</span>  
</code></pre></div></div>

<h3 id="60-void"><span style="color: rgb(32,178,170);"><strong>60. void</strong></span></h3>

<p>表示无返回值或无类型。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">func</span><span class="p">()</span> <span class="p">{}</span>  
</code></pre></div></div>

<h3 id="61-volatile"><span style="color: rgb(32,178,170);"><strong>61. volatile</strong></span></h3>

<p>声明变量可能被外部修改。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">volatile</span> <span class="kt">int</span> <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>  
</code></pre></div></div>

<h3 id="62-wchar_t"><span style="color: rgb(32,178,170);"><strong>62. wchar_t</strong></span></h3>

<p>表示宽字符类型。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">wchar_t</span> <span class="n">ch</span> <span class="o">=</span> <span class="sc">L'A'</span><span class="p">;</span>  
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[C++ 关键字（保留字）介绍]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-4.png" /><media:content medium="image" url="http://localhost:4000/code-cover-4.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">算法学习顺序</title><link href="http://localhost:4000/code/algorithm/2025/01/01/README/" rel="alternate" type="text/html" title="算法学习顺序" /><published>2025-01-01T00:00:00-08:00</published><updated>2025-01-01T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/2025/01/01/README</id><content type="html" xml:base="http://localhost:4000/code/algorithm/2025/01/01/README/"><![CDATA[<p><strong>基础知识</strong></p>

<ul>
  <li>学习C++语言基础：语法、指针、引用、类与对象。</li>
  <li>掌握STL（标准模板库）：vector、list、set、map等容器，算法模块。</li>
</ul>

<p><strong>数学基础</strong></p>

<ul>
  <li>数学基础：素数、最大公约数、最小公倍数、快速幂。</li>
  <li>数学算法：筛法求素数、数论分解、组合数学。</li>
</ul>

<p><strong>排序与搜索</strong></p>

<ul>
  <li>排序算法：冒泡、选择、插入、归并、快速排序、堆排序。</li>
  <li>搜索算法：二分查找、DFS（深度优先搜索）、BFS（广度优先搜索）。</li>
</ul>

<p><strong>基础数据结构</strong></p>

<ul>
  <li>线性结构：数组、链表、栈、队列、双端队列。</li>
  <li>树：二叉树、二叉搜索树、堆。</li>
  <li>图：邻接矩阵、邻接表、遍历（DFS、BFS）。</li>
</ul>

<p><strong>高级数据结构</strong></p>

<ul>
  <li>并查集。</li>
  <li>树状数组。</li>
  <li>线段树。</li>
  <li>Trie（字典树）。</li>
  <li>图的高级算法：最短路径（Dijkstra、Floyd、Bellman-Ford）、最小生成树（Prim、Kruskal）。</li>
</ul>

<p><strong>算法设计思想</strong></p>

<ul>
  <li>分治法。</li>
  <li>动态规划（DP）：背包问题、LCS（最长公共子序列）、LIS（最长递增子序列）。</li>
  <li>贪心算法。</li>
  <li>回溯法。</li>
  <li>枚举法。</li>
</ul>

<p><strong>图论与网络流</strong></p>

<ul>
  <li>图的基本算法。</li>
  <li>拓扑排序。</li>
  <li>网络流：最大流（Edmonds-Karp、Dinic）、最小割。</li>
</ul>

<p><strong>高级算法</strong></p>

<ul>
  <li>字符串处理：KMP算法、Rabin-Karp、Trie。</li>
  <li>位运算技巧。</li>
  <li>数学问题：快速傅里叶变换（FFT）、线性代数相关算法。</li>
  <li>随机化算法与模拟退火。</li>
</ul>]]></content><author><name>ZJM</name></author><category term="code/algorithm" /><category term="Code" /><summary type="html"><![CDATA[基础知识]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/algorithm-cover-1.png" /><media:content medium="image" url="http://localhost:4000/algorithm-cover-1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Algorithm</title><link href="http://localhost:4000/code/2025/01/01/algorithm/" rel="alternate" type="text/html" title="Algorithm" /><published>2025-01-01T00:00:00-08:00</published><updated>2025-01-01T00:00:00-08:00</updated><id>http://localhost:4000/code/2025/01/01/algorithm</id><content type="html" xml:base="http://localhost:4000/code/2025/01/01/algorithm/"><![CDATA[<meta http-equiv="refresh" content="0; url=/code/algorithm" />

<p>If you are not redirected, <a href="/code/algorithm">click here</a>.</p>]]></content><author><name>ZJM</name></author><category term="code" /><category term="Code" /><summary type="html"><![CDATA[If you are not redirected, click here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/algorithm-cover.png" /><media:content medium="image" url="http://localhost:4000/algorithm-cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">浅谈最小生成树</title><link href="http://localhost:4000/code/algorithm/2025/01/01/minimum-spanning-tree/" rel="alternate" type="text/html" title="浅谈最小生成树" /><published>2025-01-01T00:00:00-08:00</published><updated>2025-01-01T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/2025/01/01/minimum-spanning-tree</id><content type="html" xml:base="http://localhost:4000/code/algorithm/2025/01/01/minimum-spanning-tree/"><![CDATA[<h2 id="浅谈最小生成树">浅谈最小生成树</h2>

<h4 id="事先声明这篇文章只能给初学者稍加学习仅供参考本文主讲算法而不是代码">事先声明：这篇文章只能给初学者稍加学习，仅供参考。本文主讲算法而不是代码。</h4>

<p># 浅谈最小生成树</p>

<h2 id="一什么是最小生成树">一.什么是最小生成树</h2>

<p>首先我们得给出一张图：</p>

<p>假设我们常常去这几个地方。(<del>地图上随便找的几个点</del>)</p>

<p>想象一下：自己是奇异博士的弱化版。</p>

<p>这些地方之间肯定两两之间都会有传送门。</p>

<p>假设在这几个点有传送门，可以传到几个固定的位置，但会有不同的费用。</p>

<p>虽然我们会有很多种选择路的方式，但是我们希望选择的路的<strong>费用之和</strong>最小，且通过这些路能从<strong>任意一个地方到达另外一个地方</strong>。</p>

<p>于是求这个<strong>最短长度(费用)的方法和方案</strong>就是我们今天的主题： <strong>最小生成树</strong>。</p>

<h2 id="二最小生成树两大算法">二.最小生成树两大算法</h2>
<h3 id="ⅰ前序知识">Ⅰ.前序知识</h3>

<p>1.最小生成树的<strong>定义</strong>：在一个带权的物向连通图中，各边权和最小的一棵生成树即为原图的最小生成树。</p>

<p><strong>***：</strong>生成树**：如果连通图 G的一个子图是一棵包含G 的所有顶点的树，则该子图称为G的生成树</p>

<p>2.(1)生成树的属性(特性):</p>

<table>
  <tbody>
    <tr>
      <td>假设有</td>
      <td>V</td>
      <td>个点</td>
    </tr>
  </tbody>
</table>

<p>①无环</p>

<p>②连通</p>

<p>③从任意一点到另一点有唯一路径(不然可以把多余的边删掉)</p>

<p>④删去一条边后则不连通(理由同上)</p>

<table>
  <tbody>
    <tr>
      <td>⑤有</td>
      <td>V</td>
      <td>-1条边(由③④得出)</td>
    </tr>
  </tbody>
</table>

<p>(2)最小生成树的<strong>独特特性</strong></p>

<p>①<strong>最小边原则：如果图中最小的边是唯一的话，一定在最小生成树上。</strong></p>

<p><strong>证明</strong>：由于最小生成树只需|V|-1条边，所以当得到了一棵生成树时，若不包含最短的边，便可将以选好的边中删去一条连接最短边上两点中的一点与其它点的边，则最短边上选取的那点便与其它点不连通，再连上最短的边，又联通了，且因为连接
的边是最短边，所以边权之和一定比原边权之和小。</p>

<p>②唯一性定理：如果图中的边权值都不同，则图中的最小生成树是唯一的。</p>

<p>证明：当此生成树所连的边之和最小时，因为边权值各不相同，所以将另一边来替代此生成树中的一边，会有两种情况：1.一个边权更大的生成树； 2.各点不连通了
	均不符合最小生成树定义。</p>

<h3 id="ⅱprim算法">Ⅱ.Prim算法</h3>

<p>Prim算法(Robert C. Prim)是一种贪心算法，它的方法是将所有点分成两部分。用过的和没用过的(已在生成树内的和不在的)</p>

<p>①步骤：它先是任意选择一个点，以这个点作为出发点。</p>

<p>再向四周扩展，找到与这个点连接的点中最近的那个，连接边。</p>

<p>下一步是寻找与已联通的树最近的未使用(不在生成树内)的点并将边连接，此点标记为使用过(已在生成树中)。</p>

<p>重复上一步操作直到所有点都在使用过部分(都用过了，连通了)。</p>

<p>(图)</p>

<p>②证明:假设当前已使用的点集为n,剩下的点集为m。</p>

<p>设连接n和m的最小代价为(x,y)</p>

<p>若取的是连接n,m的另外一边(P,Q),则删去(P,Q),加入(x,y),n和m也一定是连通的，且连(x,y)的话得到的当前边权和会更小，更优。所以连最小边(x,y)是保证能得到最小生成树的。算法正确。</p>

<p>③代码实现(核心)(c++)(仅供参考):</p>

<p>复杂度：O(N^2) 过于缓慢，容易被卡(第一个N为枚举各个点，第二个N为寻找最短的边)</p>

<p>④优化:</p>

<p>怎样优化?</p>

<p>第一层是无法优化的,只能靠第二层了。</p>

<p>优化目的:快速找到权值最小的边。</p>

<p>优化方法:借助于堆排序。</p>

<p>用堆来保存用过的点到没用过的点得最短边长，在访问时不断更新和维护。</p>

<p>优化效果:找权值最小的边：O(logm)</p>

<p>总复杂度:O((n+m)logm)</p>

<p>代码实现(核心):</p>

<h2 id="ⅲkruskal算法">Ⅲ.Kruskal算法</h2>

<p>Kruskal算法还是一种贪心算法，它的方法是将所有的边按长度从小到大排序，从最小的边开始，若边连接的两点不连通，则连接这条边，否则就不连。</p>

<p>①步骤:首先，将所有边按权值进行排序。</p>

<p>按照权值从小到大选边。如果当前选的边的两点不连通，就连接这条边。否则就不连接。</p>

<p>直到所有边都被枚举一遍。</p>

<p>②证明:从小到大的枚举边时,保证了生成树的最小性。</p>

<p>如果有一条边,由它构成的生成树比Kruskal算法的生成树的权值和更小，那么它肯定用到了比算法更短的边(可能多条),但由于Kruskal在枚举边前已经将所有的边排了序,故比算法得到生成树更短的边会排在前面而被选中或排除，故不可能有这样的边，算法的生成树肯定是最小生成树。判断两点是否连通就保证了最小生成树中无环，肯定是正确的。</p>

<p>③优化：这个方法不优化实在太慢了，判断是否连通如果用暴力的话将无法想象，k肯定TLE</p>

<p>于是我们用并查集来判断是否连通。</p>

<p>只需要用模板并查集就可以了。</p>

<p>(因为本章主讲最小生成树，并查集的内容可以通过前期的模板进行学习)</p>

<p>核心代码：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;string&gt;
#include&lt;cstdio&gt;
#include&lt;cstdlib&gt;
#include&lt;algorithm&gt;
#include&lt;cmath&gt;
#define For(k,i,j) for(int k=i;k&lt;=j;k++)
using namespace std;
inline int read()
{
    char ch;
    int res=1;
    while((ch=getchar())&lt;'0'||ch&gt;'9') if(ch=='-') res=-1;
    res*=ch-48;
    while((ch=getchar())&gt;='0'&amp;&amp;ch&lt;='9')
        res=res*10+ch-48;
    return res;
}
struct point
{
	int x,y,d;
};
point a[200005];
int fa[5001];
int find(int x)
{
	if(fa[x]==x)
		return x;
	else
		return fa[x]=find(fa[x]);
}
bool cmp(point f,point g)
{
	return f.d&lt;g.d;
}
int main()
{
    int n=read(),m=read(),k,ans=0;
    For(i,1,n)
		fa[i]=i;
    For(i,1,m)
    	a[i].x=read(),a[i].y=read(),a[i].d=read();
    sort(a+1,a+m+1,cmp);
    For(i,1,m)
    {
    	int ha=find(a[i].x);
    	int hb=find(a[i].y);
    	if(ha!=hb)
    	{
    		fa[hb]=ha;
    		ans+=a[i].d;
    	}
    }
    printf("%d",ans);
    return 0;
}
</code></pre></div></div>

<p>复杂度：O(mlogm+mα(n)),α(n)是一次并查集的复杂度。</p>

<table>
  <tbody>
    <tr>
      <td>再加一个小小的优化（也不算优化了，只是一个正常剪枝）加一个tot记录已选用的边数，如果到了</td>
      <td>V</td>
      <td>-1条边便可以break掉</td>
    </tr>
  </tbody>
</table>

<p>核心代码：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;string&gt;
#include&lt;cstdio&gt;
#include&lt;cstdlib&gt;
#include&lt;algorithm&gt;
#include&lt;cmath&gt;
#define For(k,i,j) for(int k=i;k&lt;=j;k++)
using namespace std;
inline int read()
{
    char ch;
    int res=1;
    while((ch=getchar())&lt;'0'||ch&gt;'9') if(ch=='-') res=-1;
    res*=ch-48;
    while((ch=getchar())&gt;='0'&amp;&amp;ch&lt;='9')
        res=res*10+ch-48;
    return res;
}
struct point
{
	int x,y,d;
};
point a[200005];
int fa[5001];
int find(int x)
{
	if(fa[x]==x)
		return x;
	else
		return fa[x]=find(fa[x]);
}
bool cmp(point f,point g)
{
	return f.d&lt;g.d;
}
int main()
{
    int n=read(),m=read(),k,ans=0;
    For(i,1,n)
		fa[i]=i;
    For(i,1,m)
    	a[i].x=read(),a[i].y=read(),a[i].d=read();
    sort(a+1,a+m+1,cmp);
    int tot=0;
    For(i,1,m)
    {
    	int ha=find(a[i].x);
    	int hb=find(a[i].y);
    	if(ha!=hb)
    	{
    		fa[hb]=ha;
    		ans+=a[i].d;
    		tot++;
    	}
    	if(tot==n-1)
    		break;
    }
    printf("%d",ans);
    return 0;
}
</code></pre></div></div>

<p>时间前后对比：（也就快了那么一点点）</p>

<p>三.有关最小生成树的拓展
Ⅰ.次小生成树:
①
②</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm" /><category term="Code" /><summary type="html"><![CDATA[浅谈最小生成树]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/algorithm-cover-2.png" /><media:content medium="image" url="http://localhost:4000/algorithm-cover-2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>