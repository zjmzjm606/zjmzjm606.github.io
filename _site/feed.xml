<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-01-08T18:55:52+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tomorrow’s Blog</title><entry><title type="html">常量</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/06/Constant/" rel="alternate" type="text/html" title="常量" /><published>2025-01-06T00:00:00-08:00</published><updated>2025-01-06T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/06/Constant</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/06/Constant/"><![CDATA[<h1 id="常量"><span style="color: rgb(255,127,80);"><strong>常量</strong></span></h1>

<p>常量是指在程序执行期间固定不变的值。常量也称为字面量，其值在定义后不能修改。常量可以是任何基本数据类型，如整数、浮点数、字符、字符串和布尔值。常量与变量类似，只是其值在定义后不可改变。</p>

<p>在定义常量时，建议使用大写字母形式。这是一种良好的编程习惯，便于与普通变量区分开来。</p>

<hr />

<h3 id="1整数常量"><span style="color: rgb(0,191,255);"><strong>1.整数常量</strong></span></h3>

<p>整数常量有多种表示方式，可以是十进制、八进制或十六进制。基数通过前缀指定：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">0x</code> 或 <code class="language-plaintext highlighter-rouge">0X</code> 表示十六进制。</li>
  <li><code class="language-plaintext highlighter-rouge">0</code> 表示八进制。</li>
  <li>不带前缀表示十进制。</li>
</ul>

<p>整数常量还可以带有后缀，指定其类型：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">u</code> 或 <code class="language-plaintext highlighter-rouge">U</code> 表示无符号整数（unsigned）。</li>
  <li><code class="language-plaintext highlighter-rouge">l</code> 或 <code class="language-plaintext highlighter-rouge">L</code> 表示长整数（long）。</li>
</ul>

<p>后缀的顺序和大小写不敏感。</p>

<h4 id="合法示例"><span style="color: rgb(238,130,238);"><strong>合法示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">212</span>        <span class="c1">// 十进制</span>
<span class="mi">215u</span>       <span class="c1">// 无符号整数</span>
<span class="mh">0xFeeL</span>     <span class="c1">// 十六进制，长整数</span>
</code></pre></div></div>

<h4 id="非法示例"><span style="color: rgb(238,130,238);"><strong>非法示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mo">07</span><span class="mi">8</span>        <span class="c1">// 非法：8 不是八进制的数字</span>
<span class="mo">032UU</span>      <span class="c1">// 非法：不能重复后缀</span>
</code></pre></div></div>

<h4 id="各种类型的整数常量示例"><span style="color: rgb(238,130,238);"><strong>各种类型的整数常量示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">85</span>          <span class="c1">// 十进制</span>
<span class="mo">0213</span>        <span class="c1">// 八进制</span>
<span class="mh">0x4b</span>        <span class="c1">// 十六进制</span>
<span class="mi">30</span>          <span class="c1">// 整数</span>
<span class="mi">30u</span>         <span class="c1">// 无符号整数</span>
<span class="mi">30l</span>         <span class="c1">// 长整数</span>
<span class="mi">30ul</span>        <span class="c1">// 无符号长整数</span>
</code></pre></div></div>

<h3 id="2浮点常量"><span style="color: rgb(0,191,255);"><strong>2.浮点常量</strong></span></h3>

<p>浮点常量由整数部分、小数点、小数部分和指数部分组成。可以使用小数形式或指数形式表示。</p>

<ul>
  <li>小数形式：必须包含整数部分、小数部分或两者。</li>
  <li>指数形式：必须包含小数点和指数部分，或同时包含两者，指数使用 <code class="language-plaintext highlighter-rouge">e</code> 或 <code class="language-plaintext highlighter-rouge">E</code> 引入。</li>
</ul>

<h4 id="合法示例-1"><span style="color: rgb(238,130,238);"><strong>合法示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">3.14159</span>       <span class="c1">// 小数形式</span>
<span class="mf">314159E-5L</span>     <span class="c1">// 指数形式，长浮点数</span>
</code></pre></div></div>

<h4 id="非法示例-1"><span style="color: rgb(238,130,238);"><strong>非法示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">510</span><span class="n">E</span>          <span class="c1">// 非法：不完整的指数</span>
<span class="mi">210</span><span class="n">f</span>          <span class="c1">// 非法：缺少小数或指数</span>
<span class="p">.</span><span class="n">e55</span>          <span class="c1">// 非法：缺少整数或分数</span>
</code></pre></div></div>

<h3 id="3布尔常量"><span style="color: rgb(0,191,255);"><strong>3.布尔常量</strong></span></h3>

<p>布尔常量有两个值，分别是 <code class="language-plaintext highlighter-rouge">true</code> 和 <code class="language-plaintext highlighter-rouge">false</code>，它们表示真和假。在 C++ 中，不应将 <code class="language-plaintext highlighter-rouge">true</code> 视为 1，<code class="language-plaintext highlighter-rouge">false</code> 视为 0。</p>

<h3 id="4字符常量"><span style="color: rgb(0,191,255);"><strong>4.字符常量</strong></span></h3>

<p>字符常量用单引号 <code class="language-plaintext highlighter-rouge">'</code> 括起来。如果常量前有 <code class="language-plaintext highlighter-rouge">L</code>（仅当大写时），则表示宽字符常量（例如 <code class="language-plaintext highlighter-rouge">L'x'</code>）。否则，它是窄字符常量（例如 <code class="language-plaintext highlighter-rouge">'x'</code>）。</p>

<p>字符常量可以是普通字符、转义序列或通用字符。常见的转义序列如下：</p>

<table>
  <thead>
    <tr>
      <th>转义序列</th>
      <th>含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\\</code></td>
      <td>反斜杠字符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\'</code></td>
      <td>单引号字符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\"</code></td>
      <td>双引号字符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\?</code></td>
      <td>问号字符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\a</code></td>
      <td>警报铃声</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\b</code></td>
      <td>退格键</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\f</code></td>
      <td>换页符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\n</code></td>
      <td>换行符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\r</code></td>
      <td>回车</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\t</code></td>
      <td>水平制表符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\v</code></td>
      <td>垂直制表符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\ooo</code></td>
      <td>八进制数</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\xhh...</code></td>
      <td>十六进制数</td>
    </tr>
  </tbody>
</table>

<h4 id="示例"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello</span><span class="se">\t</span><span class="s">World</span><span class="se">\n\n</span><span class="s">"</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">Hello   World</span>
</code></pre></div></div>

<h3 id="5字符串常量"><span style="color: rgb(0,191,255);"><strong>5.字符串常量</strong></span></h3>

<p>字符串字面量由双引号 <code class="language-plaintext highlighter-rouge">""</code> 括起来，包含普通字符、转义序列和通用字符。可以使用 <code class="language-plaintext highlighter-rouge">\</code> 将长字符串拆分为多行。</p>

<h4 id="示例-1"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">greeting</span> <span class="o">=</span> <span class="s">"hello, runoob"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">greeting</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>  <span class="c1">// 换行符</span>
    <span class="n">string</span> <span class="n">greeting2</span> <span class="o">=</span> <span class="s">"hello, \
                        runoob"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">greeting2</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出-1"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">hello, runoob</span>
<span class="s">hello, runoob</span>
</code></pre></div></div>

<hr />

<h3 id="定义常量"><span style="color: rgb(32,178,170);"><strong>定义常量</strong></span></h3>

<p>在 C++ 中，有两种常见的定义常量的方式：</p>

<ol>
  <li><strong>使用 <code class="language-plaintext highlighter-rouge">#define</code> 预处理器</strong></li>
  <li><strong>使用 <code class="language-plaintext highlighter-rouge">const</code> 关键字</strong></li>
</ol>

<h4 id="1使用-define-预处理器"><span style="color: rgb(0,191,255);"><strong>1.使用 <code class="language-plaintext highlighter-rouge">#define</code> 预处理器：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define identifier value
</span></code></pre></div></div>

<h4 id="示例-2"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="cp">#define LENGTH 10
#define WIDTH 5
#define NEWLINE '\n'
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">area</span> <span class="o">=</span> <span class="n">LENGTH</span> <span class="o">*</span> <span class="n">WIDTH</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">area</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">NEWLINE</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出-2"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">50</span>
</code></pre></div></div>

<h4 id="2使用-const-关键字"><span style="color: rgb(0,191,255);"><strong>2.使用 <code class="language-plaintext highlighter-rouge">const</code> 关键字：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">type</span> <span class="n">variable</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="示例-3"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">LENGTH</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">WIDTH</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="n">NEWLINE</span> <span class="o">=</span> <span class="sc">'\n'</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">area</span> <span class="o">=</span> <span class="n">LENGTH</span> <span class="o">*</span> <span class="n">WIDTH</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">area</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">NEWLINE</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出-3"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">50</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[常量]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-10.png" /><media:content medium="image" url="http://localhost:4000/code-cover-10.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">修饰符类型</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Modifier-Types/" rel="alternate" type="text/html" title="修饰符类型" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Modifier%20Types</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Modifier-Types/"><![CDATA[<h1 id="修饰符"><span style="color: rgb(255,127,80);"><strong>修饰符</strong></span></h1>

<p>C++ 允许在基本数据类型（如 <code class="language-plaintext highlighter-rouge">char</code>、<code class="language-plaintext highlighter-rouge">int</code> 和 <code class="language-plaintext highlighter-rouge">double</code>）前使用修饰符，这些修饰符用于改变变量的行为，以满足不同的需求。修饰符提供了更多的灵活性和可定制性。</p>

<h2 id="常见的-c-数据类型修饰符"><span style="color: rgb(0,191,255);"><strong>常见的 C++ 数据类型修饰符</strong></span></h2>

<h3 id="1-signed"><span style="color: rgb(32,178,170);"><strong>1. <code class="language-plaintext highlighter-rouge">signed</code></strong></span></h3>
<ul>
  <li>表示变量可以存储负数。</li>
  <li>对于整型变量来说，<code class="language-plaintext highlighter-rouge">signed</code> 是默认值，因此通常可以省略。</li>
</ul>

<h3 id="2-unsigned"><span style="color: rgb(32,178,170);"><strong>2. <code class="language-plaintext highlighter-rouge">unsigned</code></strong></span></h3>
<ul>
  <li>表示变量不能存储负数。</li>
  <li>对于整型变量，<code class="language-plaintext highlighter-rouge">unsigned</code> 修饰符可以将变量的范围扩大一倍。</li>
</ul>

<h3 id="3-short"><span style="color: rgb(32,178,170);"><strong>3. <code class="language-plaintext highlighter-rouge">short</code></strong></span></h3>
<ul>
  <li>表示变量的范围比 <code class="language-plaintext highlighter-rouge">int</code> 更小。</li>
  <li><code class="language-plaintext highlighter-rouge">short int</code> 可以简写为 <code class="language-plaintext highlighter-rouge">short</code>。</li>
</ul>

<h3 id="4-long"><span style="color: rgb(32,178,170);"><strong>4. <code class="language-plaintext highlighter-rouge">long</code></strong></span></h3>
<ul>
  <li>表示变量的范围比 <code class="language-plaintext highlighter-rouge">int</code> 更大。</li>
  <li><code class="language-plaintext highlighter-rouge">long int</code> 可以简写为 <code class="language-plaintext highlighter-rouge">long</code>。</li>
</ul>

<h3 id="5-long-long"><span style="color: rgb(32,178,170);"><strong>5. <code class="language-plaintext highlighter-rouge">long long</code></strong></span></h3>
<ul>
  <li>表示变量的范围比 <code class="language-plaintext highlighter-rouge">long</code> 更大。</li>
  <li>这是 C++11 中新增的数据类型修饰符。</li>
</ul>

<h3 id="6-float"><span style="color: rgb(32,178,170);"><strong>6. <code class="language-plaintext highlighter-rouge">float</code></strong></span></h3>
<ul>
  <li>表示单精度浮点数。</li>
</ul>

<h3 id="7-double"><span style="color: rgb(32,178,170);"><strong>7. <code class="language-plaintext highlighter-rouge">double</code></strong></span></h3>
<ul>
  <li>表示双精度浮点数。</li>
</ul>

<h3 id="8-bool"><span style="color: rgb(32,178,170);"><strong>8. <code class="language-plaintext highlighter-rouge">bool</code></strong></span></h3>
<ul>
  <li>表示布尔类型，只有 <code class="language-plaintext highlighter-rouge">true</code> 和 <code class="language-plaintext highlighter-rouge">false</code> 两个值。</li>
</ul>

<h3 id="9-char"><span style="color: rgb(32,178,170);"><strong>9. <code class="language-plaintext highlighter-rouge">char</code></strong></span></h3>
<ul>
  <li>表示字符类型。</li>
</ul>

<h3 id="10-wchar_t"><span style="color: rgb(32,178,170);"><strong>10. <code class="language-plaintext highlighter-rouge">wchar_t</code></strong></span></h3>
<ul>
  <li>表示宽字符类型，可以存储 Unicode 字符。</li>
</ul>

<h3 id="修饰符的组合使用"><span style="color: rgb(0,191,255);"><strong>修饰符的组合使用</strong></span></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">signed</code>、<code class="language-plaintext highlighter-rouge">unsigned</code>、<code class="language-plaintext highlighter-rouge">long</code> 和 <code class="language-plaintext highlighter-rouge">short</code> 可以组合使用，且适用于整型。</li>
  <li><code class="language-plaintext highlighter-rouge">signed</code> 和 <code class="language-plaintext highlighter-rouge">unsigned</code> 可以应用于字符型（<code class="language-plaintext highlighter-rouge">char</code>）。</li>
  <li><code class="language-plaintext highlighter-rouge">long</code> 可应用于双精度型（<code class="language-plaintext highlighter-rouge">double</code>）。</li>
</ul>

<p><span style="color: rgb(238,130,238);"><strong>例如：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">num</span><span class="p">;</span> <span class="c1">// 无符号长整型</span>
</code></pre></div></div>

<p>C++ 还支持速记符号，可以省略 <code class="language-plaintext highlighter-rouge">int</code>，只写 <code class="language-plaintext highlighter-rouge">unsigned</code>、<code class="language-plaintext highlighter-rouge">short</code> 或 <code class="language-plaintext highlighter-rouge">long</code>，<code class="language-plaintext highlighter-rouge">int</code> 是隐含的。以下是一些例子：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">signed</span> <span class="kt">int</span> <span class="n">num1</span> <span class="o">=</span> <span class="o">-</span><span class="mi">10</span><span class="p">;</span> <span class="c1">// 有符号整型</span>
<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">num2</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 无符号整型</span>

<span class="kt">short</span> <span class="kt">int</span> <span class="n">num1</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// 短整型</span>
<span class="kt">long</span> <span class="kt">int</span> <span class="n">num2</span> <span class="o">=</span> <span class="mi">100000</span><span class="p">;</span> <span class="c1">// 长整型</span>

<span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">num1</span> <span class="o">=</span> <span class="mi">10000000000</span><span class="p">;</span> <span class="c1">// 长长整型</span>

<span class="kt">float</span> <span class="n">num1</span> <span class="o">=</span> <span class="mf">3.14</span><span class="n">f</span><span class="p">;</span> <span class="c1">// 单精度浮点数</span>
<span class="kt">double</span> <span class="n">num2</span> <span class="o">=</span> <span class="mf">2.71828</span><span class="p">;</span> <span class="c1">// 双精度浮点数</span>

<span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> <span class="c1">// 布尔类型</span>
<span class="kt">char</span> <span class="n">ch1</span> <span class="o">=</span> <span class="sc">'a'</span><span class="p">;</span> <span class="c1">// 字符类型</span>
<span class="kt">wchar_t</span> <span class="n">ch2</span> <span class="o">=</span> <span class="sc">L'你'</span><span class="p">;</span> <span class="c1">// 宽字符类型</span>
</code></pre></div></div>

<h3 id="有符号整数和无符号整数的差别"><span style="color: rgb(0,191,255);"><strong>有符号整数和无符号整数的差别</strong></span></h3>

<p>为了更好地理解有符号整数和无符号整数之间的区别，我们来看一个简单的例子：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
   <span class="kt">short</span> <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>           <span class="c1">// 有符号短整数</span>
   <span class="kt">short</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>  <span class="c1">// 无符号短整数</span>

   <span class="n">j</span> <span class="o">=</span> <span class="mi">50000</span><span class="p">;</span>
   <span class="n">i</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>

   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">j</span><span class="p">;</span>
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-15536 50000
</code></pre></div></div>

<p>在这个程序中，无符号短整数 <code class="language-plaintext highlighter-rouge">50000</code> 的位模式被解释为有符号短整数，导致输出为 <code class="language-plaintext highlighter-rouge">-15536</code>。</p>

<h2 id="c-中的类型限定符"><span style="color: rgb(0,191,255);"><strong>C++ 中的类型限定符</strong></span></h2>

<p>类型限定符提供了关于变量的附加信息，用于改变变量或函数的默认行为。常见的类型限定符如下：</p>

<h3 id="1-const"><span style="color: rgb(32,178,170);"><strong>1. <code class="language-plaintext highlighter-rouge">const</code></strong></span></h3>

<ul>
  <li>用于定义常量，表示该变量的值不能被修改。</li>
</ul>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">int</span> <span class="n">NUM</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// NUM 是常量，值不能修改</span>
<span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">NUM</span><span class="p">;</span> <span class="c1">// 指向常量的指针，指针指向的值不可修改</span>
</code></pre></div></div>

<h3 id="2-volatile"><span style="color: rgb(32,178,170);"><strong>2. <code class="language-plaintext highlighter-rouge">volatile</code></strong></span></h3>

<ul>
  <li>用于修饰变量，表示该变量的值可能会被程序外部的因素改变，如硬件或其他线程。</li>
</ul>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">volatile</span> <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 变量 num 可能在任何时刻被外部修改</span>
</code></pre></div></div>

<h3 id="3-restrict"><span style="color: rgb(32,178,170);"><strong>3. <code class="language-plaintext highlighter-rouge">restrict</code></strong></span></h3>

<ul>
  <li>仅适用于指针，表示该指针是访问其所指对象的唯一方式。<code class="language-plaintext highlighter-rouge">restrict</code> 是 C99 中引入的限定符。</li>
</ul>

<h3 id="4-mutable"><span style="color: rgb(32,178,170);"><strong>4. <code class="language-plaintext highlighter-rouge">mutable</code></strong></span></h3>

<ul>
  <li>用于修饰类的成员变量，表示即使对象本身是 <code class="language-plaintext highlighter-rouge">const</code>，该成员变量仍然可以被修改。</li>
</ul>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Example</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">get_value</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">value_</span><span class="p">;</span> <span class="c1">// const 函数不能修改数据成员</span>
    <span class="p">}</span>
    <span class="kt">void</span> <span class="n">set_value</span><span class="p">(</span><span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
        <span class="n">value_</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span> <span class="c1">// mutable 允许在 const 成员函数中修改成员变量</span>
    <span class="p">}</span>

<span class="k">private</span><span class="o">:</span>
    <span class="k">mutable</span> <span class="kt">int</span> <span class="n">value_</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="5-static"><span style="color: rgb(32,178,170);"><strong>5. <code class="language-plaintext highlighter-rouge">static</code></strong></span></h3>

<ul>
  <li>用于定义静态变量，表示变量的作用域仅限于当前文件或当前函数内，不会被其他文件或函数访问。</li>
</ul>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">example_function</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// count 是静态变量，程序生命周期内都存在</span>
    <span class="n">count</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="6-register"><span style="color: rgb(32,178,170);"><strong>6. <code class="language-plaintext highlighter-rouge">register</code></strong></span></h3>

<ul>
  <li>用于定义寄存器变量，表示该变量被频繁使用，可以存储在 CPU 的寄存器中，以提高程序的运行效率。但是否实际存储在寄存器中由编译器决定。</li>
</ul>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">example_function</span><span class="p">(</span><span class="k">register</span> <span class="kt">int</span> <span class="n">num</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// register 提示编译器将变量存储在寄存器中</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[修饰符]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-6.png" /><media:content medium="image" url="http://localhost:4000/code-cover-6.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">基本数据类型</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Variable-Types/" rel="alternate" type="text/html" title="基本数据类型" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Variable%20Types</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Variable-Types/"><![CDATA[<h1 id="基本数据类型"><span style="color: rgb(255,127,80);"><strong>基本数据类型</strong></span></h1>

<p>在 C++ 中，<strong>变量</strong>是程序中用于存储数据的命名存储区。每个变量都有一个指定的类型，类型决定了变量所占用的内存大小、数据布局及可以存储的数据值范围。</p>

<p>变量的名称由字母、数字和下划线组成，但必须以字母或下划线开头。需要注意的是，C++ 区分大小写，即大写字母和小写字母被视为不同的字符。</p>

<hr />

<p>在 C++ 中，基本数据类型主要有以下几种：</p>

<h3 id="1-基本数据类型"><span style="color: rgb(0,191,255);"><strong>1. 基本数据类型</strong></span></h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">bool</code></td>
      <td>布尔类型，存储值 <code class="language-plaintext highlighter-rouge">true</code> 或 <code class="language-plaintext highlighter-rouge">false</code>，占用 1 个字节。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">char</code></td>
      <td>字符类型，用于存储 ASCII 字符，通常占用 1 个字节。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">int</code></td>
      <td>整数类型，通常用于存储普通整数，通常占用 4 个字节。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">float</code></td>
      <td>单精度浮点数类型，通常占用 4 个字节，存储 1 位符号、8 位指数和 23 位小数。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">double</code></td>
      <td>双精度浮点数类型，通常占用 8 个字节，存储 1 位符号、11 位指数和 52 位小数。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">void</code></td>
      <td>无类型，表示函数不返回值或指针没有类型。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">wchar_t</code></td>
      <td>宽字符类型，存储更大范围的字符，通常占用 2 或 4 个字节。</td>
    </tr>
  </tbody>
</table>

<h5 id="基本数据类型示例"><span style="color: rgb(32,178,170);"><strong>基本数据类型示例</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>        <span class="c1">// 布尔类型</span>
    <span class="kt">char</span> <span class="n">letter</span> <span class="o">=</span> <span class="sc">'A'</span><span class="p">;</span>       <span class="c1">// 字符类型</span>
    <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>            <span class="c1">// 整数类型</span>
    <span class="kt">float</span> <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14</span><span class="n">f</span><span class="p">;</span>        <span class="c1">// 单精度浮点数</span>
    <span class="kt">double</span> <span class="n">piApprox</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="p">;</span> <span class="c1">// 双精度浮点数</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Flag: "</span> <span class="o">&lt;&lt;</span> <span class="n">flag</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Letter: "</span> <span class="o">&lt;&lt;</span> <span class="n">letter</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Age: "</span> <span class="o">&lt;&lt;</span> <span class="n">age</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">pi</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Pi Approx: "</span> <span class="o">&lt;&lt;</span> <span class="n">piApprox</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">复制代码</span>
<span class="na">Flag</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">Letter</span><span class="pi">:</span> <span class="s">A</span>
<span class="na">Age</span><span class="pi">:</span> <span class="m">25</span>
<span class="na">Pi</span><span class="pi">:</span> <span class="m">3.14</span>
<span class="na">Pi Approx</span><span class="pi">:</span> <span class="m">3.14159</span>
</code></pre></div></div>

<h3 id="2-整数类型"><span style="color: rgb(0,191,255);"><strong>2. 整数类型</strong></span></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">int</code>: 用于表示普通整数，通常占用 4 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">short</code>: 短整数，通常占用 2 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">long</code>: 长整数，通常占用 4 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">long long</code>: 更长的整数，通常占用 8 个字节。</li>
</ul>

<h5 id="整数类型示例"><span style="color: rgb(32,178,170);"><strong>整数类型示例</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">short</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">32767</span><span class="p">;</span>        <span class="c1">// 短整数类型，最大值</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">100000</span><span class="p">;</span>         <span class="c1">// 普通整数类型</span>
    <span class="kt">long</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">1000000000</span><span class="p">;</span>    <span class="c1">// 长整数类型</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span> <span class="o">=</span> <span class="mi">1000000000000</span><span class="p">;</span> <span class="c1">// 超长整数类型</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Short: "</span> <span class="o">&lt;&lt;</span> <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Int: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Long: "</span> <span class="o">&lt;&lt;</span> <span class="n">l</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Long Long: "</span> <span class="o">&lt;&lt;</span> <span class="n">ll</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Short</span><span class="pi">:</span> <span class="m">32767</span>
<span class="na">Int</span><span class="pi">:</span> <span class="m">100000</span>
<span class="na">Long</span><span class="pi">:</span> <span class="m">1000000000</span>
<span class="na">Long Long</span><span class="pi">:</span> <span class="m">1000000000000</span>
</code></pre></div></div>

<h3 id="3-浮点类型"><span style="color: rgb(0,191,255);"><strong>3. 浮点类型</strong></span></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">float</code>: 单精度浮点数，通常占用 4 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">double</code>: 双精度浮点数，通常占用 8 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">long double</code>: 高精度浮点数，占用字节数根据系统不同而变化。</li>
</ul>

<h5 id="浮点类型示例"><span style="color: rgb(32,178,170);"><strong>浮点类型示例</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">float</span> <span class="n">piFloat</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="n">f</span><span class="p">;</span>  <span class="c1">// 单精度浮点数</span>
    <span class="kt">double</span> <span class="n">piDouble</span> <span class="o">=</span> <span class="mf">3.1415926535</span><span class="p">;</span> <span class="c1">// 双精度浮点数</span>
    <span class="kt">long</span> <span class="kt">double</span> <span class="n">piLongDouble</span> <span class="o">=</span> <span class="mf">3.14159265358979323846</span><span class="p">;</span> <span class="c1">// 高精度浮点数</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Float Pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">piFloat</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Double Pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">piDouble</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Long Double Pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">piLongDouble</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Float Pi</span><span class="pi">:</span> <span class="m">3.14159</span>
<span class="na">Double Pi</span><span class="pi">:</span> <span class="m">3.14159</span>
<span class="na">Long Double Pi</span><span class="pi">:</span> <span class="m">3.14159</span>
</code></pre></div></div>

<h3 id="4-字符类型"><span style="color: rgb(0,191,255);"><strong>4. 字符类型</strong></span></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">char</code>: 单字节字符，通常占用 1 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">wchar_t</code>: 宽字符，通常占用 2 或 4 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">char16_t</code>: 16 位 Unicode 字符，占用 2 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">char32_t</code>: 32 位 Unicode 字符，占用 4 个字节。</li>
</ul>

<h5 id="字符类型示例"><span style="color: rgb(32,178,170);"><strong>字符类型示例</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">'A'</span><span class="p">;</span>             <span class="c1">// 字符类型</span>
    <span class="kt">wchar_t</span> <span class="n">wc</span> <span class="o">=</span> <span class="sc">L'你'</span><span class="p">;</span>        <span class="c1">// 宽字符类型</span>
    <span class="kt">char16_t</span> <span class="n">c16</span> <span class="o">=</span> <span class="sc">u'你'</span><span class="p">;</span>      <span class="c1">// 16位 Unicode 字符</span>
    <span class="kt">char32_t</span> <span class="n">c32</span> <span class="o">=</span> <span class="sc">U'你'</span><span class="p">;</span>      <span class="c1">// 32位 Unicode 字符</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Char: "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Wide Char: "</span> <span class="o">&lt;&lt;</span> <span class="n">wc</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Char16_t: "</span> <span class="o">&lt;&lt;</span> <span class="n">c16</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Char32_t: "</span> <span class="o">&lt;&lt;</span> <span class="n">c32</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Char</span><span class="pi">:</span> <span class="s">A</span>
<span class="na">Wide Char</span><span class="pi">:</span> <span class="s">你</span>
<span class="na">Char16_t</span><span class="pi">:</span> <span class="s">你</span>
<span class="na">Char32_t</span><span class="pi">:</span> <span class="s">你</span>
</code></pre></div></div>

<hr />

<h3 id="变量定义与声明">变量定义与声明</h3>

<h4 id="1-变量定义">1. 变量定义</h4>

<p>在 C++ 中，<strong>定义变量</strong>时指定其类型，并为该类型创建存储空间。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">type</span> <span class="n">variable_list</span><span class="p">;</span>
</code></pre></div></div>

<p>其中 <code class="language-plaintext highlighter-rouge">type</code> 是有效的 C++ 数据类型，<code class="language-plaintext highlighter-rouge">variable_list</code> 是一个或多个变量名（以逗号分隔）。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
<span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="n">ch</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">f</span><span class="p">,</span> <span class="n">salary</span><span class="p">;</span>
<span class="kt">double</span> <span class="n">d</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="示例变量定义">示例：变量定义</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>  <span class="c1">// 定义并初始化 i 和 j</span>
    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">'A'</span><span class="p">;</span>            <span class="c1">// 定义字符类型变量 c</span>
    <span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">3.14</span><span class="n">f</span><span class="p">;</span>         <span class="c1">// 定义浮点数变量 f</span>
    <span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="p">;</span>      <span class="c1">// 定义双精度浮点数变量 d</span>
    <span class="n">k</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">;</span>               <span class="c1">// 使用变量 i 和 j 计算 k</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"i: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">", j: "</span> <span class="o">&lt;&lt;</span> <span class="n">j</span> <span class="o">&lt;&lt;</span> <span class="s">", k: "</span> <span class="o">&lt;&lt;</span> <span class="n">k</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c: "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="s">", f: "</span> <span class="o">&lt;&lt;</span> <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="s">", d: "</span> <span class="o">&lt;&lt;</span> <span class="n">d</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">i</span><span class="pi">:</span> <span class="s">10, j</span><span class="err">:</span> <span class="s">20, k</span><span class="err">:</span> <span class="m">30</span>
<span class="na">c</span><span class="pi">:</span> <span class="s">A, f</span><span class="err">:</span> <span class="s">3.14, d</span><span class="err">:</span> <span class="m">3.14159</span>
</code></pre></div></div>

<h4 id="2-变量声明">2. 变量声明</h4>

<p><strong>变量声明</strong>是向编译器保证某个变量在某处存在。声明不需要提供完整的变量定义，仅需指定类型和名称即可。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>  <span class="c1">// 声明变量 a 和 b</span>
<span class="k">extern</span> <span class="kt">float</span> <span class="n">f</span><span class="p">;</span>   <span class="c1">// 声明变量 f</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">extern</code> 关键字用于声明变量，表明该变量在其他地方定义。例如，在多个文件中，你可以在头文件声明变量，在源文件中进行定义。</p>

<h4 id="示例变量声明与定义">示例：变量声明与定义</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>  <span class="c1">// 声明变量 a 和 b</span>
<span class="k">extern</span> <span class="kt">float</span> <span class="n">f</span><span class="p">;</span>   <span class="c1">// 声明变量 f</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>    <span class="c1">// 定义变量 a 和 b</span>
    <span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">70.0</span> <span class="o">/</span> <span class="mf">3.0</span><span class="p">;</span>  <span class="c1">// 定义并初始化变量 f</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Sum of a and b: "</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"f: "</span> <span class="o">&lt;&lt;</span> <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Sum of a and b</span><span class="pi">:</span> <span class="m">30</span>
<span class="na">f</span><span class="pi">:</span> <span class="m">23.3333</span>
</code></pre></div></div>

<hr />

<h3 id="左值lvalues与右值rvalues">左值（Lvalues）与右值（Rvalues）</h3>

<p>C++ 中的表达式分为两种类型：</p>

<ul>
  <li><strong>左值（lvalue）</strong>：表示一个内存位置，可以对其进行赋值。左值可以出现在赋值语句的左侧。</li>
  <li><strong>右值（rvalue）</strong>：表示某个具体的值，不能进行赋值。右值通常出现在赋值语句的右侧，但不能出现在左侧。</li>
</ul>

<h4 id="示例左值与右值">示例：左值与右值</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>  <span class="c1">// 变量 x 是左值</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>  <span class="c1">// 变量 y 是左值</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>  <span class="c1">// 这是有效的，左值可以赋值</span>
    <span class="c1">// 10 = x; // 错误，10 是右值，不能在赋值语句的左侧</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"x: "</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="s">", y: "</span> <span class="o">&lt;&lt;</span> <span class="n">y</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">x</span><span class="pi">:</span> <span class="s">20, y</span><span class="err">:</span> <span class="m">20</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[基本数据类型]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-3.png" /><media:content medium="image" url="http://localhost:4000/code-cover-3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">存储类</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Storage-Class/" rel="alternate" type="text/html" title="存储类" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Storage%20Class</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Storage-Class/"><![CDATA[<h1 id="存储类"><span style="color: rgb(255,127,80);"><strong>存储类</strong></span></h1>

<p>C++ 存储类定义了变量和函数的<strong>作用域</strong>（可见性）和<strong>生命周期</strong>。这些存储类说明符位于变量或函数类型之前。以下是 C++ 中常用的存储类：</p>

<h2 id="1-auto-存储类">1. <code class="language-plaintext highlighter-rouge">auto</code> 存储类</h2>

<ul>
  <li>
    <p><strong>定义</strong>：<code class="language-plaintext highlighter-rouge">auto</code> 是默认存储类，通常可以省略不写。</p>
  </li>
  <li>
    <p><strong>特点</strong>：<code class="language-plaintext highlighter-rouge">auto</code> 指定的变量具有自动存储期，即变量的生命周期仅限于定义它的块（block）。<code class="language-plaintext highlighter-rouge">auto</code> 变量通常分配在栈上。</p>

    <p>从 C++11 起，<code class="language-plaintext highlighter-rouge">auto</code> 用于根据初始化表达式推断变量类型：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>     <span class="c1">// double</span>
<span class="k">auto</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"hello"</span><span class="p">;</span>  <span class="c1">// const char*</span>
</code></pre></div>    </div>

    <p>从 C++17 起，<code class="language-plaintext highlighter-rouge">auto</code> 不再是存储类说明符。</p>
  </li>
</ul>

<h2 id="2-register-存储类">2. <code class="language-plaintext highlighter-rouge">register</code> 存储类</h2>

<ul>
  <li>
    <p><strong>定义</strong>：用于建议编译器将变量存储在 CPU 寄存器中，以提高访问速度。</p>
  </li>
  <li>
    <p><strong>特点</strong>：虽然可以提高访问速度，但它是一个建议，编译器可以忽略此声明。在 C++11 后，<code class="language-plaintext highlighter-rouge">register</code> 已被弃用。</p>

    <p>语法：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">register</span> <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="3-static-存储类">3. <code class="language-plaintext highlighter-rouge">static</code> 存储类</h2>

<ul>
  <li>
    <p><strong>定义</strong>：用于定义具有静态存储期的变量或函数，生命周期贯穿整个程序的运行期。</p>
  </li>
  <li>
    <p><strong>特点</strong>：在函数内部，<code class="language-plaintext highlighter-rouge">static</code> 变量的值在函数调用之间保持不变。对于全局作用域，<code class="language-plaintext highlighter-rouge">static</code> 使变量具有内部链接，仅在定义它的文件中可见。</p>

    <p>示例：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">int</span> <span class="n">staticVar</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 函数调用之间保持不变</span>
</code></pre></div>    </div>

    <p><code class="language-plaintext highlighter-rouge">static</code> 还可用于类成员，使其共享同一副本。</p>
  </li>
</ul>

<h2 id="4-extern-存储类">4. <code class="language-plaintext highlighter-rouge">extern</code> 存储类</h2>

<ul>
  <li>
    <p><strong>定义</strong>：用于声明一个具有外部链接的变量或函数，允许多个文件之间共享。</p>
  </li>
  <li>
    <p><strong>特点</strong>：<code class="language-plaintext highlighter-rouge">extern</code> 使得一个全局变量或函数在其他文件中可见。</p>

    <p>示例：</p>

    <p><strong>main.cpp</strong>:</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>
</code></pre></div>    </div>

    <p><strong>support.cpp</strong>:</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>  <span class="c1">// 引用 main.cpp 中的 count</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="5-mutable-存储类-c11">5. <code class="language-plaintext highlighter-rouge">mutable</code> 存储类 (C++11)</h2>

<ul>
  <li>
    <p><strong>定义</strong>：用于修饰类中的成员变量，使它们可以在 <code class="language-plaintext highlighter-rouge">const</code> 成员函数中修改。</p>
  </li>
  <li>
    <p><strong>特点</strong>：通常用于需要在 <code class="language-plaintext highlighter-rouge">const</code> 环境下修改状态的变量，如缓存或计数器。</p>

    <p>示例：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">mutable</span> <span class="kt">int</span> <span class="n">mutableVar</span><span class="p">;</span>
  
    <span class="kt">void</span> <span class="n">constMemberFunc</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
        <span class="n">mutableVar</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span> <span class="c1">// 允许修改 mutable 成员变量</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="6-thread_local-存储类-c11">6. <code class="language-plaintext highlighter-rouge">thread_local</code> 存储类 (C++11)</h2>

<ul>
  <li>
    <p><strong>定义</strong>：用于在多线程环境中定义线程局部存储期的变量。</p>
  </li>
  <li>
    <p><strong>特点</strong>：每个线程拥有该变量的独立副本，线程结束时自动销毁。</p>

    <p>示例：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">thread_local</span> <span class="kt">int</span> <span class="n">threadVar</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span> <span class="c1">// 每个线程有自己的独立副本</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="存储类的总结">存储类的总结</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">auto</code> 和 <code class="language-plaintext highlighter-rouge">static</code> 是最常用的存储类，分别用于自动推断类型和保证变量生命周期。</li>
  <li><code class="language-plaintext highlighter-rouge">register</code> 是一个优化提示，已在 C++11 中废弃。</li>
  <li><code class="language-plaintext highlighter-rouge">extern</code> 用于跨文件共享变量或函数。</li>
  <li><code class="language-plaintext highlighter-rouge">mutable</code> 和 <code class="language-plaintext highlighter-rouge">thread_local</code> 引入于 C++11，分别用于在 <code class="language-plaintext highlighter-rouge">const</code> 函数内修改变量和管理线程特有变量。</li>
</ul>

<h2 id="示例代码展示不同存储类">示例代码：展示不同存储类</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="n">globalVar</span><span class="p">;</span>  <span class="c1">// 全局变量，extern 默认为外部链接</span>

<span class="kt">void</span> <span class="nf">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">auto</span> <span class="kt">int</span> <span class="n">localVar</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>  <span class="c1">// 局部变量，自动存储期</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">staticVar</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>  <span class="c1">// 静态变量，生命周期贯穿整个程序</span>

    <span class="c1">// const 变量默认为 static 存储期</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">constVar</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
    
    <span class="c1">// mutable 成员变量，可以在 const 函数中修改</span>
    <span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
    <span class="nl">public:</span>
        <span class="k">mutable</span> <span class="kt">int</span> <span class="n">mutableVar</span><span class="p">;</span>
  
        <span class="kt">void</span> <span class="n">constMemberFunc</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
            <span class="n">mutableVar</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span> <span class="c1">// 修改 mutable 成员变量</span>
        <span class="p">}</span>
    <span class="p">};</span>
  
    <span class="k">thread_local</span> <span class="kt">int</span> <span class="n">threadVar</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span>  <span class="c1">// 线程局部变量</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">extern</span> <span class="kt">int</span> <span class="n">externalVar</span><span class="p">;</span>  <span class="c1">// 声明外部变量</span>
    <span class="n">function</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="存储类的详细说明">存储类的详细说明</h2>

<h3 id="1-auto-存储类-1">1. <code class="language-plaintext highlighter-rouge">auto</code> 存储类</h3>

<p>自 C++11 起，<code class="language-plaintext highlighter-rouge">auto</code> 用于两种场景：</p>

<ul>
  <li>
    <p>根据初始化表达式自动推断变量类型：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>  <span class="c1">// double</span>
<span class="k">auto</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"hello"</span><span class="p">;</span>  <span class="c1">// const char*</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-register-存储类-1">2. <code class="language-plaintext highlighter-rouge">register</code> 存储类</h3>

<p><code class="language-plaintext highlighter-rouge">register</code> 用于将变量存储在寄存器中以提高访问速度，尤其是循环变量：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">register</span> <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 循环体</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="3-static-存储类-1">3. <code class="language-plaintext highlighter-rouge">static</code> 存储类</h3>

<p><code class="language-plaintext highlighter-rouge">static</code> 用于指示变量在程序运行期间持续存在，常用于局部静态变量和全局变量的作用域限制。</p>

<h4 id="局部静态变量">局部静态变量：</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">func</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>  <span class="c1">// 局部静态变量</span>
    <span class="n">i</span><span class="o">++</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"i = "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="4-extern-存储类-1">4. <code class="language-plaintext highlighter-rouge">extern</code> 存储类</h3>

<p><code class="language-plaintext highlighter-rouge">extern</code> 用于引用其他文件中的全局变量或函数。</p>

<h4 id="示例跨文件使用-extern">示例：跨文件使用 <code class="language-plaintext highlighter-rouge">extern</code></h4>

<p><strong>main.cpp</strong>:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>
<span class="kt">void</span> <span class="nf">write_extern</span><span class="p">();</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="n">write_extern</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>support.cpp</strong>:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>  <span class="c1">// 引用 main.cpp 中的 count</span>

<span class="kt">void</span> <span class="nf">write_extern</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Count is "</span> <span class="o">&lt;&lt;</span> <span class="n">count</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="5-mutable-存储类">5. <code class="language-plaintext highlighter-rouge">mutable</code> 存储类</h3>

<p><code class="language-plaintext highlighter-rouge">mutable</code> 使得类的成员可以在 <code class="language-plaintext highlighter-rouge">const</code> 成员函数中修改。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Example</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">mutable</span> <span class="kt">int</span> <span class="n">cachedValue</span><span class="p">;</span>  <span class="c1">// 可以在 const 函数中修改</span>

    <span class="kt">int</span> <span class="n">getValue</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">cachedValue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="nf">increment</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">cachedValue</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="6-thread_local-存储类">6. <code class="language-plaintext highlighter-rouge">thread_local</code> 存储类</h3>

<p><code class="language-plaintext highlighter-rouge">thread_local</code> 定义线程局部存储变量，每个线程都有自己独立的副本。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">thread_local</span> <span class="kt">int</span> <span class="n">threadSpecificVar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">threadFunction</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">threadSpecificVar</span> <span class="o">=</span> <span class="n">id</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread "</span> <span class="o">&lt;&lt;</span> <span class="n">id</span> <span class="o">&lt;&lt;</span> <span class="s">": threadSpecificVar = "</span> <span class="o">&lt;&lt;</span> <span class="n">threadSpecificVar</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t1</span><span class="p">(</span><span class="n">threadFunction</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t2</span><span class="p">(</span><span class="n">threadFunction</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>

    <span class="n">t1</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="n">t2</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p>通过合理使用存储类说明符，可以提升程序的可维护性和性能，帮助管理变量的生命周期、可见性和存储位置。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[存储类]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">变量的作用域</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Scope-of-variables/" rel="alternate" type="text/html" title="变量的作用域" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Scope%20of%20variables</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Scope-of-variables/"><![CDATA[<h1 id="变量的作用域"><span style="color: rgb(255,127,80);"><strong>变量的作用域</strong></span></h1>
<p>在 C++ 中，变量的作用域指的是变量可以被访问的范围。通常来说，变量的作用域可以分为以下几种类型：</p>

<ul>
  <li><strong>局部作用域</strong>：变量仅在函数或代码块内部可访问。</li>
  <li><strong>全局作用域</strong>：变量在整个程序中都可访问。</li>
  <li><strong>块作用域</strong>：变量仅在某个特定代码块（如 if 语句、循环等）内可访问。</li>
  <li><strong>类作用域</strong>：变量仅在类内部可访问。</li>
</ul>

<hr />

<h4 id="1-变量声明位置"><span style="color: rgb(0,191,255);"><strong>1. 变量声明位置</strong></span></h4>

<p>变量可以在不同的地方声明，具体包括：</p>

<ul>
  <li><strong>局部变量</strong>：在函数或代码块内部声明的变量。</li>
  <li><strong>形式参数</strong>：在函数参数列表中声明的变量。</li>
  <li><strong>全局变量</strong>：在所有函数外部声明的变量。</li>
</ul>

<h4 id="2-作用域详细介绍"><span style="color: rgb(0,191,255);"><strong>2. 作用域详细介绍</strong></span></h4>

<h5 id="21-局部作用域"><span style="color: rgb(32,178,170);"><strong>2.1 局部作用域</strong></span></h5>

<p>局部变量是在函数或代码块内部声明的，它们只在当前函数或代码块中有效。当函数被调用时，局部变量会被创建，函数执行结束后，它们会被销毁。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="c1">// 局部变量声明</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>

    <span class="c1">// 实际初始化</span>
    <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">c</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个例子中，变量 <code class="language-plaintext highlighter-rouge">a</code>、<code class="language-plaintext highlighter-rouge">b</code> 和 <code class="language-plaintext highlighter-rouge">c</code> 是局部变量，只能在 <code class="language-plaintext highlighter-rouge">main</code> 函数内部访问。</p>

<h5 id="22-全局作用域"><span style="color: rgb(32,178,170);"><strong>2.2 全局作用域</strong></span></h5>

<p>全局变量是在所有函数外部定义的变量，它们在整个程序中都有效，并且可以被任何函数访问。全局变量的生命周期从程序开始到程序结束。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="c1">// 全局变量声明</span>
<span class="kt">int</span> <span class="n">g</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="c1">// 局部变量声明</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>

    <span class="c1">// 实际初始化</span>
    <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
    <span class="n">g</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">g</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">g</code> 是一个全局变量，可以在整个程序中访问。</p>

<h5 id="23-局部变量与全局变量同名"><span style="color: rgb(32,178,170);"><strong>2.3 局部变量与全局变量同名</strong></span></h5>

<p>如果局部变量和全局变量同名，局部变量会覆盖全局变量。也就是说，函数内部会优先使用局部变量。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="c1">// 全局变量声明</span>
<span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="c1">// 局部变量声明</span>
    <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">g</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出结果为：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">10</span>
</code></pre></div></div>

<p>这是因为在 <code class="language-plaintext highlighter-rouge">main</code> 函数中声明的局部变量 <code class="language-plaintext highlighter-rouge">g</code> 覆盖了全局变量 <code class="language-plaintext highlighter-rouge">g</code>。</p>

<h5 id="24-初始化局部变量和全局变量"><span style="color: rgb(32,178,170);"><strong>2.4 初始化局部变量和全局变量</strong></span></h5>

<ul>
  <li><strong>局部变量</strong>：在定义时，系统不会自动为其初始化，必须显式地初始化。</li>
  <li><strong>全局变量</strong>：系统会自动初始化为默认值。不同数据类型的默认值如下：</li>
</ul>

<table>
  <thead>
    <tr>
      <th>数据类型</th>
      <th>初始化默认值</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">int</code></td>
      <td><code class="language-plaintext highlighter-rouge">0</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">char</code></td>
      <td><code class="language-plaintext highlighter-rouge">'\0'</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">float</code></td>
      <td><code class="language-plaintext highlighter-rouge">0</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">double</code></td>
      <td><code class="language-plaintext highlighter-rouge">0</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">pointer</code></td>
      <td><code class="language-plaintext highlighter-rouge">NULL</code></td>
    </tr>
  </tbody>
</table>

<h5 id="25-块作用域"><span style="color: rgb(32,178,170);"><strong>2.5 块作用域</strong></span></h5>

<p>块作用域是指在代码块（如条件语句、循环语句等）内部声明的变量。它们仅在该代码块内部有效。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>  <span class="c1">// 块作用域变量</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"块变量: "</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"外部变量: "</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出结果为：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">块变量</span><span class="pi">:</span> <span class="m">20</span>
<span class="na">外部变量</span><span class="pi">:</span> <span class="m">10</span>
</code></pre></div></div>

<p>在这个例子中，内部代码块中声明了一个与外部同名的变量 <code class="language-plaintext highlighter-rouge">a</code>，并且它覆盖了外部作用域中的变量。在代码块内部访问 <code class="language-plaintext highlighter-rouge">a</code> 时，输出的是 <code class="language-plaintext highlighter-rouge">20</code>，而在外部访问时，输出的是 <code class="language-plaintext highlighter-rouge">10</code>。</p>

<h5 id="26-类作用域"><span style="color: rgb(32,178,170);"><strong>2.6 类作用域</strong></span></h5>

<p>类作用域是指在类内部声明的变量。类的成员变量（或类的静态变量）可以在类的所有成员函数中访问。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">class_var</span><span class="p">;</span>  <span class="c1">// 类作用域变量</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="n">MyClass</span><span class="o">::</span><span class="n">class_var</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"类变量: "</span> <span class="o">&lt;&lt;</span> <span class="n">MyClass</span><span class="o">::</span><span class="n">class_var</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出结果为：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">类变量</span><span class="pi">:</span> <span class="m">30</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">MyClass</code> 类中声明了一个静态成员变量 <code class="language-plaintext highlighter-rouge">class_var</code>，它属于类作用域，可以通过类名访问。</p>

<h4 id="总结"><span style="color: rgb(0,191,255);"><strong>总结</strong></span></h4>

<ul>
  <li>
    <p><span style="color: rgb(238,130,238);"><strong>局部作用域</strong>：在函数或代码块内有效。</span></p>
  </li>
  <li>
    <p><span style="color: rgb(238,130,238);"><strong>全局作用域</strong>：在程序的任何地方有效。</span></p>
  </li>
  <li>
    <p><span style="color: rgb(238,130,238);"><strong>块作用域</strong>：在代码块内部有效。</span></p>
  </li>
  <li>
    <p><span style="color: rgb(238,130,238);"><strong>类作用域</strong>：在类内部有效。</span></p>
  </li>
</ul>

<p>理解这些作用域有助于更好地管理变量的生命周期和访问权限。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[变量的作用域 在 C++ 中，变量的作用域指的是变量可以被访问的范围。通常来说，变量的作用域可以分为以下几种类型：]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-6.png" /><media:content medium="image" url="http://localhost:4000/code-cover-6.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">判断结构</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/IF-(copy)/" rel="alternate" type="text/html" title="判断结构" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/IF%20(copy)</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/IF-(copy)/"><![CDATA[<h1 id="判断结构"><span style="color: rgb(255,127,80);"><strong>判断结构</strong></span></h1>

<p>在 C++ 中，判断结构用于评估一个或多个条件，并根据条件的结果来决定执行哪些语句。常见的判断结构有多种形式，每种形式适用于不同的情况。以下是 C++ 中常见的判断结构以及示例：</p>

<h3 id="1-if-语句"><span style="color: rgb(0,191,255);"><strong>1. <code class="language-plaintext highlighter-rouge">if</code> 语句</strong></span></h3>

<p><code class="language-plaintext highlighter-rouge">if</code> 语句用于判断一个条件是否为真。如果条件为真，执行相应的代码块。</p>

<h4 id="语法"><span style="color: rgb(238,130,238);"><strong>语法：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// 如果 condition 为真，执行此语句块</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="示例"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你已经成年了。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">if</code> 语句判断变量 <code class="language-plaintext highlighter-rouge">age</code> 是否大于或等于 18。如果条件成立（<code class="language-plaintext highlighter-rouge">age</code> &gt;= 18），则输出 <code class="language-plaintext highlighter-rouge">"你已经成年了。"</code>。</p>

<h3 id="2-ifelse-语句"><span style="color: rgb(0,191,255);"><strong>2. <code class="language-plaintext highlighter-rouge">if...else</code> 语句</strong></span></h3>

<p><code class="language-plaintext highlighter-rouge">if...else</code> 语句在 <code class="language-plaintext highlighter-rouge">if</code> 条件为假时，执行 <code class="language-plaintext highlighter-rouge">else</code> 后面的代码块。</p>

<h4 id="语法-1"><span style="color: rgb(238,130,238);"><strong>语法：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="c1">// 如果 condition 为真，执行此语句块</span>
<span class="p">}</span> 
<span class="k">else</span>
<span class="p">{</span>
    <span class="c1">// 如果 condition 为假，执行此语句块</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="示例-1"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你已经成年了。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span> 
<span class="k">else</span> 
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你还未成年。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个例子中，如果 <code class="language-plaintext highlighter-rouge">age</code> 大于或等于 18，则输出 <code class="language-plaintext highlighter-rouge">"你已经成年了。"</code>；否则，输出 <code class="language-plaintext highlighter-rouge">"你还未成年。" </code>。</p>

<h3 id="3-嵌套-if-语句"><span style="color: rgb(0,191,255);"><strong>3. 嵌套 <code class="language-plaintext highlighter-rouge">if</code> 语句</strong></span></h3>

<p>可以在 <code class="language-plaintext highlighter-rouge">if</code> 或 <code class="language-plaintext highlighter-rouge">else</code> 语句内嵌套其他的 <code class="language-plaintext highlighter-rouge">if</code> 或 <code class="language-plaintext highlighter-rouge">else</code> 语句，以处理更复杂的条件判断。</p>

<h4 id="示例-2"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">21</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你已经成年且可以合法饮酒。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你已经成年，但不能合法饮酒。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">else</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你还未成年。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这里，首先判断是否成年，然后在成年基础上判断是否可以合法饮酒。</p>

<h3 id="4-switch-语句"><span style="color: rgb(0,191,255);"><strong>4. <code class="language-plaintext highlighter-rouge">switch</code> 语句</strong></span></h3>

<p><code class="language-plaintext highlighter-rouge">switch</code> 语句用于测试一个变量是否等于多个值中的某一个。它适用于多个条件的判断。</p>

<h4 id="语法-2"><span style="color: rgb(238,130,238);"><strong>语法：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span> <span class="p">(</span><span class="n">variable</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">case</span> <span class="n">value1</span><span class="p">:</span>
        <span class="c1">// 如果 variable == value1，执行此语句块</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">value2</span><span class="p">:</span>
        <span class="c1">// 如果 variable == value2，执行此语句块</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="nl">default:</span>
        <span class="c1">// 如果 variable 不等于任何 case，执行此语句块</span>
        <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="示例-3"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">day</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="k">switch</span> <span class="p">(</span><span class="n">day</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"今天是星期一。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"今天是星期二。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">3</span><span class="p">:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"今天是星期三。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="nl">default:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"输入无效。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>在这个例子中，<code class="language-plaintext highlighter-rouge">switch</code> 语句根据变量 <code class="language-plaintext highlighter-rouge">day</code> 的值选择匹配的 <code class="language-plaintext highlighter-rouge">case</code>，并执行相应的代码块。</p>

<h3 id="5-嵌套-switch-语句"><span style="color: rgb(0,191,255);"><strong>5. 嵌套 <code class="language-plaintext highlighter-rouge">switch</code> 语句</strong></span></h3>

<p><code class="language-plaintext highlighter-rouge">switch</code> 语句也可以嵌套，即在一个 <code class="language-plaintext highlighter-rouge">case</code> 或 <code class="language-plaintext highlighter-rouge">default</code> 分支内使用另一个 <code class="language-plaintext highlighter-rouge">switch</code> 语句。</p>

<h4 id="示例-4"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">choice</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">subChoice</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="k">switch</span> <span class="p">(</span><span class="n">choice</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">switch</span> <span class="p">(</span><span class="n">subChoice</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"选择了选项1的子选项1。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"选择了选项1的子选项2。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"选择了选项2。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"无效选择。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这个例子展示了在 <code class="language-plaintext highlighter-rouge">switch</code> 语句中的 <code class="language-plaintext highlighter-rouge">case</code> 选项内嵌套另一个 <code class="language-plaintext highlighter-rouge">switch</code> 语句。</p>

<h3 id="6-条件运算符--"><span style="color: rgb(0,191,255);"><strong>6. 条件运算符 <code class="language-plaintext highlighter-rouge">? :</code></strong></span></h3>

<p>条件运算符 <code class="language-plaintext highlighter-rouge">? :</code>，又称三目运算符，是一种简洁的方式来替代 <code class="language-plaintext highlighter-rouge">if...else</code> 语句。它的形式如下：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">condition</span> <span class="o">?</span> <span class="n">expression1</span> <span class="o">:</span> <span class="n">expression2</span><span class="p">;</span>
</code></pre></div></div>

<p>如果 <code class="language-plaintext highlighter-rouge">condition</code> 为真，则计算并返回 <code class="language-plaintext highlighter-rouge">expression1</code>，否则计算并返回 <code class="language-plaintext highlighter-rouge">expression2</code>。</p>

<h4 id="示例-5"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
<span class="n">string</span> <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">)</span> <span class="o">?</span> <span class="s">"你已经成年了。"</span> <span class="o">:</span> <span class="s">"你还未成年。"</span><span class="p">;</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</code></pre></div></div>

<p>在这个例子中，三目运算符判断 <code class="language-plaintext highlighter-rouge">age</code> 是否大于或等于 18。如果条件成立，返回 <code class="language-plaintext highlighter-rouge">"你已经成年了。"</code>，否则返回 <code class="language-plaintext highlighter-rouge">"你还未成年。" </code>。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[判断结构]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">判断结构</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Judgment-Structure/" rel="alternate" type="text/html" title="判断结构" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Judgment%20Structure</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Judgment-Structure/"><![CDATA[<h1 id="判断结构"><span style="color: rgb(255,127,80);"><strong>判断结构</strong></span></h1>

<p>在 C++ 中，判断结构用于评估一个或多个条件，并根据条件的结果来决定执行哪些语句。常见的判断结构有多种形式，每种形式适用于不同的情况。以下是 C++ 中常见的判断结构以及示例：</p>

<h3 id="1-if-语句"><span style="color: rgb(0,191,255);"><strong>1. <code class="language-plaintext highlighter-rouge">if</code> 语句</strong></span></h3>

<p><code class="language-plaintext highlighter-rouge">if</code> 语句用于判断一个条件是否为真。如果条件为真，执行相应的代码块。</p>

<h4 id="语法"><span style="color: rgb(238,130,238);"><strong>语法：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// 如果 condition 为真，执行此语句块</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="示例"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你已经成年了。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">if</code> 语句判断变量 <code class="language-plaintext highlighter-rouge">age</code> 是否大于或等于 18。如果条件成立（<code class="language-plaintext highlighter-rouge">age</code> &gt;= 18），则输出 <code class="language-plaintext highlighter-rouge">"你已经成年了。"</code>。</p>

<h3 id="2-ifelse-语句"><span style="color: rgb(0,191,255);"><strong>2. <code class="language-plaintext highlighter-rouge">if...else</code> 语句</strong></span></h3>

<p><code class="language-plaintext highlighter-rouge">if...else</code> 语句在 <code class="language-plaintext highlighter-rouge">if</code> 条件为假时，执行 <code class="language-plaintext highlighter-rouge">else</code> 后面的代码块。</p>

<h4 id="语法-1"><span style="color: rgb(238,130,238);"><strong>语法：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="c1">// 如果 condition 为真，执行此语句块</span>
<span class="p">}</span> 
<span class="k">else</span>
<span class="p">{</span>
    <span class="c1">// 如果 condition 为假，执行此语句块</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="示例-1"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你已经成年了。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span> 
<span class="k">else</span> 
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你还未成年。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个例子中，如果 <code class="language-plaintext highlighter-rouge">age</code> 大于或等于 18，则输出 <code class="language-plaintext highlighter-rouge">"你已经成年了。"</code>；否则，输出 <code class="language-plaintext highlighter-rouge">"你还未成年。" </code>。</p>

<h3 id="3-嵌套-if-语句"><span style="color: rgb(0,191,255);"><strong>3. 嵌套 <code class="language-plaintext highlighter-rouge">if</code> 语句</strong></span></h3>

<p>可以在 <code class="language-plaintext highlighter-rouge">if</code> 或 <code class="language-plaintext highlighter-rouge">else</code> 语句内嵌套其他的 <code class="language-plaintext highlighter-rouge">if</code> 或 <code class="language-plaintext highlighter-rouge">else</code> 语句，以处理更复杂的条件判断。</p>

<h4 id="示例-2"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">21</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你已经成年且可以合法饮酒。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你已经成年，但不能合法饮酒。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">else</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你还未成年。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这里，首先判断是否成年，然后在成年基础上判断是否可以合法饮酒。</p>

<h3 id="4-switch-语句"><span style="color: rgb(0,191,255);"><strong>4. <code class="language-plaintext highlighter-rouge">switch</code> 语句</strong></span></h3>

<p><code class="language-plaintext highlighter-rouge">switch</code> 语句用于测试一个变量是否等于多个值中的某一个。它适用于多个条件的判断。</p>

<h4 id="语法-2"><span style="color: rgb(238,130,238);"><strong>语法：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span> <span class="p">(</span><span class="n">variable</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">case</span> <span class="n">value1</span><span class="p">:</span>
        <span class="c1">// 如果 variable == value1，执行此语句块</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">value2</span><span class="p">:</span>
        <span class="c1">// 如果 variable == value2，执行此语句块</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="nl">default:</span>
        <span class="c1">// 如果 variable 不等于任何 case，执行此语句块</span>
        <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="示例-3"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">day</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="k">switch</span> <span class="p">(</span><span class="n">day</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"今天是星期一。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"今天是星期二。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">3</span><span class="p">:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"今天是星期三。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="nl">default:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"输入无效。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>在这个例子中，<code class="language-plaintext highlighter-rouge">switch</code> 语句根据变量 <code class="language-plaintext highlighter-rouge">day</code> 的值选择匹配的 <code class="language-plaintext highlighter-rouge">case</code>，并执行相应的代码块。</p>

<h3 id="5-嵌套-switch-语句"><span style="color: rgb(0,191,255);"><strong>5. 嵌套 <code class="language-plaintext highlighter-rouge">switch</code> 语句</strong></span></h3>

<p><code class="language-plaintext highlighter-rouge">switch</code> 语句也可以嵌套，即在一个 <code class="language-plaintext highlighter-rouge">case</code> 或 <code class="language-plaintext highlighter-rouge">default</code> 分支内使用另一个 <code class="language-plaintext highlighter-rouge">switch</code> 语句。</p>

<h4 id="示例-4"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">choice</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">subChoice</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="k">switch</span> <span class="p">(</span><span class="n">choice</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">switch</span> <span class="p">(</span><span class="n">subChoice</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"选择了选项1的子选项1。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"选择了选项1的子选项2。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"选择了选项2。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"无效选择。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这个例子展示了在 <code class="language-plaintext highlighter-rouge">switch</code> 语句中的 <code class="language-plaintext highlighter-rouge">case</code> 选项内嵌套另一个 <code class="language-plaintext highlighter-rouge">switch</code> 语句。</p>

<h3 id="6-条件运算符--"><span style="color: rgb(0,191,255);"><strong>6. 条件运算符 <code class="language-plaintext highlighter-rouge">? :</code></strong></span></h3>

<p>条件运算符 <code class="language-plaintext highlighter-rouge">? :</code>，又称三目运算符，是一种简洁的方式来替代 <code class="language-plaintext highlighter-rouge">if...else</code> 语句。它的形式如下：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">condition</span> <span class="o">?</span> <span class="n">expression1</span> <span class="o">:</span> <span class="n">expression2</span><span class="p">;</span>
</code></pre></div></div>

<p>如果 <code class="language-plaintext highlighter-rouge">condition</code> 为真，则计算并返回 <code class="language-plaintext highlighter-rouge">expression1</code>，否则计算并返回 <code class="language-plaintext highlighter-rouge">expression2</code>。</p>

<h4 id="示例-5"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
<span class="n">string</span> <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">)</span> <span class="o">?</span> <span class="s">"你已经成年了。"</span> <span class="o">:</span> <span class="s">"你还未成年。"</span><span class="p">;</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</code></pre></div></div>

<p>在这个例子中，三目运算符判断 <code class="language-plaintext highlighter-rouge">age</code> 是否大于或等于 18。如果条件成立，返回 <code class="language-plaintext highlighter-rouge">"你已经成年了。"</code>，否则返回 <code class="language-plaintext highlighter-rouge">"你还未成年。" </code>。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[判断结构]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">循环</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Loop/" rel="alternate" type="text/html" title="循环" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Loop</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Loop/"><![CDATA[<h1 id="循环详解"><span style="color: rgb(255,127,80);"><strong>循环详解</strong></span></h1>

<p>在编程中，有时我们需要多次执行相同的代码块。通常，代码按照从上到下的顺序执行，但通过循环结构，我们可以更高效地处理重复操作。</p>

<p>C++ 提供了多种循环类型及控制语句，以下是详细的介绍与示例。</p>

<h3 id="循环结构"><span style="color: rgb(0,191,255);"><strong>循环结构</strong></span></h3>

<p>循环语句允许多次执行代码块。以下是 C++ 中的主要循环类型：</p>

<h4 id="1-while-循环"><span style="color: rgb(32,178,170);"><strong>1. while 循环</strong></span></h4>

<p><code class="language-plaintext highlighter-rouge">while</code> 循环在每次执行循环主体前检查条件是否为真。</p>

<p><span style="color: rgb(238,130,238);"><strong>语法：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// 循环体</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Iteration: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Iteration</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">2</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">3</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">4</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">5</span>
</code></pre></div></div>

<h4 id="2-for-循环"><span style="color: rgb(32,178,170);"><strong>2. for 循环</strong></span></h4>

<p><code class="language-plaintext highlighter-rouge">for</code> 循环适用于已知循环次数的情况，可以简化循环变量的管理。</p>

<p><span style="color: rgb(238,130,238);"><strong>语法：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="n">initialization</span><span class="p">;</span> <span class="n">condition</span><span class="p">;</span> <span class="n">increment</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// 循环体</span>
<span class="p">}</span>
</code></pre></div></div>
<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Iteration: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Iteration</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">2</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">3</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">4</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">5</span>
</code></pre></div></div>

<h4 id="3-dowhile-循环"><span style="color: rgb(32,178,170);"><strong>3. do…while 循环</strong></span></h4>

<p>与 <code class="language-plaintext highlighter-rouge">while</code> 类似，但循环条件在循环体之后检查，因此循环体至少执行一次。</p>

<p><span style="color: rgb(238,130,238);"><strong>语法：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">do</span> <span class="p">{</span>
    <span class="c1">// 循环体</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">condition</span><span class="p">);</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">do</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Iteration: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Iteration</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">2</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">3</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">4</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">5</span>
</code></pre></div></div>

<h4 id="4-嵌套循环"><span style="color: rgb(32,178,170);"><strong>4. 嵌套循环</strong></span></h4>

<p>可以在一个循环内部嵌套另一个循环。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Outer loop: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">", Inner loop: "</span> <span class="o">&lt;&lt;</span> <span class="n">j</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Outer loop</span><span class="pi">:</span> <span class="s">1, Inner loop</span><span class="err">:</span> <span class="m">1</span>
<span class="na">Outer loop</span><span class="pi">:</span> <span class="s">1, Inner loop</span><span class="err">:</span> <span class="m">2</span>
<span class="na">Outer loop</span><span class="pi">:</span> <span class="s">2, Inner loop</span><span class="err">:</span> <span class="m">1</span>
<span class="na">Outer loop</span><span class="pi">:</span> <span class="s">2, Inner loop</span><span class="err">:</span> <span class="m">2</span>
<span class="na">Outer loop</span><span class="pi">:</span> <span class="s">3, Inner loop</span><span class="err">:</span> <span class="m">1</span>
<span class="na">Outer loop</span><span class="pi">:</span> <span class="s">3, Inner loop</span><span class="err">:</span> <span class="m">2</span>
</code></pre></div></div>

<h3 id="循环控制语句"><span style="color: rgb(0,191,255);"><strong>循环控制语句</strong></span></h3>

<p>C++ 提供以下控制语句，用于修改循环的正常执行顺序：</p>

<h4 id="-1-break-语句"><span style="color: rgb(32,178,170);">** 1. break 语句**</span></h4>

<p>终止整个循环。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Iteration: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Iteration</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">2</span>
</code></pre></div></div>

<h4 id="2-continue-语句"><span style="color: rgb(32,178,170);"><strong>2. continue 语句</strong></span></h4>

<p>跳过本次循环的剩余部分，直接开始下一次循环。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Iteration: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Iteration</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">2</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">4</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">5</span>
</code></pre></div></div>

<h4 id="3-goto-语句"><span style="color: rgb(32,178,170);"><strong>3. goto 语句</strong></span></h4>

<p>将控制转移到指定标签处，不建议使用。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nl">label:</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Iteration: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
        <span class="k">goto</span> <span class="n">label</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Iteration</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">2</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">3</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">4</span>
<span class="na">Iteration</span><span class="pi">:</span> <span class="m">5</span>
</code></pre></div></div>

<h4 id="4-switch-语句"><span style="color: rgb(32,178,170);"><strong>4. switch 语句</strong></span></h4>

<p>根据变量的值执行不同的分支语句。程序流将继续执行紧接着 <code class="language-plaintext highlighter-rouge">switch</code> 的下一条语句。</p>

<p><span style="color: rgb(238,130,238);"><strong>语法：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span> <span class="p">(</span><span class="n">variable</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">case</span> <span class="n">value1</span><span class="p">:</span>
        <span class="c1">// 语句</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">value2</span><span class="p">:</span>
        <span class="c1">// 语句</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="nl">default:</span>
        <span class="c1">// 默认语句</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">switch</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Number is 1"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Number is 2"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="mi">3</span><span class="p">:</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Number is 3"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="nl">default:</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Number is unknown"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">Number is </span><span class="m">2</span>
</code></pre></div></div>

<h3 id="无限循环"><span style="color: rgb(0,191,255);"><strong>无限循环</strong></span></h3>

<p>如果循环条件始终为真，则循环不会终止。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(;;)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"This loop runs forever."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>提示：</strong> 按 <code class="language-plaintext highlighter-rouge">Ctrl + C</code> 终止无限循环。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[循环详解]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">运算符</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Operator/" rel="alternate" type="text/html" title="运算符" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Operator</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Operator/"><![CDATA[<h1 id="运算符"><span style="color: rgb(255,127,80);"><strong>运算符</strong></span></h1>

<p>运算符是告诉编译器执行特定数学或逻辑操作的符号。C++ 提供了以下类型的运算符：</p>

<ul>
  <li>算术运算符</li>
  <li>关系运算符</li>
  <li>逻辑运算符</li>
  <li>位运算符</li>
  <li>赋值运算符</li>
  <li>杂项运算符</li>
</ul>

<h3 id="算术运算符"><span style="color: rgb(32,178,170);"><strong>算术运算符</strong></span></h3>

<p>以下为 C++ 支持的算术运算符（假设 <code class="language-plaintext highlighter-rouge">A = 10</code>，<code class="language-plaintext highlighter-rouge">B = 20</code>）：</p>

<table>
  <thead>
    <tr>
      <th>运算符</th>
      <th>描述</th>
      <th>示例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">+</code></td>
      <td>把两个操作数相加</td>
      <td><code class="language-plaintext highlighter-rouge">A + B = 30</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-</code></td>
      <td>从第一个操作数中减去第二个操作数</td>
      <td><code class="language-plaintext highlighter-rouge">A - B = -10</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">*</code></td>
      <td>把两个操作数相乘</td>
      <td><code class="language-plaintext highlighter-rouge">A * B = 200</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">/</code></td>
      <td>分子除以分母</td>
      <td><code class="language-plaintext highlighter-rouge">B / A = 2</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%</code></td>
      <td>取模运算符，整除后的余数</td>
      <td><code class="language-plaintext highlighter-rouge">B % A = 0</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">++</code></td>
      <td>自增运算符，整数值增加 1</td>
      <td><code class="language-plaintext highlighter-rouge">A++ = 11</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">--</code></td>
      <td>自减运算符，整数值减少 1</td>
      <td><code class="language-plaintext highlighter-rouge">A-- = 9</code></td>
    </tr>
  </tbody>
</table>

<h4 id="示例代码"><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">21</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">/</span> <span class="n">b</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">d</span><span class="o">++</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">d</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> 
    <span class="n">c</span> <span class="o">=</span> <span class="n">d</span><span class="o">--</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出结果"><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">c = </span><span class="m">31</span>
<span class="s">c = </span><span class="m">11</span>
<span class="s">c = </span><span class="m">210</span>
<span class="s">c = </span><span class="m">2</span>
<span class="s">c = </span><span class="m">1</span>
<span class="s">c = </span><span class="m">10</span>
<span class="s">c = </span><span class="m">10</span>
</code></pre></div></div>

<h3 id="关系运算符"><span style="color: rgb(32,178,170);"><strong>关系运算符</strong></span></h3>

<p>以下为 C++ 支持的关系运算符（假设 <code class="language-plaintext highlighter-rouge">A = 10</code>，<code class="language-plaintext highlighter-rouge">B = 20</code>）：</p>

<table>
  <thead>
    <tr>
      <th>运算符</th>
      <th>描述</th>
      <th>示例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">==</code></td>
      <td>检查两个操作数是否相等，如果相等条件为真</td>
      <td><code class="language-plaintext highlighter-rouge">(A == B)</code> 假</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">!=</code></td>
      <td>检查两个操作数是否不相等，如果不相等条件为真</td>
      <td><code class="language-plaintext highlighter-rouge">(A != B)</code> 真</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&gt;</code></td>
      <td>检查左操作数是否大于右操作数，如果是条件为真</td>
      <td><code class="language-plaintext highlighter-rouge">(A &gt; B)</code> 假</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;</code></td>
      <td>检查左操作数是否小于右操作数，如果是条件为真</td>
      <td><code class="language-plaintext highlighter-rouge">(A &lt; B)</code> 真</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&gt;=</code></td>
      <td>检查左操作数是否大于或等于右操作数，如果是条件为真</td>
      <td><code class="language-plaintext highlighter-rouge">(A &gt;= B)</code> 假</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;=</code></td>
      <td>检查左操作数是否小于或等于右操作数，如果是条件为真</td>
      <td><code class="language-plaintext highlighter-rouge">(A &lt;= B)</code> 真</td>
    </tr>
  </tbody>
</table>

<h4 id="示例代码-1"><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">)</span> 
    	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a == b"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">else</span> 
    	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a != b"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">)</span> 
    	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a &lt; b"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">else</span> 
    	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a &gt;= b"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出结果-1"><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">a != b</span>
<span class="s">a &gt;= b</span>
</code></pre></div></div>

<h3 id="逻辑运算符"><span style="color: rgb(32,178,170);"><strong>逻辑运算符</strong></span></h3>

<p>以下为 C++ 支持的逻辑运算符（假设 <code class="language-plaintext highlighter-rouge">A = 1</code>，<code class="language-plaintext highlighter-rouge">B = 0</code>）：</p>

<table>
  <tbody>
    <tr>
      <td> </td>
      <td>称为逻辑或运算符。如果两个操作数中有任意一个 true，则条件为 true。	(A</td>
      <td> </td>
      <td>B) 为 true。</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>运算符</th>
      <th>描述</th>
      <th>示例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&amp;&amp;</code></td>
      <td>称为逻辑与运算符。如果两个操作数都为 <code class="language-plaintext highlighter-rouge">true</code>，则条件为 <code class="language-plaintext highlighter-rouge">true</code>。</td>
      <td><code class="language-plaintext highlighter-rouge">(A &amp;&amp; B)</code> 为 <code class="language-plaintext highlighter-rouge">false</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">||</code></td>
      <td>称为逻辑或运算符。如果两个操作数中有任意一个 true，则条件为 true。</td>
      <td><code class="language-plaintext highlighter-rouge">(A||B)</code> 为　<code class="language-plaintext highlighter-rouge">true</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">!</code></td>
      <td>称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为 <code class="language-plaintext highlighter-rouge">true</code>，则逻辑非运算符将使其为 <code class="language-plaintext highlighter-rouge">false</code>。</td>
      <td><code class="language-plaintext highlighter-rouge">!(A &amp;&amp; B)</code> 为 <code class="language-plaintext highlighter-rouge">true</code></td>
    </tr>
  </tbody>
</table>

<h4 id="示例代码-2"><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">&amp;&amp;</span> <span class="n">b</span><span class="p">)</span> 
      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"条件为真"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">||</span> <span class="n">b</span><span class="p">)</span> 
      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"条件为真"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">a</span> <span class="o">&amp;&amp;</span> <span class="n">b</span><span class="p">))</span> 
      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"条件为真"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出结果-2"><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">条件为真</span>
<span class="s">条件为真</span>
<span class="s">条件为真</span>
</code></pre></div></div>

<h3 id="位运算符"><span style="color: rgb(32,178,170);"><strong>位运算符</strong></span></h3>

<p>位运算符作用于位，并逐位执行操作。以下为 C++ 支持的位运算符（假设 <code class="language-plaintext highlighter-rouge">A = 60</code>，<code class="language-plaintext highlighter-rouge">B = 13</code>）：</p>

<table>
  <thead>
    <tr>
      <th>运算符</th>
      <th>描述</th>
      <th>示例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&amp;</code></td>
      <td>按位与操作，对应位都为 <code class="language-plaintext highlighter-rouge">1</code> 时结果为 <code class="language-plaintext highlighter-rouge">1</code>，否则为 <code class="language-plaintext highlighter-rouge">0</code></td>
      <td><code class="language-plaintext highlighter-rouge">A &amp; B = 12</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">|</code></td>
      <td>按位或操作，对应位只要有一个为 <code class="language-plaintext highlighter-rouge">1</code>，结果即为 <code class="language-plaintext highlighter-rouge">1</code></td>
      <td><code class="language-plaintext highlighter-rouge">A | B = 61</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">^</code></td>
      <td>按位异或操作，对应位相同为 <code class="language-plaintext highlighter-rouge">0</code>，不同为 <code class="language-plaintext highlighter-rouge">1</code></td>
      <td><code class="language-plaintext highlighter-rouge">A ^ B = 49</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">~</code></td>
      <td>按位取反操作，将每个位取反，即 <code class="language-plaintext highlighter-rouge">0</code> 变为 <code class="language-plaintext highlighter-rouge">1</code>，<code class="language-plaintext highlighter-rouge">1</code> 变为 <code class="language-plaintext highlighter-rouge">0</code></td>
      <td><code class="language-plaintext highlighter-rouge">~A = -61</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;&lt;</code></td>
      <td>左移操作符，将操作数的位左移指定的次数，右边用 <code class="language-plaintext highlighter-rouge">0</code> 填补</td>
      <td><code class="language-plaintext highlighter-rouge">A &lt;&lt; 2 = 240</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&gt;&gt;</code></td>
      <td>右移操作符，将操作数的位右移指定的次数，左边根据数值符号填补 <code class="language-plaintext highlighter-rouge">0</code> 或 <code class="language-plaintext highlighter-rouge">1</code></td>
      <td><code class="language-plaintext highlighter-rouge">A &gt;&gt; 2 = 15</code></td>
    </tr>
  </tbody>
</table>

<h4 id="示例代码-3"><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span>  <span class="c1">// 60 = 0011 1100  </span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>  <span class="c1">// 13 = 0000 1101</span>
    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span><span class="p">;</span>  <span class="c1">// 按位与</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a &amp; b = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">|</span> <span class="n">b</span><span class="p">;</span>  <span class="c1">// 按位或</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a | b = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="p">;</span>  <span class="c1">// 按位异或</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a ^ b = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="o">~</span><span class="n">a</span><span class="p">;</span>     <span class="c1">// 按位取反</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"~a = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 左移</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a &lt;&lt; 2 = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 右移</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a &gt;&gt; 2 = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出结果-3"><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">a &amp; b = </span><span class="m">12</span>
<span class="s">a | b = </span><span class="m">61</span>
<span class="s">a ^ b = </span><span class="m">49</span>
<span class="s">~a = -61</span>
<span class="s">a &lt;&lt; 2 = </span><span class="m">240</span>
<span class="s">a &gt;&gt; 2 = </span><span class="m">15</span>
</code></pre></div></div>

<h3 id="赋值运算符"><span style="color: rgb(32,178,170);"><strong>赋值运算符</strong></span></h3>

<p>赋值运算符用于将值赋给变量。以下为 C++ 支持的赋值运算符：</p>

<table>
  <thead>
    <tr>
      <th>运算符</th>
      <th>描述</th>
      <th>示例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">=</code></td>
      <td>简单赋值，将右操作数赋值给左操作数</td>
      <td><code class="language-plaintext highlighter-rouge">C = A + B</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">+=</code></td>
      <td>加且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C + A</code></td>
      <td><code class="language-plaintext highlighter-rouge">C += A</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-=</code></td>
      <td>减且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C - A</code></td>
      <td><code class="language-plaintext highlighter-rouge">C -= A</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">*=</code></td>
      <td>乘且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C * A</code></td>
      <td><code class="language-plaintext highlighter-rouge">C *= A</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">/=</code></td>
      <td>除且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C / A</code></td>
      <td><code class="language-plaintext highlighter-rouge">C /= A</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">%=</code></td>
      <td>求模且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C % A</code></td>
      <td><code class="language-plaintext highlighter-rouge">C %= A</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;&lt;=</code></td>
      <td>左移且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C &lt;&lt; 2</code></td>
      <td><code class="language-plaintext highlighter-rouge">C &lt;&lt;= 2</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&gt;&gt;=</code></td>
      <td>右移且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C &gt;&gt; 2</code></td>
      <td><code class="language-plaintext highlighter-rouge">C &gt;&gt;= 2</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&amp;=</code></td>
      <td>按位与且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C &amp; 2</code></td>
      <td><code class="language-plaintext highlighter-rouge">C &amp;= 2</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">^=</code></td>
      <td>按位异或且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C ^ 2</code></td>
      <td><code class="language-plaintext highlighter-rouge">C ^= 2</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">|=</code></td>
      <td>按位或且赋值，相当于 <code class="language-plaintext highlighter-rouge">C = C | 2</code></td>
      <td><code class="language-plaintext highlighter-rouge">C |= 2</code></td>
    </tr>
  </tbody>
</table>

<h4 id="示例代码-4"><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">21</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">+=</span> <span class="n">a</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c += a -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">-=</span> <span class="n">a</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c -= a -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">*=</span> <span class="n">a</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c *= a -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">/=</span> <span class="n">a</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c /= a -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">%=</span> <span class="n">a</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c %= a -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">&lt;&lt;=</span> <span class="mi">2</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c &lt;&lt;= 2 -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">&gt;&gt;=</span> <span class="mi">2</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c &gt;&gt;= 2 -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">&amp;=</span> <span class="mi">2</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c &amp;= 2 -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">^=</span> <span class="mi">2</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c ^= 2 -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">|=</span> <span class="mi">2</span><span class="p">;</span> 
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c |= 2 -&gt; c = "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="输出结果-4"><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">c = </span><span class="m">21</span>
<span class="s">c += a -&gt; c = </span><span class="m">42</span>
<span class="s">c -= a -&gt; c = </span><span class="m">21</span>
<span class="s">c *= a -&gt; c = </span><span class="m">441</span>
<span class="s">c /= a -&gt; c = </span><span class="m">21</span>
<span class="s">c %= a -&gt; c = </span><span class="m">11</span>
<span class="s">c &lt;&lt;= 2 -&gt; c = </span><span class="m">44</span>
<span class="s">c &gt;&gt;= 2 -&gt; c = </span><span class="m">11</span>
<span class="s">c &amp;= 2 -&gt; c = </span><span class="m">2</span>
<span class="s">c ^= 2 -&gt; c = </span><span class="m">0</span>
<span class="s">c |= 2 -&gt; c = </span><span class="m">2</span>
</code></pre></div></div>

<h3 id="杂项运算符"><span style="color: rgb(32,178,170);"><strong>杂项运算符</strong></span></h3>

<p>以下为 C++ 支持的杂项运算符：</p>

<table>
  <thead>
    <tr>
      <th>运算符</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sizeof</code></td>
      <td>返回变量的大小，例如 <code class="language-plaintext highlighter-rouge">sizeof(a)</code> 返回变量 <code class="language-plaintext highlighter-rouge">a</code> 的字节数。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">?:</code></td>
      <td>条件运算符，<code class="language-plaintext highlighter-rouge">Condition ? X : Y</code> 如果条件为真返回 <code class="language-plaintext highlighter-rouge">X</code>，否则返回 <code class="language-plaintext highlighter-rouge">Y</code>。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">,</code></td>
      <td>逗号运算符，顺序执行多个操作，返回最后一个表达式的值。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">.</code> 和 <code class="language-plaintext highlighter-rouge">-&gt;</code></td>
      <td>成员运算符，用于访问类、结构或联合的成员。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">(type)</code></td>
      <td>强制类型转换运算符，将一种数据类型转换为另一种数据类型，例如 <code class="language-plaintext highlighter-rouge">(int)3.14</code>。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&amp;</code></td>
      <td>返回变量地址，例如 <code class="language-plaintext highlighter-rouge">&amp;a</code> 返回变量 <code class="language-plaintext highlighter-rouge">a</code> 的地址。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">*</code></td>
      <td>指针运算符，解引用指针，例如 <code class="language-plaintext highlighter-rouge">*p</code> 返回指针 <code class="language-plaintext highlighter-rouge">p</code> 指向的值。</td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="运算符优先级"><span style="color: rgb(0,191,255);"><strong>运算符优先级</strong></span></h3>

<p>运算符的优先级决定了表达式的计算顺序。以下为运算符的优先级表：</p>

<p>| 类别   | 运算符                                          | 结合性   |
| —— | ———————————————– | ——– |
| 后缀   | <code class="language-plaintext highlighter-rouge">()</code> <code class="language-plaintext highlighter-rouge">[]</code> <code class="language-plaintext highlighter-rouge">-&gt;</code> <code class="language-plaintext highlighter-rouge">.</code> <code class="language-plaintext highlighter-rouge">++</code> <code class="language-plaintext highlighter-rouge">--</code>                    | 从左到右 |
| 一元   | <code class="language-plaintext highlighter-rouge">+</code> <code class="language-plaintext highlighter-rouge">-</code> <code class="language-plaintext highlighter-rouge">!</code> <code class="language-plaintext highlighter-rouge">~</code> <code class="language-plaintext highlighter-rouge">++</code> <code class="language-plaintext highlighter-rouge">--</code> <code class="language-plaintext highlighter-rouge">(type)</code> <code class="language-plaintext highlighter-rouge">&amp;</code> <code class="language-plaintext highlighter-rouge">sizeof</code> | 从右到左 |
| 乘除   | <code class="language-plaintext highlighter-rouge">*</code> <code class="language-plaintext highlighter-rouge">/</code> <code class="language-plaintext highlighter-rouge">%</code>                                     | 从左到右 |
| 加减   | <code class="language-plaintext highlighter-rouge">+</code> <code class="language-plaintext highlighter-rouge">-</code>                                         | 从左到右 |
|  移位  | <code class="language-plaintext highlighter-rouge">&lt;&lt;</code> ` »<code class="language-plaintext highlighter-rouge">                                      | 从左到右 | 
| 关系   | </code>&lt;<code class="language-plaintext highlighter-rouge"> </code>&lt;=<code class="language-plaintext highlighter-rouge"> </code>&gt;<code class="language-plaintext highlighter-rouge"> </code>&gt;=<code class="language-plaintext highlighter-rouge">                               | 从左到右 |
| 相等   | </code>==<code class="language-plaintext highlighter-rouge"> </code>!=<code class="language-plaintext highlighter-rouge">                                       | 从左到右 |
| 位与 AND | 	</code>&amp;<code class="language-plaintext highlighter-rouge">                                          | 从左到右 |
|位异或 XOR| 	</code>^<code class="language-plaintext highlighter-rouge"> 	       																| 从左到右 |
|位或 OR |	</code>|<code class="language-plaintext highlighter-rouge"> 	                                         | 从左到右 | 
| 逻辑与 | </code>&amp;&amp;<code class="language-plaintext highlighter-rouge">                                            | 从左到右 |
| 逻辑或 | </code>||<code class="language-plaintext highlighter-rouge">                                            | 从左到右 |
| 条件   | </code>?:<code class="language-plaintext highlighter-rouge">                                            | 从右到左 |
| 赋值   | </code>=<code class="language-plaintext highlighter-rouge"> </code>+=<code class="language-plaintext highlighter-rouge"> </code>-=<code class="language-plaintext highlighter-rouge"> </code>*=<code class="language-plaintext highlighter-rouge"> </code>/=<code class="language-plaintext highlighter-rouge"> </code>%=<code class="language-plaintext highlighter-rouge"> </code>»=<code class="language-plaintext highlighter-rouge"> </code>«=<code class="language-plaintext highlighter-rouge"> </code>&amp;=<code class="language-plaintext highlighter-rouge"> </code>^=<code class="language-plaintext highlighter-rouge"> </code>|=<code class="language-plaintext highlighter-rouge">  | 从右到左 |
| 逗号   | </code>,`                                             | 从左到右 |</p>

<h4 id="示例代码-5"><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">15</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">e</span><span class="p">;</span>
    <span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">*</span> <span class="n">c</span> <span class="o">/</span> <span class="n">d</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Result: "</span> <span class="o">&lt;&lt;</span> <span class="n">e</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>
<h4 id="输出结果-5"><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Result</span><span class="pi">:</span> <span class="m">90</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[运算符]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">注释</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/03/Annotation/" rel="alternate" type="text/html" title="注释" /><published>2025-01-03T00:00:00-08:00</published><updated>2025-01-03T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/03/Annotation</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/03/Annotation/"><![CDATA[<h1 id="注释"><span style="color: rgb(255,127,80);"><strong>注释</strong></span></h1>
<p>程序中的注释是用于解释代码的语句，可以帮助提高源代码的可读性。所有编程语言都支持某种形式的注释，以便开发者更容易理解代码的意图和功能。</p>

<p>C++ 支持两种类型的注释：单行注释和多行注释。在 C++ 中，注释中的内容会被编译器忽略，不会对程序的执行产生任何影响。</p>

<hr />

<h3 id="c-注释的两种形式"><span style="color: rgb(0,191,255);"><strong>C++ 注释的两种形式：</strong></span></h3>

<ul>
  <li>
    <p><strong>单行注释</strong>： 使用 <code class="language-plaintext highlighter-rouge">//</code> 开始，注释从 <code class="language-plaintext highlighter-rouge">//</code> 后开始直到行末。例如：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 这是一个单行注释</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello World!"</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>多行注释</strong>： 使用 <code class="language-plaintext highlighter-rouge">/*</code> 开始，以 <code class="language-plaintext highlighter-rouge">*/</code> 结束，可以注释多行文本。例如：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 这是一个多行注释
   可以跨越多行
*/</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello World!"</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="示例代码"><span style="color: rgb(0,191,255);"><strong>示例代码</strong></span></h3>
<ul>
  <li><strong>单行注释</strong>
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
  <span class="c1">// 这是一个单行注释</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello World!"</span><span class="p">;</span>  <span class="c1">// 语句后面的注释</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>在上面的代码中，编译器会忽略 // 这是一个注释 和 // 语句后面的注释，输出结果为：</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">Hello World!</span>
</code></pre></div></div>
<ul>
  <li><strong>多行注释</strong>
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
  <span class="cm">/* 这是一个多行注释
     可以跨越多行 */</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello World!"</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>在这段代码中，/* 这是一个多行注释 */ 会被编译器忽略，输出结果为：</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">Hello World!</span>
</code></pre></div></div>

<h3 id="注释嵌套"><span style="color: rgb(0,191,255);"><strong>注释嵌套</strong></span></h3>

<p>虽然注释可以嵌套使用，但有一些注意事项：</p>

<p><span style="color: rgb(238,130,238);"><strong>在 /* 和 */ 注释内，// 字符没有特殊的含义。</strong></span></p>

<p><span style="color: rgb(238,130,238);"><strong>在 // 注释内，/* 和 */ 字符也没有特殊的含义。</strong></span></p>

<p>因此，您可以在一种注释类型内使用另一种注释类型。例如：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 用于输出 Hello World 的注释

cout &lt;&lt; "Hello World"; // 输出 Hello World

*/</span>
</code></pre></div></div>
<p>这种嵌套的注释方式是允许的。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[注释 程序中的注释是用于解释代码的语句，可以帮助提高源代码的可读性。所有编程语言都支持某种形式的注释，以便开发者更容易理解代码的意图和功能。]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-1.png" /><media:content medium="image" url="http://localhost:4000/code-cover-1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>