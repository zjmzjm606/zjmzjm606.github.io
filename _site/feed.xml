<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-01-10T22:24:06+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tomorrow’s Blog</title><entry><title type="html">常量</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/06/Constant/" rel="alternate" type="text/html" title="常量" /><published>2025-01-06T00:00:00-08:00</published><updated>2025-01-06T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/06/Constant</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/06/Constant/"><![CDATA[<h1 id="常量"><span style="color: rgb(255,127,80);"><strong>常量</strong></span></h1>

<p>常量是指在程序执行期间固定不变的值。常量也称为字面量，其值在定义后不能修改。常量可以是任何基本数据类型，如整数、浮点数、字符、字符串和布尔值。常量与变量类似，只是其值在定义后不可改变。</p>

<p>在定义常量时，建议使用大写字母形式。这是一种良好的编程习惯，便于与普通变量区分开来。</p>

<hr />

<h3 id="1整数常量"><span style="color: rgb(0,191,255);"><strong>1.整数常量</strong></span></h3>

<p>整数常量有多种表示方式，可以是十进制、八进制或十六进制。基数通过前缀指定：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">0x</code> 或 <code class="language-plaintext highlighter-rouge">0X</code> 表示十六进制。</li>
  <li><code class="language-plaintext highlighter-rouge">0</code> 表示八进制。</li>
  <li>不带前缀表示十进制。</li>
</ul>

<p>整数常量还可以带有后缀，指定其类型：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">u</code> 或 <code class="language-plaintext highlighter-rouge">U</code> 表示无符号整数（unsigned）。</li>
  <li><code class="language-plaintext highlighter-rouge">l</code> 或 <code class="language-plaintext highlighter-rouge">L</code> 表示长整数（long）。</li>
</ul>

<p>后缀的顺序和大小写不敏感。</p>

<h4 id="合法示例"><span style="color: rgb(238,130,238);"><strong>合法示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">212</span>        <span class="c1">// 十进制</span>
<span class="mi">215u</span>       <span class="c1">// 无符号整数</span>
<span class="mh">0xFeeL</span>     <span class="c1">// 十六进制，长整数</span>
</code></pre></div></div>

<h4 id="非法示例"><span style="color: rgb(238,130,238);"><strong>非法示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mo">07</span><span class="mi">8</span>        <span class="c1">// 非法：8 不是八进制的数字</span>
<span class="mo">032UU</span>      <span class="c1">// 非法：不能重复后缀</span>
</code></pre></div></div>

<h4 id="各种类型的整数常量示例"><span style="color: rgb(238,130,238);"><strong>各种类型的整数常量示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">85</span>          <span class="c1">// 十进制</span>
<span class="mo">0213</span>        <span class="c1">// 八进制</span>
<span class="mh">0x4b</span>        <span class="c1">// 十六进制</span>
<span class="mi">30</span>          <span class="c1">// 整数</span>
<span class="mi">30u</span>         <span class="c1">// 无符号整数</span>
<span class="mi">30l</span>         <span class="c1">// 长整数</span>
<span class="mi">30ul</span>        <span class="c1">// 无符号长整数</span>
</code></pre></div></div>

<h3 id="2浮点常量"><span style="color: rgb(0,191,255);"><strong>2.浮点常量</strong></span></h3>

<p>浮点常量由整数部分、小数点、小数部分和指数部分组成。可以使用小数形式或指数形式表示。</p>

<ul>
  <li>小数形式：必须包含整数部分、小数部分或两者。</li>
  <li>指数形式：必须包含小数点和指数部分，或同时包含两者，指数使用 <code class="language-plaintext highlighter-rouge">e</code> 或 <code class="language-plaintext highlighter-rouge">E</code> 引入。</li>
</ul>

<h4 id="合法示例-1"><span style="color: rgb(238,130,238);"><strong>合法示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">3.14159</span>       <span class="c1">// 小数形式</span>
<span class="mf">314159E-5L</span>     <span class="c1">// 指数形式，长浮点数</span>
</code></pre></div></div>

<h4 id="非法示例-1"><span style="color: rgb(238,130,238);"><strong>非法示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">510</span><span class="n">E</span>          <span class="c1">// 非法：不完整的指数</span>
<span class="mi">210</span><span class="n">f</span>          <span class="c1">// 非法：缺少小数或指数</span>
<span class="p">.</span><span class="n">e55</span>          <span class="c1">// 非法：缺少整数或分数</span>
</code></pre></div></div>

<h3 id="3布尔常量"><span style="color: rgb(0,191,255);"><strong>3.布尔常量</strong></span></h3>

<p>布尔常量有两个值，分别是 <code class="language-plaintext highlighter-rouge">true</code> 和 <code class="language-plaintext highlighter-rouge">false</code>，它们表示真和假。在 C++ 中，不应将 <code class="language-plaintext highlighter-rouge">true</code> 视为 1，<code class="language-plaintext highlighter-rouge">false</code> 视为 0。</p>

<h3 id="4字符常量"><span style="color: rgb(0,191,255);"><strong>4.字符常量</strong></span></h3>

<p>字符常量用单引号 <code class="language-plaintext highlighter-rouge">'</code> 括起来。如果常量前有 <code class="language-plaintext highlighter-rouge">L</code>（仅当大写时），则表示宽字符常量（例如 <code class="language-plaintext highlighter-rouge">L'x'</code>）。否则，它是窄字符常量（例如 <code class="language-plaintext highlighter-rouge">'x'</code>）。</p>

<p>字符常量可以是普通字符、转义序列或通用字符。常见的转义序列如下：</p>

<table>
  <thead>
    <tr>
      <th>转义序列</th>
      <th>含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\\</code></td>
      <td>反斜杠字符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\'</code></td>
      <td>单引号字符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\"</code></td>
      <td>双引号字符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\?</code></td>
      <td>问号字符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\a</code></td>
      <td>警报铃声</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\b</code></td>
      <td>退格键</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\f</code></td>
      <td>换页符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\n</code></td>
      <td>换行符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\r</code></td>
      <td>回车</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\t</code></td>
      <td>水平制表符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\v</code></td>
      <td>垂直制表符</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\ooo</code></td>
      <td>八进制数</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\xhh...</code></td>
      <td>十六进制数</td>
    </tr>
  </tbody>
</table>

<h4 id="示例"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello</span><span class="se">\t</span><span class="s">World</span><span class="se">\n\n</span><span class="s">"</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">Hello   World</span>
</code></pre></div></div>

<h3 id="5字符串常量"><span style="color: rgb(0,191,255);"><strong>5.字符串常量</strong></span></h3>

<p>字符串字面量由双引号 <code class="language-plaintext highlighter-rouge">""</code> 括起来，包含普通字符、转义序列和通用字符。可以使用 <code class="language-plaintext highlighter-rouge">\</code> 将长字符串拆分为多行。</p>

<h4 id="示例-1"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">greeting</span> <span class="o">=</span> <span class="s">"hello, runoob"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">greeting</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>  <span class="c1">// 换行符</span>
    <span class="n">string</span> <span class="n">greeting2</span> <span class="o">=</span> <span class="s">"hello, \
                        runoob"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">greeting2</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出-1"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">hello, runoob</span>
<span class="s">hello, runoob</span>
</code></pre></div></div>

<hr />

<h3 id="定义常量"><span style="color: rgb(32,178,170);"><strong>定义常量</strong></span></h3>

<p>在 C++ 中，有两种常见的定义常量的方式：</p>

<ol>
  <li><strong>使用 <code class="language-plaintext highlighter-rouge">#define</code> 预处理器</strong></li>
  <li><strong>使用 <code class="language-plaintext highlighter-rouge">const</code> 关键字</strong></li>
</ol>

<h4 id="1使用-define-预处理器"><span style="color: rgb(0,191,255);"><strong>1.使用 <code class="language-plaintext highlighter-rouge">#define</code> 预处理器：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define identifier value
</span></code></pre></div></div>

<h4 id="示例-2"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="cp">#define LENGTH 10
#define WIDTH 5
#define NEWLINE '\n'
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">area</span> <span class="o">=</span> <span class="n">LENGTH</span> <span class="o">*</span> <span class="n">WIDTH</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">area</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">NEWLINE</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出-2"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">50</span>
</code></pre></div></div>

<h4 id="2使用-const-关键字"><span style="color: rgb(0,191,255);"><strong>2.使用 <code class="language-plaintext highlighter-rouge">const</code> 关键字：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">type</span> <span class="n">variable</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="示例-3"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">LENGTH</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">WIDTH</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="n">NEWLINE</span> <span class="o">=</span> <span class="sc">'\n'</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">area</span> <span class="o">=</span> <span class="n">LENGTH</span> <span class="o">*</span> <span class="n">WIDTH</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">area</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">NEWLINE</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出-3"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">50</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[常量]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-10.png" /><media:content medium="image" url="http://localhost:4000/code-cover-10.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">数字类型</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Number-Type/" rel="alternate" type="text/html" title="数字类型" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Number%20Type</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Number-Type/"><![CDATA[<h1 id="数字类型"><span style="color: rgb(255,127,80);"><strong>数字类型</strong></span></h1>

<p>在 C++ 中，我们可以使用多种数据类型来表示数字。常见的数字类型包括 <code class="language-plaintext highlighter-rouge">int</code>、<code class="language-plaintext highlighter-rouge">short</code>、<code class="language-plaintext highlighter-rouge">long</code>、<code class="language-plaintext highlighter-rouge">float</code> 和 <code class="language-plaintext highlighter-rouge">double</code>。这些数据类型在存储数字时具有不同的精度和范围，具体信息可以参考 C++ 数据类型一章。</p>

<h3 id="数字的定义"><span style="color: rgb(0,191,255);"><strong>数字的定义</strong></span></h3>

<p>在 C++ 中，我们可以定义不同类型的数字变量，并赋予它们数值。以下是一个例子，展示了如何定义和初始化多种数字类型：</p>

<h4 id="示例-1数字定义和输出"><span style="color: rgb(32,178,170);"><strong>示例 1：数字定义和输出</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// 定义不同类型的数字</span>
    <span class="kt">short</span> <span class="n">s</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="kt">long</span> <span class="n">l</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">f</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">d</span><span class="p">;</span>
    <span class="c1">// 给数字赋值</span>
    <span class="n">s</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>      <span class="c1">// short 类型</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>    <span class="c1">// int 类型</span>
    <span class="n">l</span> <span class="o">=</span> <span class="mi">1000000</span><span class="p">;</span> <span class="c1">// long 类型</span>
    <span class="n">f</span> <span class="o">=</span> <span class="mf">230.47</span><span class="p">;</span>  <span class="c1">// float 类型</span>
    <span class="n">d</span> <span class="o">=</span> <span class="mf">30949.374</span><span class="p">;</span> <span class="c1">// double 类型</span>
    <span class="c1">// 输出数字值</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"short  s: "</span> <span class="o">&lt;&lt;</span> <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"int    i: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"long   l: "</span> <span class="o">&lt;&lt;</span> <span class="n">l</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"float  f: "</span> <span class="o">&lt;&lt;</span> <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"double d: "</span> <span class="o">&lt;&lt;</span> <span class="n">d</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="输出"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">short  s</span><span class="pi">:</span> <span class="m">10</span>
<span class="na">int    i</span><span class="pi">:</span> <span class="m">1000</span>
<span class="na">long   l</span><span class="pi">:</span> <span class="m">1000000</span>
<span class="na">float  f</span><span class="pi">:</span> <span class="m">230.47</span>
<span class="na">double d</span><span class="pi">:</span> <span class="m">30949.4</span>
</code></pre></div></div>

<p>解释：这段代码展示了如何定义不同类型的数字，并将它们输出。注意 <code class="language-plaintext highlighter-rouge">float</code> 和 <code class="language-plaintext highlighter-rouge">double</code> 类型的数字会有一定的精度损失，输出时显示为近似值。</p>

<hr />

<h3 id="c-数学运算"><span style="color: rgb(0,191,255);"><strong>C++ 数学运算</strong></span></h3>

<p>C++ 提供了许多内置的数学函数，可以帮助我们对数字进行计算。为了使用这些函数，我们需要包含 <code class="language-plaintext highlighter-rouge">cmath</code> 头文件。</p>

<h4 id="常用数学函数"><span style="color: rgb(32,178,170);"><strong>常用数学函数</strong></span></h4>

<table>
  <thead>
    <tr>
      <th>函数</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">cos(double)</code></td>
      <td>返回弧度角的余弦值</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sin(double)</code></td>
      <td>返回弧度角的正弦值</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">tan(double)</code></td>
      <td>返回弧度角的正切值</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">log(double)</code></td>
      <td>返回参数的自然对数</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">pow(x, y)</code></td>
      <td>返回 <code class="language-plaintext highlighter-rouge">x</code> 的 <code class="language-plaintext highlighter-rouge">y</code> 次方</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">hypot(x, y)</code></td>
      <td>返回直角三角形斜边的长度（平方和的平方根）</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sqrt(double)</code></td>
      <td>返回参数的平方根</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">abs(int)</code></td>
      <td>返回整数的绝对值</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">fabs(double)</code></td>
      <td>返回浮点数的绝对值</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">floor(double)</code></td>
      <td>返回小于或等于参数的最大整数</td>
    </tr>
  </tbody>
</table>

<h4 id="示例-2数学运算"><span style="color: rgb(0,191,255);"><strong>示例 2：数学运算</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cmath&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// 定义不同类型的数字</span>
    <span class="kt">short</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1000</span><span class="p">;</span>
    <span class="kt">long</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">100000</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">230.47</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="mf">200.374</span><span class="p">;</span>
    <span class="c1">// 使用数学函数进行运算</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"sin(d): "</span> <span class="o">&lt;&lt;</span> <span class="n">sin</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>        <span class="c1">// 正弦函数</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"abs(i): "</span> <span class="o">&lt;&lt;</span> <span class="n">abs</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>        <span class="c1">// 整数的绝对值</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"floor(d): "</span> <span class="o">&lt;&lt;</span> <span class="n">floor</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>    <span class="c1">// 向下取整</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"sqrt(f): "</span> <span class="o">&lt;&lt;</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>      <span class="c1">// 平方根</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"pow(d, 2): "</span> <span class="o">&lt;&lt;</span> <span class="n">pow</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// d 的平方</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="输出-1"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">sin(d)</span><span class="pi">:</span> <span class="s">-0.634939</span>
<span class="na">abs(i)</span><span class="pi">:</span> <span class="m">1000</span>
<span class="na">floor(d)</span><span class="pi">:</span> <span class="m">200</span>
<span class="na">sqrt(f)</span><span class="pi">:</span> <span class="m">15.1812</span>
<span class="s">pow(d, 2)</span><span class="err">:</span> <span class="m">40149.7</span>
</code></pre></div></div>

<p>解释：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sin(d)</code> 计算了变量 <code class="language-plaintext highlighter-rouge">d</code>（200.374）的正弦值。</li>
  <li><code class="language-plaintext highlighter-rouge">abs(i)</code> 返回了变量 <code class="language-plaintext highlighter-rouge">i</code> 的绝对值。</li>
  <li><code class="language-plaintext highlighter-rouge">floor(d)</code> 返回了 <code class="language-plaintext highlighter-rouge">d</code> 的向下取整结果。</li>
  <li><code class="language-plaintext highlighter-rouge">sqrt(f)</code> 计算了变量 <code class="language-plaintext highlighter-rouge">f</code>（230.47）的平方根。</li>
  <li><code class="language-plaintext highlighter-rouge">pow(d, 2)</code> 计算了变量 <code class="language-plaintext highlighter-rouge">d</code> 的平方。</li>
</ul>

<hr />

<h3 id="c-随机数"><span style="color: rgb(0,191,255);"><strong>C++ 随机数</strong></span></h3>

<p>有时，我们需要在程序中生成随机数。C++ 提供了 <code class="language-plaintext highlighter-rouge">rand()</code> 函数来生成伪随机数，但需要先调用 <code class="language-plaintext highlighter-rouge">srand()</code> 来设置种子。通常，我们使用 <code class="language-plaintext highlighter-rouge">time()</code> 函数来获取系统当前时间作为种子。</p>

<h4 id="示例-3生成随机数"><span style="color: rgb(32,178,170);"><strong>示例 3：生成随机数</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;ctime&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    <span class="c1">// 设置随机数种子</span>
    <span class="n">srand</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)));</span>
    <span class="c1">// 生成并输出 10 个随机数</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">j</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"随机数: "</span> <span class="o">&lt;&lt;</span> <span class="n">j</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="输出示例"><span style="color: rgb(238,130,238);"><strong>输出（示例）：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">随机数</span><span class="pi">:</span> <span class="m">1748144778</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">630873888</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">2134540646</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">219404170</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">902129458</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">920445370</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">1319072661</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">257938873</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">1256201101</span>
<span class="na">随机数</span><span class="pi">:</span> <span class="m">580322989</span>
</code></pre></div></div>

<p>解释：每次运行时，输出的随机数会有所不同。<code class="language-plaintext highlighter-rouge">srand()</code> 用当前时间作为种子，确保每次生成的随机数序列不同。</p>

<hr />

<h3 id="c-数学常数"><span style="color: rgb(0,191,255);"><strong>C++ 数学常数</strong></span></h3>

<p>从 C++20 开始，标准库中提供了几个常见的数学常数，如 π、e 和黄金比例等。它们定义在 <code class="language-plaintext highlighter-rouge">std::numbers</code> 命名空间下。</p>

<h4 id="示例-4数学常数"><span style="color: rgb(32,178,170);"><strong>示例 4：数学常数</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cmath&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;numbers&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// 输出数学常数</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">numbers</span><span class="o">::</span><span class="n">pi</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"e: "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">numbers</span><span class="o">::</span><span class="n">e</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"phi: "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">numbers</span><span class="o">::</span><span class="n">phi</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="输出-2"><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pi</span><span class="pi">:</span> <span class="m">3.14159</span>
<span class="na">e</span><span class="pi">:</span> <span class="m">2.71828</span>
<span class="na">phi</span><span class="pi">:</span> <span class="m">1.61803</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[数字类型]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">基本数据类型</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Variable-Types/" rel="alternate" type="text/html" title="基本数据类型" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Variable%20Types</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Variable-Types/"><![CDATA[<h1 id="基本数据类型"><span style="color: rgb(255,127,80);"><strong>基本数据类型</strong></span></h1>

<p>在 C++ 中，<strong>变量</strong>是程序中用于存储数据的命名存储区。每个变量都有一个指定的类型，类型决定了变量所占用的内存大小、数据布局及可以存储的数据值范围。</p>

<p>变量的名称由字母、数字和下划线组成，但必须以字母或下划线开头。需要注意的是，C++ 区分大小写，即大写字母和小写字母被视为不同的字符。</p>

<hr />

<p>在 C++ 中，基本数据类型主要有以下几种：</p>

<h3 id="1-基本数据类型"><span style="color: rgb(0,191,255);"><strong>1. 基本数据类型</strong></span></h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">bool</code></td>
      <td>布尔类型，存储值 <code class="language-plaintext highlighter-rouge">true</code> 或 <code class="language-plaintext highlighter-rouge">false</code>，占用 1 个字节。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">char</code></td>
      <td>字符类型，用于存储 ASCII 字符，通常占用 1 个字节。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">int</code></td>
      <td>整数类型，通常用于存储普通整数，通常占用 4 个字节。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">float</code></td>
      <td>单精度浮点数类型，通常占用 4 个字节，存储 1 位符号、8 位指数和 23 位小数。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">double</code></td>
      <td>双精度浮点数类型，通常占用 8 个字节，存储 1 位符号、11 位指数和 52 位小数。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">void</code></td>
      <td>无类型，表示函数不返回值或指针没有类型。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">wchar_t</code></td>
      <td>宽字符类型，存储更大范围的字符，通常占用 2 或 4 个字节。</td>
    </tr>
  </tbody>
</table>

<h5 id="基本数据类型示例"><span style="color: rgb(32,178,170);"><strong>基本数据类型示例</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>        <span class="c1">// 布尔类型</span>
    <span class="kt">char</span> <span class="n">letter</span> <span class="o">=</span> <span class="sc">'A'</span><span class="p">;</span>       <span class="c1">// 字符类型</span>
    <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>            <span class="c1">// 整数类型</span>
    <span class="kt">float</span> <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14</span><span class="n">f</span><span class="p">;</span>        <span class="c1">// 单精度浮点数</span>
    <span class="kt">double</span> <span class="n">piApprox</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="p">;</span> <span class="c1">// 双精度浮点数</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Flag: "</span> <span class="o">&lt;&lt;</span> <span class="n">flag</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Letter: "</span> <span class="o">&lt;&lt;</span> <span class="n">letter</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Age: "</span> <span class="o">&lt;&lt;</span> <span class="n">age</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">pi</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Pi Approx: "</span> <span class="o">&lt;&lt;</span> <span class="n">piApprox</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">复制代码</span>
<span class="na">Flag</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">Letter</span><span class="pi">:</span> <span class="s">A</span>
<span class="na">Age</span><span class="pi">:</span> <span class="m">25</span>
<span class="na">Pi</span><span class="pi">:</span> <span class="m">3.14</span>
<span class="na">Pi Approx</span><span class="pi">:</span> <span class="m">3.14159</span>
</code></pre></div></div>

<h3 id="2-整数类型"><span style="color: rgb(0,191,255);"><strong>2. 整数类型</strong></span></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">int</code>: 用于表示普通整数，通常占用 4 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">short</code>: 短整数，通常占用 2 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">long</code>: 长整数，通常占用 4 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">long long</code>: 更长的整数，通常占用 8 个字节。</li>
</ul>

<h5 id="整数类型示例"><span style="color: rgb(32,178,170);"><strong>整数类型示例</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">short</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">32767</span><span class="p">;</span>        <span class="c1">// 短整数类型，最大值</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">100000</span><span class="p">;</span>         <span class="c1">// 普通整数类型</span>
    <span class="kt">long</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">1000000000</span><span class="p">;</span>    <span class="c1">// 长整数类型</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span> <span class="o">=</span> <span class="mi">1000000000000</span><span class="p">;</span> <span class="c1">// 超长整数类型</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Short: "</span> <span class="o">&lt;&lt;</span> <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Int: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Long: "</span> <span class="o">&lt;&lt;</span> <span class="n">l</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Long Long: "</span> <span class="o">&lt;&lt;</span> <span class="n">ll</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Short</span><span class="pi">:</span> <span class="m">32767</span>
<span class="na">Int</span><span class="pi">:</span> <span class="m">100000</span>
<span class="na">Long</span><span class="pi">:</span> <span class="m">1000000000</span>
<span class="na">Long Long</span><span class="pi">:</span> <span class="m">1000000000000</span>
</code></pre></div></div>

<h3 id="3-浮点类型"><span style="color: rgb(0,191,255);"><strong>3. 浮点类型</strong></span></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">float</code>: 单精度浮点数，通常占用 4 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">double</code>: 双精度浮点数，通常占用 8 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">long double</code>: 高精度浮点数，占用字节数根据系统不同而变化。</li>
</ul>

<h5 id="浮点类型示例"><span style="color: rgb(32,178,170);"><strong>浮点类型示例</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">float</span> <span class="n">piFloat</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="n">f</span><span class="p">;</span>  <span class="c1">// 单精度浮点数</span>
    <span class="kt">double</span> <span class="n">piDouble</span> <span class="o">=</span> <span class="mf">3.1415926535</span><span class="p">;</span> <span class="c1">// 双精度浮点数</span>
    <span class="kt">long</span> <span class="kt">double</span> <span class="n">piLongDouble</span> <span class="o">=</span> <span class="mf">3.14159265358979323846</span><span class="p">;</span> <span class="c1">// 高精度浮点数</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Float Pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">piFloat</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Double Pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">piDouble</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Long Double Pi: "</span> <span class="o">&lt;&lt;</span> <span class="n">piLongDouble</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Float Pi</span><span class="pi">:</span> <span class="m">3.14159</span>
<span class="na">Double Pi</span><span class="pi">:</span> <span class="m">3.14159</span>
<span class="na">Long Double Pi</span><span class="pi">:</span> <span class="m">3.14159</span>
</code></pre></div></div>

<h3 id="4-字符类型"><span style="color: rgb(0,191,255);"><strong>4. 字符类型</strong></span></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">char</code>: 单字节字符，通常占用 1 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">wchar_t</code>: 宽字符，通常占用 2 或 4 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">char16_t</code>: 16 位 Unicode 字符，占用 2 个字节。</li>
  <li><code class="language-plaintext highlighter-rouge">char32_t</code>: 32 位 Unicode 字符，占用 4 个字节。</li>
</ul>

<h5 id="字符类型示例"><span style="color: rgb(32,178,170);"><strong>字符类型示例</strong></span></h5>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">'A'</span><span class="p">;</span>             <span class="c1">// 字符类型</span>
    <span class="kt">wchar_t</span> <span class="n">wc</span> <span class="o">=</span> <span class="sc">L'你'</span><span class="p">;</span>        <span class="c1">// 宽字符类型</span>
    <span class="kt">char16_t</span> <span class="n">c16</span> <span class="o">=</span> <span class="sc">u'你'</span><span class="p">;</span>      <span class="c1">// 16位 Unicode 字符</span>
    <span class="kt">char32_t</span> <span class="n">c32</span> <span class="o">=</span> <span class="sc">U'你'</span><span class="p">;</span>      <span class="c1">// 32位 Unicode 字符</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Char: "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Wide Char: "</span> <span class="o">&lt;&lt;</span> <span class="n">wc</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Char16_t: "</span> <span class="o">&lt;&lt;</span> <span class="n">c16</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Char32_t: "</span> <span class="o">&lt;&lt;</span> <span class="n">c32</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Char</span><span class="pi">:</span> <span class="s">A</span>
<span class="na">Wide Char</span><span class="pi">:</span> <span class="s">你</span>
<span class="na">Char16_t</span><span class="pi">:</span> <span class="s">你</span>
<span class="na">Char32_t</span><span class="pi">:</span> <span class="s">你</span>
</code></pre></div></div>

<hr />

<h3 id="变量定义与声明">变量定义与声明</h3>

<h4 id="1-变量定义">1. 变量定义</h4>

<p>在 C++ 中，<strong>定义变量</strong>时指定其类型，并为该类型创建存储空间。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">type</span> <span class="n">variable_list</span><span class="p">;</span>
</code></pre></div></div>

<p>其中 <code class="language-plaintext highlighter-rouge">type</code> 是有效的 C++ 数据类型，<code class="language-plaintext highlighter-rouge">variable_list</code> 是一个或多个变量名（以逗号分隔）。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
<span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="n">ch</span><span class="p">;</span>
<span class="kt">float</span> <span class="n">f</span><span class="p">,</span> <span class="n">salary</span><span class="p">;</span>
<span class="kt">double</span> <span class="n">d</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="示例变量定义">示例：变量定义</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>  <span class="c1">// 定义并初始化 i 和 j</span>
    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">'A'</span><span class="p">;</span>            <span class="c1">// 定义字符类型变量 c</span>
    <span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">3.14</span><span class="n">f</span><span class="p">;</span>         <span class="c1">// 定义浮点数变量 f</span>
    <span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="mf">3.14159</span><span class="p">;</span>      <span class="c1">// 定义双精度浮点数变量 d</span>
    <span class="n">k</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">;</span>               <span class="c1">// 使用变量 i 和 j 计算 k</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"i: "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">", j: "</span> <span class="o">&lt;&lt;</span> <span class="n">j</span> <span class="o">&lt;&lt;</span> <span class="s">", k: "</span> <span class="o">&lt;&lt;</span> <span class="n">k</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"c: "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="s">", f: "</span> <span class="o">&lt;&lt;</span> <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="s">", d: "</span> <span class="o">&lt;&lt;</span> <span class="n">d</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">i</span><span class="pi">:</span> <span class="s">10, j</span><span class="err">:</span> <span class="s">20, k</span><span class="err">:</span> <span class="m">30</span>
<span class="na">c</span><span class="pi">:</span> <span class="s">A, f</span><span class="err">:</span> <span class="s">3.14, d</span><span class="err">:</span> <span class="m">3.14159</span>
</code></pre></div></div>

<h4 id="2-变量声明">2. 变量声明</h4>

<p><strong>变量声明</strong>是向编译器保证某个变量在某处存在。声明不需要提供完整的变量定义，仅需指定类型和名称即可。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>  <span class="c1">// 声明变量 a 和 b</span>
<span class="k">extern</span> <span class="kt">float</span> <span class="n">f</span><span class="p">;</span>   <span class="c1">// 声明变量 f</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">extern</code> 关键字用于声明变量，表明该变量在其他地方定义。例如，在多个文件中，你可以在头文件声明变量，在源文件中进行定义。</p>

<h4 id="示例变量声明与定义">示例：变量声明与定义</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>  <span class="c1">// 声明变量 a 和 b</span>
<span class="k">extern</span> <span class="kt">float</span> <span class="n">f</span><span class="p">;</span>   <span class="c1">// 声明变量 f</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>    <span class="c1">// 定义变量 a 和 b</span>
    <span class="kt">float</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">70.0</span> <span class="o">/</span> <span class="mf">3.0</span><span class="p">;</span>  <span class="c1">// 定义并初始化变量 f</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Sum of a and b: "</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"f: "</span> <span class="o">&lt;&lt;</span> <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Sum of a and b</span><span class="pi">:</span> <span class="m">30</span>
<span class="na">f</span><span class="pi">:</span> <span class="m">23.3333</span>
</code></pre></div></div>

<hr />

<h3 id="左值lvalues与右值rvalues">左值（Lvalues）与右值（Rvalues）</h3>

<p>C++ 中的表达式分为两种类型：</p>

<ul>
  <li><strong>左值（lvalue）</strong>：表示一个内存位置，可以对其进行赋值。左值可以出现在赋值语句的左侧。</li>
  <li><strong>右值（rvalue）</strong>：表示某个具体的值，不能进行赋值。右值通常出现在赋值语句的右侧，但不能出现在左侧。</li>
</ul>

<h4 id="示例左值与右值">示例：左值与右值</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>  <span class="c1">// 变量 x 是左值</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>  <span class="c1">// 变量 y 是左值</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>  <span class="c1">// 这是有效的，左值可以赋值</span>
    <span class="c1">// 10 = x; // 错误，10 是右值，不能在赋值语句的左侧</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"x: "</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="s">", y: "</span> <span class="o">&lt;&lt;</span> <span class="n">y</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>输出：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">x</span><span class="pi">:</span> <span class="s">20, y</span><span class="err">:</span> <span class="m">20</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[基本数据类型]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-3.png" /><media:content medium="image" url="http://localhost:4000/code-cover-3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">存储类</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Storage-Class/" rel="alternate" type="text/html" title="存储类" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Storage%20Class</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Storage-Class/"><![CDATA[<h1 id="存储类"><span style="color: rgb(255,127,80);"><strong>存储类</strong></span></h1>

<p>C++ 存储类定义了变量和函数的<strong>作用域</strong>（可见性）和<strong>生命周期</strong>。这些存储类说明符位于变量或函数类型之前。以下是 C++ 中常用的存储类：</p>

<h2 id="1-auto-存储类">1. <code class="language-plaintext highlighter-rouge">auto</code> 存储类</h2>

<ul>
  <li>
    <p><strong>定义</strong>：<code class="language-plaintext highlighter-rouge">auto</code> 是默认存储类，通常可以省略不写。</p>
  </li>
  <li>
    <p><strong>特点</strong>：<code class="language-plaintext highlighter-rouge">auto</code> 指定的变量具有自动存储期，即变量的生命周期仅限于定义它的块（block）。<code class="language-plaintext highlighter-rouge">auto</code> 变量通常分配在栈上。</p>

    <p>从 C++11 起，<code class="language-plaintext highlighter-rouge">auto</code> 用于根据初始化表达式推断变量类型：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>     <span class="c1">// double</span>
<span class="k">auto</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"hello"</span><span class="p">;</span>  <span class="c1">// const char*</span>
</code></pre></div>    </div>

    <p>从 C++17 起，<code class="language-plaintext highlighter-rouge">auto</code> 不再是存储类说明符。</p>
  </li>
</ul>

<h2 id="2-register-存储类">2. <code class="language-plaintext highlighter-rouge">register</code> 存储类</h2>

<ul>
  <li>
    <p><strong>定义</strong>：用于建议编译器将变量存储在 CPU 寄存器中，以提高访问速度。</p>
  </li>
  <li>
    <p><strong>特点</strong>：虽然可以提高访问速度，但它是一个建议，编译器可以忽略此声明。在 C++11 后，<code class="language-plaintext highlighter-rouge">register</code> 已被弃用。</p>

    <p>语法：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">register</span> <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="3-static-存储类">3. <code class="language-plaintext highlighter-rouge">static</code> 存储类</h2>

<ul>
  <li>
    <p><strong>定义</strong>：用于定义具有静态存储期的变量或函数，生命周期贯穿整个程序的运行期。</p>
  </li>
  <li>
    <p><strong>特点</strong>：在函数内部，<code class="language-plaintext highlighter-rouge">static</code> 变量的值在函数调用之间保持不变。对于全局作用域，<code class="language-plaintext highlighter-rouge">static</code> 使变量具有内部链接，仅在定义它的文件中可见。</p>

    <p>示例：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">int</span> <span class="n">staticVar</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 函数调用之间保持不变</span>
</code></pre></div>    </div>

    <p><code class="language-plaintext highlighter-rouge">static</code> 还可用于类成员，使其共享同一副本。</p>
  </li>
</ul>

<h2 id="4-extern-存储类">4. <code class="language-plaintext highlighter-rouge">extern</code> 存储类</h2>

<ul>
  <li>
    <p><strong>定义</strong>：用于声明一个具有外部链接的变量或函数，允许多个文件之间共享。</p>
  </li>
  <li>
    <p><strong>特点</strong>：<code class="language-plaintext highlighter-rouge">extern</code> 使得一个全局变量或函数在其他文件中可见。</p>

    <p>示例：</p>

    <p><strong>main.cpp</strong>:</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>
</code></pre></div>    </div>

    <p><strong>support.cpp</strong>:</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>  <span class="c1">// 引用 main.cpp 中的 count</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="5-mutable-存储类-c11">5. <code class="language-plaintext highlighter-rouge">mutable</code> 存储类 (C++11)</h2>

<ul>
  <li>
    <p><strong>定义</strong>：用于修饰类中的成员变量，使它们可以在 <code class="language-plaintext highlighter-rouge">const</code> 成员函数中修改。</p>
  </li>
  <li>
    <p><strong>特点</strong>：通常用于需要在 <code class="language-plaintext highlighter-rouge">const</code> 环境下修改状态的变量，如缓存或计数器。</p>

    <p>示例：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">mutable</span> <span class="kt">int</span> <span class="n">mutableVar</span><span class="p">;</span>
  
    <span class="kt">void</span> <span class="n">constMemberFunc</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
        <span class="n">mutableVar</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span> <span class="c1">// 允许修改 mutable 成员变量</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="6-thread_local-存储类-c11">6. <code class="language-plaintext highlighter-rouge">thread_local</code> 存储类 (C++11)</h2>

<ul>
  <li>
    <p><strong>定义</strong>：用于在多线程环境中定义线程局部存储期的变量。</p>
  </li>
  <li>
    <p><strong>特点</strong>：每个线程拥有该变量的独立副本，线程结束时自动销毁。</p>

    <p>示例：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">thread_local</span> <span class="kt">int</span> <span class="n">threadVar</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span> <span class="c1">// 每个线程有自己的独立副本</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="存储类的总结">存储类的总结</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">auto</code> 和 <code class="language-plaintext highlighter-rouge">static</code> 是最常用的存储类，分别用于自动推断类型和保证变量生命周期。</li>
  <li><code class="language-plaintext highlighter-rouge">register</code> 是一个优化提示，已在 C++11 中废弃。</li>
  <li><code class="language-plaintext highlighter-rouge">extern</code> 用于跨文件共享变量或函数。</li>
  <li><code class="language-plaintext highlighter-rouge">mutable</code> 和 <code class="language-plaintext highlighter-rouge">thread_local</code> 引入于 C++11，分别用于在 <code class="language-plaintext highlighter-rouge">const</code> 函数内修改变量和管理线程特有变量。</li>
</ul>

<h2 id="示例代码展示不同存储类">示例代码：展示不同存储类</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="n">globalVar</span><span class="p">;</span>  <span class="c1">// 全局变量，extern 默认为外部链接</span>

<span class="kt">void</span> <span class="nf">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">auto</span> <span class="kt">int</span> <span class="n">localVar</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>  <span class="c1">// 局部变量，自动存储期</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">staticVar</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>  <span class="c1">// 静态变量，生命周期贯穿整个程序</span>

    <span class="c1">// const 变量默认为 static 存储期</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">constVar</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
    
    <span class="c1">// mutable 成员变量，可以在 const 函数中修改</span>
    <span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
    <span class="nl">public:</span>
        <span class="k">mutable</span> <span class="kt">int</span> <span class="n">mutableVar</span><span class="p">;</span>
  
        <span class="kt">void</span> <span class="n">constMemberFunc</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
            <span class="n">mutableVar</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span> <span class="c1">// 修改 mutable 成员变量</span>
        <span class="p">}</span>
    <span class="p">};</span>
  
    <span class="k">thread_local</span> <span class="kt">int</span> <span class="n">threadVar</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span>  <span class="c1">// 线程局部变量</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">extern</span> <span class="kt">int</span> <span class="n">externalVar</span><span class="p">;</span>  <span class="c1">// 声明外部变量</span>
    <span class="n">function</span><span class="p">();</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="存储类的详细说明">存储类的详细说明</h2>

<h3 id="1-auto-存储类-1">1. <code class="language-plaintext highlighter-rouge">auto</code> 存储类</h3>

<p>自 C++11 起，<code class="language-plaintext highlighter-rouge">auto</code> 用于两种场景：</p>

<ul>
  <li>
    <p>根据初始化表达式自动推断变量类型：</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>  <span class="c1">// double</span>
<span class="k">auto</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"hello"</span><span class="p">;</span>  <span class="c1">// const char*</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-register-存储类-1">2. <code class="language-plaintext highlighter-rouge">register</code> 存储类</h3>

<p><code class="language-plaintext highlighter-rouge">register</code> 用于将变量存储在寄存器中以提高访问速度，尤其是循环变量：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">register</span> <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 循环体</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="3-static-存储类-1">3. <code class="language-plaintext highlighter-rouge">static</code> 存储类</h3>

<p><code class="language-plaintext highlighter-rouge">static</code> 用于指示变量在程序运行期间持续存在，常用于局部静态变量和全局变量的作用域限制。</p>

<h4 id="局部静态变量">局部静态变量：</h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">func</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>  <span class="c1">// 局部静态变量</span>
    <span class="n">i</span><span class="o">++</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"i = "</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="4-extern-存储类-1">4. <code class="language-plaintext highlighter-rouge">extern</code> 存储类</h3>

<p><code class="language-plaintext highlighter-rouge">extern</code> 用于引用其他文件中的全局变量或函数。</p>

<h4 id="示例跨文件使用-extern">示例：跨文件使用 <code class="language-plaintext highlighter-rouge">extern</code></h4>

<p><strong>main.cpp</strong>:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>
<span class="kt">void</span> <span class="nf">write_extern</span><span class="p">();</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="n">write_extern</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>support.cpp</strong>:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>  <span class="c1">// 引用 main.cpp 中的 count</span>

<span class="kt">void</span> <span class="nf">write_extern</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Count is "</span> <span class="o">&lt;&lt;</span> <span class="n">count</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="5-mutable-存储类">5. <code class="language-plaintext highlighter-rouge">mutable</code> 存储类</h3>

<p><code class="language-plaintext highlighter-rouge">mutable</code> 使得类的成员可以在 <code class="language-plaintext highlighter-rouge">const</code> 成员函数中修改。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Example</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">mutable</span> <span class="kt">int</span> <span class="n">cachedValue</span><span class="p">;</span>  <span class="c1">// 可以在 const 函数中修改</span>

    <span class="kt">int</span> <span class="n">getValue</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">cachedValue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="nf">increment</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">cachedValue</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="6-thread_local-存储类">6. <code class="language-plaintext highlighter-rouge">thread_local</code> 存储类</h3>

<p><code class="language-plaintext highlighter-rouge">thread_local</code> 定义线程局部存储变量，每个线程都有自己独立的副本。</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">thread_local</span> <span class="kt">int</span> <span class="n">threadSpecificVar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">threadFunction</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">threadSpecificVar</span> <span class="o">=</span> <span class="n">id</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Thread "</span> <span class="o">&lt;&lt;</span> <span class="n">id</span> <span class="o">&lt;&lt;</span> <span class="s">": threadSpecificVar = "</span> <span class="o">&lt;&lt;</span> <span class="n">threadSpecificVar</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t1</span><span class="p">(</span><span class="n">threadFunction</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">t2</span><span class="p">(</span><span class="n">threadFunction</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>

    <span class="n">t1</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="n">t2</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p>通过合理使用存储类说明符，可以提升程序的可维护性和性能，帮助管理变量的生命周期、可见性和存储位置。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[存储类]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">修饰符类型</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Modifier-Types/" rel="alternate" type="text/html" title="修饰符类型" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Modifier%20Types</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Modifier-Types/"><![CDATA[<h1 id="修饰符"><span style="color: rgb(255,127,80);"><strong>修饰符</strong></span></h1>

<p>C++ 允许在基本数据类型（如 <code class="language-plaintext highlighter-rouge">char</code>、<code class="language-plaintext highlighter-rouge">int</code> 和 <code class="language-plaintext highlighter-rouge">double</code>）前使用修饰符，这些修饰符用于改变变量的行为，以满足不同的需求。修饰符提供了更多的灵活性和可定制性。</p>

<h2 id="常见的-c-数据类型修饰符"><span style="color: rgb(0,191,255);"><strong>常见的 C++ 数据类型修饰符</strong></span></h2>

<h3 id="1-signed"><span style="color: rgb(32,178,170);"><strong>1. <code class="language-plaintext highlighter-rouge">signed</code></strong></span></h3>
<ul>
  <li>表示变量可以存储负数。</li>
  <li>对于整型变量来说，<code class="language-plaintext highlighter-rouge">signed</code> 是默认值，因此通常可以省略。</li>
</ul>

<h3 id="2-unsigned"><span style="color: rgb(32,178,170);"><strong>2. <code class="language-plaintext highlighter-rouge">unsigned</code></strong></span></h3>
<ul>
  <li>表示变量不能存储负数。</li>
  <li>对于整型变量，<code class="language-plaintext highlighter-rouge">unsigned</code> 修饰符可以将变量的范围扩大一倍。</li>
</ul>

<h3 id="3-short"><span style="color: rgb(32,178,170);"><strong>3. <code class="language-plaintext highlighter-rouge">short</code></strong></span></h3>
<ul>
  <li>表示变量的范围比 <code class="language-plaintext highlighter-rouge">int</code> 更小。</li>
  <li><code class="language-plaintext highlighter-rouge">short int</code> 可以简写为 <code class="language-plaintext highlighter-rouge">short</code>。</li>
</ul>

<h3 id="4-long"><span style="color: rgb(32,178,170);"><strong>4. <code class="language-plaintext highlighter-rouge">long</code></strong></span></h3>
<ul>
  <li>表示变量的范围比 <code class="language-plaintext highlighter-rouge">int</code> 更大。</li>
  <li><code class="language-plaintext highlighter-rouge">long int</code> 可以简写为 <code class="language-plaintext highlighter-rouge">long</code>。</li>
</ul>

<h3 id="5-long-long"><span style="color: rgb(32,178,170);"><strong>5. <code class="language-plaintext highlighter-rouge">long long</code></strong></span></h3>
<ul>
  <li>表示变量的范围比 <code class="language-plaintext highlighter-rouge">long</code> 更大。</li>
  <li>这是 C++11 中新增的数据类型修饰符。</li>
</ul>

<h3 id="6-float"><span style="color: rgb(32,178,170);"><strong>6. <code class="language-plaintext highlighter-rouge">float</code></strong></span></h3>
<ul>
  <li>表示单精度浮点数。</li>
</ul>

<h3 id="7-double"><span style="color: rgb(32,178,170);"><strong>7. <code class="language-plaintext highlighter-rouge">double</code></strong></span></h3>
<ul>
  <li>表示双精度浮点数。</li>
</ul>

<h3 id="8-bool"><span style="color: rgb(32,178,170);"><strong>8. <code class="language-plaintext highlighter-rouge">bool</code></strong></span></h3>
<ul>
  <li>表示布尔类型，只有 <code class="language-plaintext highlighter-rouge">true</code> 和 <code class="language-plaintext highlighter-rouge">false</code> 两个值。</li>
</ul>

<h3 id="9-char"><span style="color: rgb(32,178,170);"><strong>9. <code class="language-plaintext highlighter-rouge">char</code></strong></span></h3>
<ul>
  <li>表示字符类型。</li>
</ul>

<h3 id="10-wchar_t"><span style="color: rgb(32,178,170);"><strong>10. <code class="language-plaintext highlighter-rouge">wchar_t</code></strong></span></h3>
<ul>
  <li>表示宽字符类型，可以存储 Unicode 字符。</li>
</ul>

<h3 id="修饰符的组合使用"><span style="color: rgb(0,191,255);"><strong>修饰符的组合使用</strong></span></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">signed</code>、<code class="language-plaintext highlighter-rouge">unsigned</code>、<code class="language-plaintext highlighter-rouge">long</code> 和 <code class="language-plaintext highlighter-rouge">short</code> 可以组合使用，且适用于整型。</li>
  <li><code class="language-plaintext highlighter-rouge">signed</code> 和 <code class="language-plaintext highlighter-rouge">unsigned</code> 可以应用于字符型（<code class="language-plaintext highlighter-rouge">char</code>）。</li>
  <li><code class="language-plaintext highlighter-rouge">long</code> 可应用于双精度型（<code class="language-plaintext highlighter-rouge">double</code>）。</li>
</ul>

<p><span style="color: rgb(238,130,238);"><strong>例如：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">num</span><span class="p">;</span> <span class="c1">// 无符号长整型</span>
</code></pre></div></div>

<p>C++ 还支持速记符号，可以省略 <code class="language-plaintext highlighter-rouge">int</code>，只写 <code class="language-plaintext highlighter-rouge">unsigned</code>、<code class="language-plaintext highlighter-rouge">short</code> 或 <code class="language-plaintext highlighter-rouge">long</code>，<code class="language-plaintext highlighter-rouge">int</code> 是隐含的。以下是一些例子：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">signed</span> <span class="kt">int</span> <span class="n">num1</span> <span class="o">=</span> <span class="o">-</span><span class="mi">10</span><span class="p">;</span> <span class="c1">// 有符号整型</span>
<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">num2</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 无符号整型</span>

<span class="kt">short</span> <span class="kt">int</span> <span class="n">num1</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// 短整型</span>
<span class="kt">long</span> <span class="kt">int</span> <span class="n">num2</span> <span class="o">=</span> <span class="mi">100000</span><span class="p">;</span> <span class="c1">// 长整型</span>

<span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">num1</span> <span class="o">=</span> <span class="mi">10000000000</span><span class="p">;</span> <span class="c1">// 长长整型</span>

<span class="kt">float</span> <span class="n">num1</span> <span class="o">=</span> <span class="mf">3.14</span><span class="n">f</span><span class="p">;</span> <span class="c1">// 单精度浮点数</span>
<span class="kt">double</span> <span class="n">num2</span> <span class="o">=</span> <span class="mf">2.71828</span><span class="p">;</span> <span class="c1">// 双精度浮点数</span>

<span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> <span class="c1">// 布尔类型</span>
<span class="kt">char</span> <span class="n">ch1</span> <span class="o">=</span> <span class="sc">'a'</span><span class="p">;</span> <span class="c1">// 字符类型</span>
<span class="kt">wchar_t</span> <span class="n">ch2</span> <span class="o">=</span> <span class="sc">L'你'</span><span class="p">;</span> <span class="c1">// 宽字符类型</span>
</code></pre></div></div>

<h3 id="有符号整数和无符号整数的差别"><span style="color: rgb(0,191,255);"><strong>有符号整数和无符号整数的差别</strong></span></h3>

<p>为了更好地理解有符号整数和无符号整数之间的区别，我们来看一个简单的例子：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
   <span class="kt">short</span> <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>           <span class="c1">// 有符号短整数</span>
   <span class="kt">short</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>  <span class="c1">// 无符号短整数</span>

   <span class="n">j</span> <span class="o">=</span> <span class="mi">50000</span><span class="p">;</span>
   <span class="n">i</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>

   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">j</span><span class="p">;</span>
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-15536 50000
</code></pre></div></div>

<p>在这个程序中，无符号短整数 <code class="language-plaintext highlighter-rouge">50000</code> 的位模式被解释为有符号短整数，导致输出为 <code class="language-plaintext highlighter-rouge">-15536</code>。</p>

<h2 id="c-中的类型限定符"><span style="color: rgb(0,191,255);"><strong>C++ 中的类型限定符</strong></span></h2>

<p>类型限定符提供了关于变量的附加信息，用于改变变量或函数的默认行为。常见的类型限定符如下：</p>

<h3 id="1-const"><span style="color: rgb(32,178,170);"><strong>1. <code class="language-plaintext highlighter-rouge">const</code></strong></span></h3>

<ul>
  <li>用于定义常量，表示该变量的值不能被修改。</li>
</ul>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">int</span> <span class="n">NUM</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// NUM 是常量，值不能修改</span>
<span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">NUM</span><span class="p">;</span> <span class="c1">// 指向常量的指针，指针指向的值不可修改</span>
</code></pre></div></div>

<h3 id="2-volatile"><span style="color: rgb(32,178,170);"><strong>2. <code class="language-plaintext highlighter-rouge">volatile</code></strong></span></h3>

<ul>
  <li>用于修饰变量，表示该变量的值可能会被程序外部的因素改变，如硬件或其他线程。</li>
</ul>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">volatile</span> <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 变量 num 可能在任何时刻被外部修改</span>
</code></pre></div></div>

<h3 id="3-restrict"><span style="color: rgb(32,178,170);"><strong>3. <code class="language-plaintext highlighter-rouge">restrict</code></strong></span></h3>

<ul>
  <li>仅适用于指针，表示该指针是访问其所指对象的唯一方式。<code class="language-plaintext highlighter-rouge">restrict</code> 是 C99 中引入的限定符。</li>
</ul>

<h3 id="4-mutable"><span style="color: rgb(32,178,170);"><strong>4. <code class="language-plaintext highlighter-rouge">mutable</code></strong></span></h3>

<ul>
  <li>用于修饰类的成员变量，表示即使对象本身是 <code class="language-plaintext highlighter-rouge">const</code>，该成员变量仍然可以被修改。</li>
</ul>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Example</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">int</span> <span class="n">get_value</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">value_</span><span class="p">;</span> <span class="c1">// const 函数不能修改数据成员</span>
    <span class="p">}</span>
    <span class="kt">void</span> <span class="n">set_value</span><span class="p">(</span><span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
        <span class="n">value_</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span> <span class="c1">// mutable 允许在 const 成员函数中修改成员变量</span>
    <span class="p">}</span>

<span class="k">private</span><span class="o">:</span>
    <span class="k">mutable</span> <span class="kt">int</span> <span class="n">value_</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="5-static"><span style="color: rgb(32,178,170);"><strong>5. <code class="language-plaintext highlighter-rouge">static</code></strong></span></h3>

<ul>
  <li>用于定义静态变量，表示变量的作用域仅限于当前文件或当前函数内，不会被其他文件或函数访问。</li>
</ul>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">example_function</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// count 是静态变量，程序生命周期内都存在</span>
    <span class="n">count</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="6-register"><span style="color: rgb(32,178,170);"><strong>6. <code class="language-plaintext highlighter-rouge">register</code></strong></span></h3>

<ul>
  <li>用于定义寄存器变量，表示该变量被频繁使用，可以存储在 CPU 的寄存器中，以提高程序的运行效率。但是否实际存储在寄存器中由编译器决定。</li>
</ul>

<p><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">example_function</span><span class="p">(</span><span class="k">register</span> <span class="kt">int</span> <span class="n">num</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// register 提示编译器将变量存储在寄存器中</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[修饰符]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-6.png" /><media:content medium="image" url="http://localhost:4000/code-cover-6.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">变量的作用域</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Scope-of-variables/" rel="alternate" type="text/html" title="变量的作用域" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Scope%20of%20variables</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Scope-of-variables/"><![CDATA[<h1 id="变量的作用域"><span style="color: rgb(255,127,80);"><strong>变量的作用域</strong></span></h1>
<p>在 C++ 中，变量的作用域指的是变量可以被访问的范围。通常来说，变量的作用域可以分为以下几种类型：</p>

<ul>
  <li><strong>局部作用域</strong>：变量仅在函数或代码块内部可访问。</li>
  <li><strong>全局作用域</strong>：变量在整个程序中都可访问。</li>
  <li><strong>块作用域</strong>：变量仅在某个特定代码块（如 if 语句、循环等）内可访问。</li>
  <li><strong>类作用域</strong>：变量仅在类内部可访问。</li>
</ul>

<hr />

<h4 id="1-变量声明位置"><span style="color: rgb(0,191,255);"><strong>1. 变量声明位置</strong></span></h4>

<p>变量可以在不同的地方声明，具体包括：</p>

<ul>
  <li><strong>局部变量</strong>：在函数或代码块内部声明的变量。</li>
  <li><strong>形式参数</strong>：在函数参数列表中声明的变量。</li>
  <li><strong>全局变量</strong>：在所有函数外部声明的变量。</li>
</ul>

<h4 id="2-作用域详细介绍"><span style="color: rgb(0,191,255);"><strong>2. 作用域详细介绍</strong></span></h4>

<h5 id="21-局部作用域"><span style="color: rgb(32,178,170);"><strong>2.1 局部作用域</strong></span></h5>

<p>局部变量是在函数或代码块内部声明的，它们只在当前函数或代码块中有效。当函数被调用时，局部变量会被创建，函数执行结束后，它们会被销毁。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="c1">// 局部变量声明</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>

    <span class="c1">// 实际初始化</span>
    <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">c</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个例子中，变量 <code class="language-plaintext highlighter-rouge">a</code>、<code class="language-plaintext highlighter-rouge">b</code> 和 <code class="language-plaintext highlighter-rouge">c</code> 是局部变量，只能在 <code class="language-plaintext highlighter-rouge">main</code> 函数内部访问。</p>

<h5 id="22-全局作用域"><span style="color: rgb(32,178,170);"><strong>2.2 全局作用域</strong></span></h5>

<p>全局变量是在所有函数外部定义的变量，它们在整个程序中都有效，并且可以被任何函数访问。全局变量的生命周期从程序开始到程序结束。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="c1">// 全局变量声明</span>
<span class="kt">int</span> <span class="n">g</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="c1">// 局部变量声明</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>

    <span class="c1">// 实际初始化</span>
    <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
    <span class="n">g</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">g</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">g</code> 是一个全局变量，可以在整个程序中访问。</p>

<h5 id="23-局部变量与全局变量同名"><span style="color: rgb(32,178,170);"><strong>2.3 局部变量与全局变量同名</strong></span></h5>

<p>如果局部变量和全局变量同名，局部变量会覆盖全局变量。也就是说，函数内部会优先使用局部变量。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="c1">// 全局变量声明</span>
<span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="c1">// 局部变量声明</span>
    <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">g</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出结果为：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">10</span>
</code></pre></div></div>

<p>这是因为在 <code class="language-plaintext highlighter-rouge">main</code> 函数中声明的局部变量 <code class="language-plaintext highlighter-rouge">g</code> 覆盖了全局变量 <code class="language-plaintext highlighter-rouge">g</code>。</p>

<h5 id="24-初始化局部变量和全局变量"><span style="color: rgb(32,178,170);"><strong>2.4 初始化局部变量和全局变量</strong></span></h5>

<ul>
  <li><strong>局部变量</strong>：在定义时，系统不会自动为其初始化，必须显式地初始化。</li>
  <li><strong>全局变量</strong>：系统会自动初始化为默认值。不同数据类型的默认值如下：</li>
</ul>

<table>
  <thead>
    <tr>
      <th>数据类型</th>
      <th>初始化默认值</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">int</code></td>
      <td><code class="language-plaintext highlighter-rouge">0</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">char</code></td>
      <td><code class="language-plaintext highlighter-rouge">'\0'</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">float</code></td>
      <td><code class="language-plaintext highlighter-rouge">0</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">double</code></td>
      <td><code class="language-plaintext highlighter-rouge">0</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">pointer</code></td>
      <td><code class="language-plaintext highlighter-rouge">NULL</code></td>
    </tr>
  </tbody>
</table>

<h5 id="25-块作用域"><span style="color: rgb(32,178,170);"><strong>2.5 块作用域</strong></span></h5>

<p>块作用域是指在代码块（如条件语句、循环语句等）内部声明的变量。它们仅在该代码块内部有效。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>  <span class="c1">// 块作用域变量</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"块变量: "</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"外部变量: "</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出结果为：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">块变量</span><span class="pi">:</span> <span class="m">20</span>
<span class="na">外部变量</span><span class="pi">:</span> <span class="m">10</span>
</code></pre></div></div>

<p>在这个例子中，内部代码块中声明了一个与外部同名的变量 <code class="language-plaintext highlighter-rouge">a</code>，并且它覆盖了外部作用域中的变量。在代码块内部访问 <code class="language-plaintext highlighter-rouge">a</code> 时，输出的是 <code class="language-plaintext highlighter-rouge">20</code>，而在外部访问时，输出的是 <code class="language-plaintext highlighter-rouge">10</code>。</p>

<h5 id="26-类作用域"><span style="color: rgb(32,178,170);"><strong>2.6 类作用域</strong></span></h5>

<p>类作用域是指在类内部声明的变量。类的成员变量（或类的静态变量）可以在类的所有成员函数中访问。</p>

<p><span style="color: rgb(238,130,238);"><strong>示例代码：</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">class_var</span><span class="p">;</span>  <span class="c1">// 类作用域变量</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="n">MyClass</span><span class="o">::</span><span class="n">class_var</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"类变量: "</span> <span class="o">&lt;&lt;</span> <span class="n">MyClass</span><span class="o">::</span><span class="n">class_var</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出结果为：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">类变量</span><span class="pi">:</span> <span class="m">30</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">MyClass</code> 类中声明了一个静态成员变量 <code class="language-plaintext highlighter-rouge">class_var</code>，它属于类作用域，可以通过类名访问。</p>

<h4 id="总结"><span style="color: rgb(0,191,255);"><strong>总结</strong></span></h4>

<ul>
  <li>
    <p><span style="color: rgb(238,130,238);"><strong>局部作用域</strong>：在函数或代码块内有效。</span></p>
  </li>
  <li>
    <p><span style="color: rgb(238,130,238);"><strong>全局作用域</strong>：在程序的任何地方有效。</span></p>
  </li>
  <li>
    <p><span style="color: rgb(238,130,238);"><strong>块作用域</strong>：在代码块内部有效。</span></p>
  </li>
  <li>
    <p><span style="color: rgb(238,130,238);"><strong>类作用域</strong>：在类内部有效。</span></p>
  </li>
</ul>

<p>理解这些作用域有助于更好地管理变量的生命周期和访问权限。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[变量的作用域 在 C++ 中，变量的作用域指的是变量可以被访问的范围。通常来说，变量的作用域可以分为以下几种类型：]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-6.png" /><media:content medium="image" url="http://localhost:4000/code-cover-6.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">数组</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Arrays/" rel="alternate" type="text/html" title="数组" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Arrays</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Arrays/"><![CDATA[<h1 id="数组简介"><span style="color: rgb(255,127,80);"><strong>数组简介</strong></span></h1>

<p>C++ 支持数组数据结构，数组是存储一组固定大小且类型相同的元素的集合。你可以把数组看作是一个存放数据的容器，它实际上是多个变量的集合，但所有这些变量都具有相同的类型。</p>

<p>数组不同于一一声明单独的变量（比如 <code class="language-plaintext highlighter-rouge">number0</code>, <code class="language-plaintext highlighter-rouge">number1</code>, …, <code class="language-plaintext highlighter-rouge">number99</code>）。而是通过声明一个数组变量（例如 <code class="language-plaintext highlighter-rouge">numbers</code>），然后使用索引（如 <code class="language-plaintext highlighter-rouge">numbers[0]</code>, <code class="language-plaintext highlighter-rouge">numbers[1]</code>, …, <code class="language-plaintext highlighter-rouge">numbers[99]</code>）来访问其中的每个元素。数组的所有元素都是存储在连续的内存位置中，数组中的第一个元素位于最小的内存地址，最后一个元素则位于最大的内存地址。</p>

<h3 id="声明数组"><span style="color: rgb(0,191,255);"><strong>声明数组</strong></span></h3>

<p>在 C++ 中，声明数组时需要指定元素的类型和数组的大小。格式如下：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">type</span> <span class="n">arrayName</span><span class="p">[</span><span class="n">arraySize</span><span class="p">];</span>
</code></pre></div></div>

<p>这里 <code class="language-plaintext highlighter-rouge">arraySize</code> 必须是一个大于零的整数常量，<code class="language-plaintext highlighter-rouge">type</code> 是数组元素的类型。例如，声明一个包含 10 个 <code class="language-plaintext highlighter-rouge">double</code> 类型元素的数组：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">balance</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</code></pre></div></div>

<p>此时，<code class="language-plaintext highlighter-rouge">balance</code> 数组能够存储 10 个 <code class="language-plaintext highlighter-rouge">double</code> 类型的数值。</p>

<h3 id="初始化数组"><span style="color: rgb(0,191,255);"><strong>初始化数组</strong></span></h3>

<p>你可以通过两种方式来初始化数组：</p>

<p><span style="color: rgb(32,178,170);"><strong>1. 逐个初始化：</strong></span> 
   通过指定每个元素的初始值来初始化数组。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kt">double</span> <span class="n">balance</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mf">1000.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">50.0</span><span class="p">};</span>
</code></pre></div></div>

<p><span style="color: rgb(32,178,170);"><strong>2. 省略数组大小：</strong></span> 
   如果在初始化时省略了数组大小，C++ 会自动根据初始化列表的元素数量来确定数组的大小。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kt">double</span> <span class="n">balance</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mf">1000.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">50.0</span><span class="p">};</span>
</code></pre></div></div>

<p>这里 <code class="language-plaintext highlighter-rouge">balance</code> 数组的大小将是 5。</p>

<p>你也可以通过索引为数组中的某个元素赋值：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">balance</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mf">50.0</span><span class="p">;</span>  <span class="c1">// 将数组中第 5 个元素的值设置为 50.0</span>
</code></pre></div></div>

<h3 id="访问数组元素"><span style="color: rgb(0,191,255);"><strong>访问数组元素</strong></span></h3>

<p>你可以通过数组名称加上索引来访问数组中的元素。数组的索引从 0 开始，最后一个元素的索引是数组大小减去 1。例如，要访问 <code class="language-plaintext highlighter-rouge">balance</code> 数组中的第 10 个元素：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">salary</span> <span class="o">=</span> <span class="n">balance</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span>  <span class="c1">// 访问 balance 数组的第 10 个元素</span>
</code></pre></div></div>

<h3 id="示例代码"><span style="color: rgb(238,130,238);"><strong>示例代码</strong></span></h3>

<p>以下是一个完整的示例，展示了数组的声明、初始化、赋值和访问的过程：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iomanip&gt;</span><span class="c1">  // 用于格式化输出</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>  <span class="c1">// 声明一个包含 10 个整数的数组</span>
    <span class="c1">// 初始化数组元素</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> 
    <span class="p">{</span>
        <span class="n">n</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>  <span class="c1">// 将第 i 个元素初始化为 i + 100</span>
    <span class="p">}</span>
    <span class="c1">// 输出数组的元素</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Element"</span> <span class="o">&lt;&lt;</span> <span class="n">setw</span><span class="p">(</span><span class="mi">13</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">"Value"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> 
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">setw</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">j</span> <span class="o">&lt;&lt;</span> <span class="n">setw</span><span class="p">(</span><span class="mi">13</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">n</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>  <span class="c1">// 输出每个元素的索引和值</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>运行结果：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">Element        Value</span>
      <span class="s">0          </span><span class="m">100</span>
      <span class="s">1          </span><span class="m">101</span>
      <span class="s">2          </span><span class="m">102</span>
      <span class="s">3          </span><span class="m">103</span>
      <span class="s">4          </span><span class="m">104</span>
      <span class="s">5          </span><span class="m">105</span>
      <span class="s">6          </span><span class="m">106</span>
      <span class="s">7          </span><span class="m">107</span>
      <span class="s">8          </span><span class="m">108</span>
      <span class="s">9          </span><span class="m">109</span>
</code></pre></div></div>

<h3 id="c-中数组的更多细节"><span style="color: rgb(0,191,255);"><strong>C++ 中数组的更多细节</strong></span></h3>

<p>在 C++ 中，数组不仅仅是一个简单的集合。以下是一些更高级的数组概念，程序员需要了解：</p>

<h4 id="1-多维数组"><span style="color: rgb(32,178,170);"><strong>1. 多维数组</strong></span></h4>

<p>C++ 支持多维数组，其中最常见的是二维数组。二维数组可以看作是一个包含多个一维数组的数组。例如，声明一个 3x3 的二维数组：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">matrix</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">];</span>  <span class="c1">// 声明一个 3 行 3 列的二维数组</span>
</code></pre></div></div>

<h4 id="2-指向数组的指针"><span style="color: rgb(32,178,170);"><strong>2. 指向数组的指针</strong></span></h4>

<p>你可以通过不带索引的数组名称来生成一个指向数组首元素的指针。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>  <span class="c1">// ptr 是指向数组 n 第一个元素的指针</span>
</code></pre></div></div>

<h4 id="3-传递数组给函数"><span style="color: rgb(32,178,170);"><strong>3. 传递数组给函数</strong></span></h4>

<p>在 C++ 中，可以通过传递数组名称（即指向数组首元素的指针）来把数组传递给函数。例如：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">printArray</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> 
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
    <span class="n">printArray</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>  <span class="c1">// 传递数组 arr 给函数</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="4-从函数返回数组"><span style="color: rgb(32,178,170);"><strong>4. 从函数返回数组</strong></span></h4>

<p>C++ 不直接支持从函数返回数组，但可以通过返回指向数组的指针来间接实现：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">*</span> <span class="nf">createArray</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
    <span class="k">return</span> <span class="n">arr</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[数组简介]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-10.png" /><media:content medium="image" url="http://localhost:4000/code-cover-10.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">字符串</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Character-String/" rel="alternate" type="text/html" title="字符串" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Character%20String</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Character-String/"><![CDATA[<h1 id="字符串"><span style="color: rgb(255,127,80);"><strong>字符串</strong></span></h1>

<p>C++ 提供了两种主要的字符串表示方式：</p>

<ol>
  <li><strong>C 风格字符串</strong></li>
  <li><strong>C++ <code class="language-plaintext highlighter-rouge">string</code> 类</strong></li>
</ol>

<p>下面将分别介绍这两种方式。</p>

<h3 id="c-风格字符串"><span style="color: rgb(0,191,255);"><strong>C 风格字符串</strong></span></h3>

<p>C 风格字符串源自 C 语言，并且在 C++ 中也被广泛使用。它们实际上是以空字符 (<code class="language-plaintext highlighter-rouge">\0</code>) 终止的一维字符数组。因此，一个 C 风格的字符串包含了组成字符串的字符，最后由一个 <code class="language-plaintext highlighter-rouge">\0</code> 字符标记字符串的结束。</p>

<h4 id="示例-1-定义-c-风格字符串"><span style="color: rgb(32,178,170);"><strong>示例 1: 定义 C 风格字符串</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// 通过字符数组定义字符串</span>
    <span class="kt">char</span> <span class="n">site</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">'R'</span><span class="p">,</span> <span class="sc">'U'</span><span class="p">,</span> <span class="sc">'N'</span><span class="p">,</span> <span class="sc">'O'</span><span class="p">,</span> <span class="sc">'O'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'\0'</span><span class="p">};</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"网站名称: "</span> <span class="o">&lt;&lt;</span> <span class="n">site</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个示例中，我们定义了一个字符数组 <code class="language-plaintext highlighter-rouge">site</code>，包含了字符串 “RUNOOB”。由于 C 风格字符串的结束是由 <code class="language-plaintext highlighter-rouge">\0</code> 表示的，所以数组大小比字符串长度多一个字符。</p>

<h4 id="更简洁的写法"><span style="color: rgb(32,178,170);"><strong>更简洁的写法</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// 直接使用字符串常量定义</span>
    <span class="kt">char</span> <span class="n">site</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"RUNOOB"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"网站名称: "</span> <span class="o">&lt;&lt;</span> <span class="n">site</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>C++ 编译器会自动在字符串的末尾加上 <code class="language-plaintext highlighter-rouge">\0</code>，因此我们不需要手动添加。</p>

<h4 id="示例-2-使用字符串函数"><span style="color: rgb(32,178,170);"><strong>示例 2: 使用字符串函数</strong></span></h4>

<p>C++ 提供了一些函数来操作 C 风格字符串。以下是几个常见函数及其用途：</p>

<table>
  <thead>
    <tr>
      <th>函数</th>
      <th>目的</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">strcpy(s1, s2)</code></td>
      <td>将字符串 <code class="language-plaintext highlighter-rouge">s2</code> 复制到 <code class="language-plaintext highlighter-rouge">s1</code> 中。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">strcat(s1, s2)</code></td>
      <td>将字符串 <code class="language-plaintext highlighter-rouge">s2</code> 连接到 <code class="language-plaintext highlighter-rouge">s1</code> 的末尾。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">strlen(s1)</code></td>
      <td>返回字符串 <code class="language-plaintext highlighter-rouge">s1</code> 的长度（不包括 <code class="language-plaintext highlighter-rouge">\0</code>）。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">strcmp(s1, s2)</code></td>
      <td>比较 <code class="language-plaintext highlighter-rouge">s1</code> 和 <code class="language-plaintext highlighter-rouge">s2</code> 字符串，返回值小于0、等于0或大于0。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">strchr(s1, ch)</code></td>
      <td>返回 <code class="language-plaintext highlighter-rouge">s1</code> 中第一次出现字符 <code class="language-plaintext highlighter-rouge">ch</code> 的位置。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">strstr(s1, s2)</code></td>
      <td>返回 <code class="language-plaintext highlighter-rouge">s1</code> 中第一次出现字符串 <code class="language-plaintext highlighter-rouge">s2</code> 的位置。</td>
    </tr>
  </tbody>
</table>

<h4 id="示例-3-使用-c-风格字符串操作函数"><span style="color: rgb(32,178,170);"><strong>示例 3: 使用 C 风格字符串操作函数</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cstring&gt;</span><span class="c1">  // 引入字符串处理库</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">str1</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="s">"runoob"</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">str2</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="s">"google"</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">str3</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
    <span class="c1">// 复制 str1 到 str3</span>
    <span class="n">strcpy</span><span class="p">(</span><span class="n">str3</span><span class="p">,</span> <span class="n">str1</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"strcpy(str3, str1): "</span> <span class="o">&lt;&lt;</span> <span class="n">str3</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="c1">// 连接 str1 和 str2</span>
    <span class="n">strcat</span><span class="p">(</span><span class="n">str1</span><span class="p">,</span> <span class="n">str2</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"strcat(str1, str2): "</span> <span class="o">&lt;&lt;</span> <span class="n">str1</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="c1">// 获取 str1 的长度</span>
    <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">str1</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"strlen(str1): "</span> <span class="o">&lt;&lt;</span> <span class="n">len</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">strcpy(str3, str1)</span><span class="err">:</span> <span class="s">runoob</span>
<span class="s">strcat(str1, str2)</span><span class="err">:</span> <span class="s">runoobgoogle</span>
<span class="na">strlen(str1)</span><span class="pi">:</span> <span class="m">12</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">strcpy</code> 复制了字符串，<code class="language-plaintext highlighter-rouge">strcat</code> 将 <code class="language-plaintext highlighter-rouge">str2</code> 连接到 <code class="language-plaintext highlighter-rouge">str1</code>，而 <code class="language-plaintext highlighter-rouge">strlen</code> 返回了字符串的长度。</p>

<h3 id="c-中的-string-类"><span style="color: rgb(0,191,255);"><strong>C++ 中的 <code class="language-plaintext highlighter-rouge">string</code> 类</strong></span></h3>

<p>C++ 标准库提供了一个更加现代的字符串类——<code class="language-plaintext highlighter-rouge">string</code> 类。它不仅支持 C 风格字符串的常见操作，还提供了更多灵活和高效的方法。这里我们通过一个简单的例子来展示 <code class="language-plaintext highlighter-rouge">string</code> 类的基本用法。</p>

<h4 id="示例-4-使用-string-类"><span style="color: rgb(32,178,170);"><strong>示例 4: 使用 <code class="language-plaintext highlighter-rouge">string</code> 类</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="c1">  // 引入 string 库</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">str1</span> <span class="o">=</span> <span class="s">"runoob"</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">str2</span> <span class="o">=</span> <span class="s">"google"</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">str3</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
    <span class="c1">// 复制 str1 到 str3</span>
    <span class="n">str3</span> <span class="o">=</span> <span class="n">str1</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"str3: "</span> <span class="o">&lt;&lt;</span> <span class="n">str3</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="c1">// 连接 str1 和 str2</span>
    <span class="n">str3</span> <span class="o">=</span> <span class="n">str1</span> <span class="o">+</span> <span class="n">str2</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"str1 + str2: "</span> <span class="o">&lt;&lt;</span> <span class="n">str3</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="c1">// 获取 str3 的长度</span>
    <span class="n">len</span> <span class="o">=</span> <span class="n">str3</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"str3.size(): "</span> <span class="o">&lt;&lt;</span> <span class="n">len</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">str3</span><span class="pi">:</span> <span class="s">runoob</span>
<span class="na">str1 + str2</span><span class="pi">:</span> <span class="s">runoobgoogle</span>
<span class="na">str3.size()</span><span class="pi">:</span> <span class="m">12</span>
</code></pre></div></div>

<p>与 C 风格字符串不同，C++ <code class="language-plaintext highlighter-rouge">string</code> 类会自动处理内存管理和字符数组的大小，因此操作更加方便和安全。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[字符串]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">函数</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Function/" rel="alternate" type="text/html" title="函数" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Function</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Function/"><![CDATA[<h1 id="函数"><span style="color: rgb(255,127,80);"><strong>函数</strong></span></h1>

<p>函数是执行特定任务的一组语句。每个 C++ 程序都至少有一个函数，即 <code class="language-plaintext highlighter-rouge">main()</code> 函数。除了 <code class="language-plaintext highlighter-rouge">main()</code> 函数，您还可以根据需要定义其他函数。</p>

<p>将代码划分成多个函数有助于提高程序的结构性和可读性。通常，我们会根据每个函数执行的特定任务来划分代码。</p>

<h3 id="函数声明与定义"><span style="color: rgb(0,191,255);"><strong>函数声明与定义</strong></span></h3>

<p>在 C++ 中，函数由 <strong>声明</strong> 和 <strong>定义</strong> 两部分组成。</p>

<ul>
  <li><strong>函数声明</strong> 告诉编译器函数的名称、返回类型和参数列表。</li>
  <li><strong>函数定义</strong> 提供了函数的实际实现，包含函数主体。</li>
</ul>

<h3 id="函数定义的一般形式"><span style="color: rgb(0,191,255);"><strong>函数定义的一般形式</strong></span></h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">return_type</span> <span class="nf">function_name</span><span class="p">(</span><span class="n">parameter</span> <span class="n">list</span><span class="p">)</span>
<span class="p">{</span>
   <span class="c1">// 函数主体</span>
<span class="p">}</span>
</code></pre></div></div>

<p>其中的组成部分包括：</p>

<ul>
  <li><strong>返回类型</strong>：指定函数返回值的数据类型。如果函数不返回值，使用 <code class="language-plaintext highlighter-rouge">void</code>。</li>
  <li><strong>函数名称</strong>：函数的名字，和参数列表一起构成函数签名。</li>
  <li><strong>参数列表</strong>：定义函数接受的参数，可以是零个或多个。每个参数由类型和名称组成。</li>
  <li><strong>函数主体</strong>：函数的实际操作逻辑，包含一组语句。</li>
</ul>

<h3 id="示例最大值函数"><span style="color: rgb(238,130,238);"><strong>示例：最大值函数</strong></span></h3>

<p>以下是一个求两个整数中较大值的函数 <code class="language-plaintext highlighter-rouge">max()</code>：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 函数返回两个数中较大的那个数</span>
<span class="kt">int</span> <span class="nf">max</span><span class="p">(</span><span class="kt">int</span> <span class="n">num1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">num2</span><span class="p">)</span> 
<span class="p">{</span>
   <span class="c1">// 局部变量声明</span>
   <span class="kt">int</span> <span class="n">result</span><span class="p">;</span>
   <span class="k">if</span> <span class="p">(</span><span class="n">num1</span> <span class="o">&gt;</span> <span class="n">num2</span><span class="p">)</span>
      <span class="n">result</span> <span class="o">=</span> <span class="n">num1</span><span class="p">;</span>
   <span class="k">else</span>
      <span class="n">result</span> <span class="o">=</span> <span class="n">num2</span><span class="p">;</span>
   <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>该函数接受两个整数参数 <code class="language-plaintext highlighter-rouge">num1</code> 和 <code class="language-plaintext highlighter-rouge">num2</code>，并返回较大的数。</p>

<h3 id="函数声明"><span style="color: rgb(0,191,255);"><strong>函数声明</strong></span></h3>

<p>函数声明用于告诉编译器如何调用一个函数，包括函数名和参数类型，而不涉及函数的具体实现。函数声明的一般形式为：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">return_type</span> <span class="nf">function_name</span><span class="p">(</span><span class="n">parameter</span> <span class="n">list</span><span class="p">);</span>
</code></pre></div></div>

<p>对于 <code class="language-plaintext highlighter-rouge">max()</code> 函数，声明如下：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">max</span><span class="p">(</span><span class="kt">int</span> <span class="n">num1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">num2</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>注意</strong>：在函数声明中，参数的名称并非必须，只有参数的类型是必要的。例如，下面的声明也是有效的：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">max</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</code></pre></div></div>

<p>如果您在一个文件中定义了函数，并在另一个文件中调用它，那么需要在调用前声明该函数。</p>

<h3 id="调用函数"><span style="color: rgb(0,191,255);"><strong>调用函数</strong></span></h3>

<p>在程序中，我们通过调用函数来执行已定义的任务。当函数被调用时，程序的控制权转移到被调用的函数。当函数完成任务后，控制权会返回给主程序。</p>

<p>例如，下面的代码展示了如何调用 <code class="language-plaintext highlighter-rouge">max()</code> 函数：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="c1">// 函数声明</span>
<span class="kt">int</span> <span class="nf">max</span><span class="p">(</span><span class="kt">int</span> <span class="n">num1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">num2</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
   <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
   <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
   <span class="c1">// 调用函数来获取最大值</span>
   <span class="n">ret</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Max value is : "</span> <span class="o">&lt;&lt;</span> <span class="n">ret</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// 函数定义</span>
<span class="kt">int</span> <span class="nf">max</span><span class="p">(</span><span class="kt">int</span> <span class="n">num1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">num2</span><span class="p">)</span>
<span class="p">{</span>
   <span class="kt">int</span> <span class="n">result</span><span class="p">;</span>
   <span class="k">if</span> <span class="p">(</span><span class="n">num1</span> <span class="o">&gt;</span> <span class="n">num2</span><span class="p">)</span>
      <span class="n">result</span> <span class="o">=</span> <span class="n">num1</span><span class="p">;</span>
   <span class="k">else</span>
      <span class="n">result</span> <span class="o">=</span> <span class="n">num2</span><span class="p">;</span>
   <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Max value is </span><span class="pi">:</span> <span class="m">200</span>
</code></pre></div></div>

<h3 id="函数参数"><span style="color: rgb(0,191,255);"><strong>函数参数</strong></span></h3>

<p>函数可以使用参数进行灵活操作。参数可以通过三种方式传递给函数：</p>

<ol>
  <li><strong>传值调用</strong>：将实际值传递给形式参数。函数内修改形式参数不会影响实际参数。</li>
  <li><strong>指针调用</strong>：将参数的地址传递给函数，函数通过指针修改实际参数。</li>
  <li><strong>引用调用</strong>：将参数的引用传递给函数，函数修改引用会直接影响实际参数。</li>
</ol>

<h3 id="参数的默认值"><span style="color: rgb(0,191,255);"><strong>参数的默认值</strong></span></h3>

<p>C++ 允许为函数参数指定默认值。若调用函数时未提供某个参数，则会使用默认值。</p>

<p>例如，下面的 <code class="language-plaintext highlighter-rouge">sum()</code> 函数为第二个参数指定了默认值：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
   <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
   <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
   <span class="kt">int</span> <span class="n">result</span><span class="p">;</span>

   <span class="c1">// 调用函数，传入两个参数</span>
   <span class="n">result</span> <span class="o">=</span> <span class="n">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Total value is : "</span> <span class="o">&lt;&lt;</span> <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

   <span class="c1">// 调用函数，只传入一个参数</span>
   <span class="n">result</span> <span class="o">=</span> <span class="n">sum</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Total value is : "</span> <span class="o">&lt;&lt;</span> <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><span style="color: rgb(238,130,238);"><strong>输出结果：</strong></span></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Total value is </span><span class="pi">:</span> <span class="m">300</span>
<span class="na">Total value is </span><span class="pi">:</span> <span class="m">120</span>
</code></pre></div></div>

<h3 id="lambda-函数与表达式"><span style="color: rgb(0,191,255);"><strong>Lambda 函数与表达式</strong></span></h3>

<p>C++11 引入了 Lambda 函数（也叫 Lambda 表达式），它可以在不定义完整函数的情况下，直接在代码中定义并执行功能。</p>

<p>Lambda 表达式的基本形式如下：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">capture</span><span class="p">](</span><span class="n">parameters</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">return_type</span> <span class="p">{</span> <span class="n">body</span> <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><strong>capture</strong>：指定外部变量的访问方式（按值传递或按引用传递）。</li>
  <li><strong>parameters</strong>：函数参数（可选）。</li>
  <li><strong>return_type</strong>：返回类型（可选）。</li>
  <li><strong>body</strong>：函数体。</li>
</ul>

<h4 id="示例-1简单-lambda-表达式"><span style="color: rgb(32,178,170);"><strong>示例 1：简单 Lambda 表达式</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">lambda</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">;</span> <span class="p">};</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">lambda</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// 输出 15</span>
</code></pre></div></div>

<h4 id="示例-2带默认值的-lambda-表达式"><span style="color: rgb(32,178,170);"><strong>示例 2：带默认值的 Lambda 表达式</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="k">auto</span> <span class="n">lambda</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">]()</span> <span class="p">{</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">;</span> <span class="p">};</span>
<span class="n">lambda</span><span class="p">();</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">y</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="c1">// 输出 30</span>
</code></pre></div></div>

<p>在 Lambda 表达式中，<code class="language-plaintext highlighter-rouge">[]</code> 部分用来捕获外部变量。如果没有捕获任何外部变量，可以写成 <code class="language-plaintext highlighter-rouge">[]</code>，如果需要捕获外部变量，则可以指定捕获方式（按值传递 <code class="language-plaintext highlighter-rouge">=</code>，按引用传递 <code class="language-plaintext highlighter-rouge">&amp;</code>）。</p>

<h4 id="示例-3使用-this-指针的-lambda-表达式"><span style="color: rgb(32,178,170);"><strong>示例 3：使用 <code class="language-plaintext highlighter-rouge">this</code> 指针的 Lambda 表达式</strong></span></h4>

<p>如果 Lambda 表达式要访问类中的成员函数或变量，可以显式传入 <code class="language-plaintext highlighter-rouge">this</code> 指针：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Example</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">show</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">auto</span> <span class="n">lambda</span> <span class="o">=</span> <span class="p">[</span><span class="k">this</span><span class="p">]()</span> <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">};</span>
        <span class="n">lambda</span><span class="p">();</span>
    <span class="p">}</span>

<span class="k">private</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[函数]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">判断结构</title><link href="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Judgment-Structure/" rel="alternate" type="text/html" title="判断结构" /><published>2025-01-05T00:00:00-08:00</published><updated>2025-01-05T00:00:00-08:00</updated><id>http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Judgment%20Structure</id><content type="html" xml:base="http://localhost:4000/code/algorithm/basic-knowledge/2025/01/05/Judgment-Structure/"><![CDATA[<h1 id="判断结构"><span style="color: rgb(255,127,80);"><strong>判断结构</strong></span></h1>

<p>在 C++ 中，判断结构用于评估一个或多个条件，并根据条件的结果来决定执行哪些语句。常见的判断结构有多种形式，每种形式适用于不同的情况。以下是 C++ 中常见的判断结构以及示例：</p>

<h3 id="1-if-语句"><span style="color: rgb(0,191,255);"><strong>1. <code class="language-plaintext highlighter-rouge">if</code> 语句</strong></span></h3>

<p><code class="language-plaintext highlighter-rouge">if</code> 语句用于判断一个条件是否为真。如果条件为真，执行相应的代码块。</p>

<h4 id="语法"><span style="color: rgb(238,130,238);"><strong>语法：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// 如果 condition 为真，执行此语句块</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="示例"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你已经成年了。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">if</code> 语句判断变量 <code class="language-plaintext highlighter-rouge">age</code> 是否大于或等于 18。如果条件成立（<code class="language-plaintext highlighter-rouge">age</code> &gt;= 18），则输出 <code class="language-plaintext highlighter-rouge">"你已经成年了。"</code>。</p>

<h3 id="2-ifelse-语句"><span style="color: rgb(0,191,255);"><strong>2. <code class="language-plaintext highlighter-rouge">if...else</code> 语句</strong></span></h3>

<p><code class="language-plaintext highlighter-rouge">if...else</code> 语句在 <code class="language-plaintext highlighter-rouge">if</code> 条件为假时，执行 <code class="language-plaintext highlighter-rouge">else</code> 后面的代码块。</p>

<h4 id="语法-1"><span style="color: rgb(238,130,238);"><strong>语法：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="c1">// 如果 condition 为真，执行此语句块</span>
<span class="p">}</span> 
<span class="k">else</span>
<span class="p">{</span>
    <span class="c1">// 如果 condition 为假，执行此语句块</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="示例-1"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你已经成年了。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span> 
<span class="k">else</span> 
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你还未成年。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>在这个例子中，如果 <code class="language-plaintext highlighter-rouge">age</code> 大于或等于 18，则输出 <code class="language-plaintext highlighter-rouge">"你已经成年了。"</code>；否则，输出 <code class="language-plaintext highlighter-rouge">"你还未成年。" </code>。</p>

<h3 id="3-嵌套-if-语句"><span style="color: rgb(0,191,255);"><strong>3. 嵌套 <code class="language-plaintext highlighter-rouge">if</code> 语句</strong></span></h3>

<p>可以在 <code class="language-plaintext highlighter-rouge">if</code> 或 <code class="language-plaintext highlighter-rouge">else</code> 语句内嵌套其他的 <code class="language-plaintext highlighter-rouge">if</code> 或 <code class="language-plaintext highlighter-rouge">else</code> 语句，以处理更复杂的条件判断。</p>

<h4 id="示例-2"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">21</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你已经成年且可以合法饮酒。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你已经成年，但不能合法饮酒。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">else</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"你还未成年。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这里，首先判断是否成年，然后在成年基础上判断是否可以合法饮酒。</p>

<h3 id="4-switch-语句"><span style="color: rgb(0,191,255);"><strong>4. <code class="language-plaintext highlighter-rouge">switch</code> 语句</strong></span></h3>

<p><code class="language-plaintext highlighter-rouge">switch</code> 语句用于测试一个变量是否等于多个值中的某一个。它适用于多个条件的判断。</p>

<h4 id="语法-2"><span style="color: rgb(238,130,238);"><strong>语法：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span> <span class="p">(</span><span class="n">variable</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">case</span> <span class="n">value1</span><span class="p">:</span>
        <span class="c1">// 如果 variable == value1，执行此语句块</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">value2</span><span class="p">:</span>
        <span class="c1">// 如果 variable == value2，执行此语句块</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="nl">default:</span>
        <span class="c1">// 如果 variable 不等于任何 case，执行此语句块</span>
        <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="示例-3"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">day</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="k">switch</span> <span class="p">(</span><span class="n">day</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"今天是星期一。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"今天是星期二。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">3</span><span class="p">:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"今天是星期三。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="nl">default:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"输入无效。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>在这个例子中，<code class="language-plaintext highlighter-rouge">switch</code> 语句根据变量 <code class="language-plaintext highlighter-rouge">day</code> 的值选择匹配的 <code class="language-plaintext highlighter-rouge">case</code>，并执行相应的代码块。</p>

<h3 id="5-嵌套-switch-语句"><span style="color: rgb(0,191,255);"><strong>5. 嵌套 <code class="language-plaintext highlighter-rouge">switch</code> 语句</strong></span></h3>

<p><code class="language-plaintext highlighter-rouge">switch</code> 语句也可以嵌套，即在一个 <code class="language-plaintext highlighter-rouge">case</code> 或 <code class="language-plaintext highlighter-rouge">default</code> 分支内使用另一个 <code class="language-plaintext highlighter-rouge">switch</code> 语句。</p>

<h4 id="示例-4"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">choice</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">subChoice</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="k">switch</span> <span class="p">(</span><span class="n">choice</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">switch</span> <span class="p">(</span><span class="n">subChoice</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"选择了选项1的子选项1。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"选择了选项1的子选项2。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"选择了选项2。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"无效选择。"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这个例子展示了在 <code class="language-plaintext highlighter-rouge">switch</code> 语句中的 <code class="language-plaintext highlighter-rouge">case</code> 选项内嵌套另一个 <code class="language-plaintext highlighter-rouge">switch</code> 语句。</p>

<h3 id="6-条件运算符--"><span style="color: rgb(0,191,255);"><strong>6. 条件运算符 <code class="language-plaintext highlighter-rouge">? :</code></strong></span></h3>

<p>条件运算符 <code class="language-plaintext highlighter-rouge">? :</code>，又称三目运算符，是一种简洁的方式来替代 <code class="language-plaintext highlighter-rouge">if...else</code> 语句。它的形式如下：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">condition</span> <span class="o">?</span> <span class="n">expression1</span> <span class="o">:</span> <span class="n">expression2</span><span class="p">;</span>
</code></pre></div></div>

<p>如果 <code class="language-plaintext highlighter-rouge">condition</code> 为真，则计算并返回 <code class="language-plaintext highlighter-rouge">expression1</code>，否则计算并返回 <code class="language-plaintext highlighter-rouge">expression2</code>。</p>

<h4 id="示例-5"><span style="color: rgb(238,130,238);"><strong>示例：</strong></span></h4>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
<span class="n">string</span> <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span><span class="p">)</span> <span class="o">?</span> <span class="s">"你已经成年了。"</span> <span class="o">:</span> <span class="s">"你还未成年。"</span><span class="p">;</span>
<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</code></pre></div></div>

<p>在这个例子中，三目运算符判断 <code class="language-plaintext highlighter-rouge">age</code> 是否大于或等于 18。如果条件成立，返回 <code class="language-plaintext highlighter-rouge">"你已经成年了。"</code>，否则返回 <code class="language-plaintext highlighter-rouge">"你还未成年。" </code>。</p>]]></content><author><name>ZJM</name></author><category term="code/algorithm/basic-knowledge" /><category term="Code" /><summary type="html"><![CDATA[判断结构]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-cover-8.png" /><media:content medium="image" url="http://localhost:4000/code-cover-8.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>